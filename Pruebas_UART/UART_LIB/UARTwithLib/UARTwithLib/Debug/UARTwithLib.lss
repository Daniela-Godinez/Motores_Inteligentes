
UARTwithLib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010c  00800100  0000098c  00000a20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000098c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000035  0080020c  0080020c  00000b2c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000b2c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ace  00000000  00000000  00000c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007dc  00000000  00000000  000016fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000045b  00000000  00000000  00001eda  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d4  00000000  00000000  00002338  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000477  00000000  00000000  0000240c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000226  00000000  00000000  00002883  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002aa9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  18:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  24:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  2c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  40:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  54:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  58:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  5c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  60:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  64:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	63 64       	ori	r22, 0x43	; 67
  6a:	69 6e       	ori	r22, 0xE9	; 233
  6c:	6f 70       	andi	r22, 0x0F	; 15
  6e:	73 75       	andi	r23, 0x53	; 83
  70:	78 58       	subi	r23, 0x88	; 136
  72:	5b 00       	.word	0x005b	; ????

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	12 e0       	ldi	r17, 0x02	; 2
  82:	a0 e0       	ldi	r26, 0x00	; 0
  84:	b1 e0       	ldi	r27, 0x01	; 1
  86:	ec e8       	ldi	r30, 0x8C	; 140
  88:	f9 e0       	ldi	r31, 0x09	; 9
  8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	ac 30       	cpi	r26, 0x0C	; 12
  92:	b1 07       	cpc	r27, r17
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
  96:	22 e0       	ldi	r18, 0x02	; 2
  98:	ac e0       	ldi	r26, 0x0C	; 12
  9a:	b2 e0       	ldi	r27, 0x02	; 2
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
  9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
  a0:	a1 34       	cpi	r26, 0x41	; 65
  a2:	b2 07       	cpc	r27, r18
  a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
  a6:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  aa:	0c 94 c4 04 	jmp	0x988	; 0x988 <_exit>

000000ae <__bad_interrupt>:
  ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <main>:

#include "UART.h"

char rx_buffer[50];

int main(void) {
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
  b6:	cd b7       	in	r28, 0x3d	; 61
  b8:	de b7       	in	r29, 0x3e	; 62
  ba:	28 97       	sbiw	r28, 0x08	; 8
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	f8 94       	cli
  c0:	de bf       	out	0x3e, r29	; 62
  c2:	0f be       	out	0x3f, r0	; 63
  c4:	cd bf       	out	0x3d, r28	; 61
	UART_init(103); // Set UART baud rate to 9600
  c6:	87 e6       	ldi	r24, 0x67	; 103
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 9d 00 	call	0x13a	; 0x13a <UART_init>
	int data1, data2, data3, data4;
	while (1) {
		UART_receive_delimited_string(); // Receive data in format "(data1,data2,data3,data4)"
  ce:	0e 94 c9 00 	call	0x192	; 0x192 <UART_receive_delimited_string>
		sscanf(rx_buffer, "%d,%d,%d,%d", &data1, &data2, &data3, &data4);
  d2:	ce 01       	movw	r24, r28
  d4:	07 96       	adiw	r24, 0x07	; 7
  d6:	9f 93       	push	r25
  d8:	8f 93       	push	r24
  da:	02 97       	sbiw	r24, 0x02	; 2
  dc:	9f 93       	push	r25
  de:	8f 93       	push	r24
  e0:	02 97       	sbiw	r24, 0x02	; 2
  e2:	9f 93       	push	r25
  e4:	8f 93       	push	r24
  e6:	02 97       	sbiw	r24, 0x02	; 2
  e8:	9f 93       	push	r25
  ea:	8f 93       	push	r24
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	91 e0       	ldi	r25, 0x01	; 1
  f0:	9f 93       	push	r25
  f2:	8f 93       	push	r24
  f4:	8d e0       	ldi	r24, 0x0D	; 13
  f6:	92 e0       	ldi	r25, 0x02	; 2
  f8:	9f 93       	push	r25
  fa:	8f 93       	push	r24
  fc:	0e 94 59 01 	call	0x2b2	; 0x2b2 <sscanf>
		
		uint8_t commandcorrect = check_data_ranges(data1, data2, data3, data4);
 100:	2f 81       	ldd	r18, Y+7	; 0x07
 102:	38 85       	ldd	r19, Y+8	; 0x08
 104:	4d 81       	ldd	r20, Y+5	; 0x05
 106:	5e 81       	ldd	r21, Y+6	; 0x06
 108:	6b 81       	ldd	r22, Y+3	; 0x03
 10a:	7c 81       	ldd	r23, Y+4	; 0x04
 10c:	89 81       	ldd	r24, Y+1	; 0x01
 10e:	9a 81       	ldd	r25, Y+2	; 0x02
 110:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <check_data_ranges>
 114:	18 2f       	mov	r17, r24
		
		if (!commandcorrect)
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	f8 94       	cli
 11a:	de bf       	out	0x3e, r29	; 62
 11c:	0f be       	out	0x3f, r0	; 63
 11e:	cd bf       	out	0x3d, r28	; 61
 120:	11 11       	cpse	r17, r1
 122:	04 c0       	rjmp	.+8      	; 0x12c <main+0x7a>
		{
			UART_transmit_string("El comando será ejecutado.");
 124:	8c e0       	ldi	r24, 0x0C	; 12
 126:	91 e0       	ldi	r25, 0x01	; 1
 128:	0e 94 b6 00 	call	0x16c	; 0x16c <UART_transmit_string>
		}
		if(commandcorrect){
 12c:	11 23       	and	r17, r17
 12e:	79 f2       	breq	.-98     	; 0xce <main+0x1c>
			UART_transmit_string("Ingresar el comando de nuevo.");
 130:	87 e2       	ldi	r24, 0x27	; 39
 132:	91 e0       	ldi	r25, 0x01	; 1
 134:	0e 94 b6 00 	call	0x16c	; 0x16c <UART_transmit_string>
 138:	ca cf       	rjmp	.-108    	; 0xce <main+0x1c>

0000013a <UART_init>:
 */ 

#include "UART.h"

void UART_init(unsigned int ubrr) {
	UBRR0H = (unsigned char)(ubrr >> 8);
 13a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 13e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 142:	88 e1       	ldi	r24, 0x18	; 24
 144:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 148:	86 e0       	ldi	r24, 0x06	; 6
 14a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 14e:	08 95       	ret

00000150 <UART_receive>:
}

// UART receive
char UART_receive(void) {
	while (!(UCSR0A & (1 << RXC0)));
 150:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 154:	88 23       	and	r24, r24
 156:	e4 f7       	brge	.-8      	; 0x150 <UART_receive>
	return UDR0;
 158:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 15c:	08 95       	ret

0000015e <UART_transmit>:

// UART transmit
void UART_transmit(char data) {
	while (!(UCSR0A & (1 << UDRE0)));
 15e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 162:	95 ff       	sbrs	r25, 5
 164:	fc cf       	rjmp	.-8      	; 0x15e <UART_transmit>
	UDR0 = data;
 166:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 16a:	08 95       	ret

0000016c <UART_transmit_string>:
}

// Send a string (for debugging/error messages)
void UART_transmit_string(const char *str) {
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	ec 01       	movw	r28, r24
	while (*str) {
 172:	03 c0       	rjmp	.+6      	; 0x17a <UART_transmit_string+0xe>
		UART_transmit(*str++);
 174:	21 96       	adiw	r28, 0x01	; 1
 176:	0e 94 af 00 	call	0x15e	; 0x15e <UART_transmit>
	UDR0 = data;
}

// Send a string (for debugging/error messages)
void UART_transmit_string(const char *str) {
	while (*str) {
 17a:	88 81       	ld	r24, Y
 17c:	81 11       	cpse	r24, r1
 17e:	fa cf       	rjmp	.-12     	; 0x174 <UART_transmit_string+0x8>
		UART_transmit(*str++);
	}
	UART_transmit('\r'); // Retorno de carro
 180:	8d e0       	ldi	r24, 0x0D	; 13
 182:	0e 94 af 00 	call	0x15e	; 0x15e <UART_transmit>
	UART_transmit('\n'); // Nueva línea
 186:	8a e0       	ldi	r24, 0x0A	; 10
 188:	0e 94 af 00 	call	0x15e	; 0x15e <UART_transmit>
}
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	08 95       	ret

00000192 <UART_receive_delimited_string>:

// Receive a string between '(' and ')'
void UART_receive_delimited_string(void) {
	char received_char;
	rx_index = 0;
 192:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <rx_index>
	receiving = 0;
 196:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <receiving>

	while (1) {
		received_char = UART_receive();
 19a:	0e 94 a8 00 	call	0x150	; 0x150 <UART_receive>

		if (received_char == '(') {
 19e:	88 32       	cpi	r24, 0x28	; 40
 1a0:	31 f4       	brne	.+12     	; 0x1ae <UART_receive_delimited_string+0x1c>
			receiving = 1;
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <receiving>
			rx_index = 0;
 1a8:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <rx_index>
 1ac:	f6 cf       	rjmp	.-20     	; 0x19a <UART_receive_delimited_string+0x8>
		}
		else if (received_char == ')' && receiving) {
 1ae:	89 32       	cpi	r24, 0x29	; 41
 1b0:	89 f4       	brne	.+34     	; 0x1d4 <UART_receive_delimited_string+0x42>
 1b2:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <receiving>
 1b6:	99 23       	and	r25, r25
 1b8:	69 f0       	breq	.+26     	; 0x1d4 <UART_receive_delimited_string+0x42>
			rx_buffer[rx_index] = '\0'; // Null-terminate the string
 1ba:	e0 91 40 02 	lds	r30, 0x0240	; 0x800240 <rx_index>
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	e3 5f       	subi	r30, 0xF3	; 243
 1c2:	fd 4f       	sbci	r31, 0xFD	; 253
 1c4:	10 82       	st	Z, r1
			UART_transmit('\r'); // Envía "enter" al recibir ')'
 1c6:	8d e0       	ldi	r24, 0x0D	; 13
 1c8:	0e 94 af 00 	call	0x15e	; 0x15e <UART_transmit>
			UART_transmit('\n');
 1cc:	8a e0       	ldi	r24, 0x0A	; 10
 1ce:	0e 94 af 00 	call	0x15e	; 0x15e <UART_transmit>
		}
		else if (receiving && rx_index < BUFFER_SIZE - 1) {
			rx_buffer[rx_index++] = received_char;
		}
	}
}
 1d2:	08 95       	ret
			rx_buffer[rx_index] = '\0'; // Null-terminate the string
			UART_transmit('\r'); // Envía "enter" al recibir ')'
			UART_transmit('\n');
			break;
		}
		else if (receiving && rx_index < BUFFER_SIZE - 1) {
 1d4:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <receiving>
 1d8:	99 23       	and	r25, r25
 1da:	f9 f2       	breq	.-66     	; 0x19a <UART_receive_delimited_string+0x8>
 1dc:	e0 91 40 02 	lds	r30, 0x0240	; 0x800240 <rx_index>
 1e0:	e1 33       	cpi	r30, 0x31	; 49
 1e2:	d8 f6       	brcc	.-74     	; 0x19a <UART_receive_delimited_string+0x8>
			rx_buffer[rx_index++] = received_char;
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	9e 0f       	add	r25, r30
 1e8:	90 93 40 02 	sts	0x0240, r25	; 0x800240 <rx_index>
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	e3 5f       	subi	r30, 0xF3	; 243
 1f0:	fd 4f       	sbci	r31, 0xFD	; 253
 1f2:	80 83       	st	Z, r24
 1f4:	d2 cf       	rjmp	.-92     	; 0x19a <UART_receive_delimited_string+0x8>

000001f6 <check_data_ranges>:
		}
	}
}

uint8_t check_data_ranges(int data1, int data2, int data3, int data4) {
 1f6:	ef 92       	push	r14
 1f8:	ff 92       	push	r15
 1fa:	0f 93       	push	r16
 1fc:	1f 93       	push	r17
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	eb 01       	movw	r28, r22
 204:	7a 01       	movw	r14, r20
 206:	89 01       	movw	r16, r18
	flag_error = 0;
 208:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <__data_end>
	
	if (data1 < 1 || data1 >= 2) {
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	39 f0       	breq	.+14     	; 0x21e <check_data_ranges+0x28>
		UART_transmit_string("Error: Ingresar dirección de motor existente.");
 210:	85 e4       	ldi	r24, 0x45	; 69
 212:	91 e0       	ldi	r25, 0x01	; 1
 214:	0e 94 b6 00 	call	0x16c	; 0x16c <UART_transmit_string>
		flag_error = 1;
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>
	}

	// Ranges for data3 and data4 depending on data2 value
	if(data2 == 1){
 21e:	c1 30       	cpi	r28, 0x01	; 1
 220:	d1 05       	cpc	r29, r1
 222:	59 f4       	brne	.+22     	; 0x23a <check_data_ranges+0x44>
		if (data3 < 0 || data3 > 3)
 224:	84 e0       	ldi	r24, 0x04	; 4
 226:	e8 16       	cp	r14, r24
 228:	f1 04       	cpc	r15, r1
 22a:	38 f0       	brcs	.+14     	; 0x23a <check_data_ranges+0x44>
		{
			UART_transmit_string("Error: El microstepping esta fuera de rango (0-3).");
 22c:	83 e7       	ldi	r24, 0x73	; 115
 22e:	91 e0       	ldi	r25, 0x01	; 1
 230:	0e 94 b6 00 	call	0x16c	; 0x16c <UART_transmit_string>
			flag_error = 1;
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>
		}
	}
	if (data2 == 4)
 23a:	c4 30       	cpi	r28, 0x04	; 4
 23c:	d1 05       	cpc	r29, r1
 23e:	b1 f4       	brne	.+44     	; 0x26c <check_data_ranges+0x76>
	{
		if (data3 < 0 || data3 > 255)
 240:	8f ef       	ldi	r24, 0xFF	; 255
 242:	e8 16       	cp	r14, r24
 244:	f1 04       	cpc	r15, r1
 246:	41 f0       	breq	.+16     	; 0x258 <check_data_ranges+0x62>
 248:	38 f0       	brcs	.+14     	; 0x258 <check_data_ranges+0x62>
		{
			UART_transmit_string("Error: Rango de RPM incorrecto.");
 24a:	86 ea       	ldi	r24, 0xA6	; 166
 24c:	91 e0       	ldi	r25, 0x01	; 1
 24e:	0e 94 b6 00 	call	0x16c	; 0x16c <UART_transmit_string>
			flag_error = 1;
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>
		}
		if (data4 < 0 || data4 > 10)
 258:	0b 30       	cpi	r16, 0x0B	; 11
 25a:	11 05       	cpc	r17, r1
 25c:	38 f0       	brcs	.+14     	; 0x26c <check_data_ranges+0x76>
		{
			UART_transmit_string("Error: Rango de tiempo incorrecto.");
 25e:	86 ec       	ldi	r24, 0xC6	; 198
 260:	91 e0       	ldi	r25, 0x01	; 1
 262:	0e 94 b6 00 	call	0x16c	; 0x16c <UART_transmit_string>
			flag_error = 1;
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>
		}
	}
	if (data2 == 6)
 26c:	26 97       	sbiw	r28, 0x06	; 6
 26e:	c1 f4       	brne	.+48     	; 0x2a0 <check_data_ranges+0xaa>
	{
		if (data3 < 0 || data3 > 255)
 270:	8f ef       	ldi	r24, 0xFF	; 255
 272:	e8 16       	cp	r14, r24
 274:	f1 04       	cpc	r15, r1
 276:	41 f0       	breq	.+16     	; 0x288 <check_data_ranges+0x92>
 278:	38 f0       	brcs	.+14     	; 0x288 <check_data_ranges+0x92>
		{
			UART_transmit_string("Error: Rango de RPM incorrecto.");
 27a:	86 ea       	ldi	r24, 0xA6	; 166
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	0e 94 b6 00 	call	0x16c	; 0x16c <UART_transmit_string>
			flag_error = 1;
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>
		}
		if (data4 < -180 || data4 > 180)
 288:	0c 54       	subi	r16, 0x4C	; 76
 28a:	1f 4f       	sbci	r17, 0xFF	; 255
 28c:	09 36       	cpi	r16, 0x69	; 105
 28e:	11 40       	sbci	r17, 0x01	; 1
 290:	38 f0       	brcs	.+14     	; 0x2a0 <check_data_ranges+0xaa>
		{
			UART_transmit_string("Error: Rango de ángulo incorrecto.");
 292:	89 ee       	ldi	r24, 0xE9	; 233
 294:	91 e0       	ldi	r25, 0x01	; 1
 296:	0e 94 b6 00 	call	0x16c	; 0x16c <UART_transmit_string>
			flag_error = 1;
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>
		}
	}
	return flag_error;
 2a0:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
 2a4:	df 91       	pop	r29
 2a6:	cf 91       	pop	r28
 2a8:	1f 91       	pop	r17
 2aa:	0f 91       	pop	r16
 2ac:	ff 90       	pop	r15
 2ae:	ef 90       	pop	r14
 2b0:	08 95       	ret

000002b2 <sscanf>:
 2b2:	ae e0       	ldi	r26, 0x0E	; 14
 2b4:	b0 e0       	ldi	r27, 0x00	; 0
 2b6:	ef e5       	ldi	r30, 0x5F	; 95
 2b8:	f1 e0       	ldi	r31, 0x01	; 1
 2ba:	0c 94 9d 04 	jmp	0x93a	; 0x93a <__prologue_saves__+0x20>
 2be:	85 e0       	ldi	r24, 0x05	; 5
 2c0:	8c 83       	std	Y+4, r24	; 0x04
 2c2:	8b 89       	ldd	r24, Y+19	; 0x13
 2c4:	9c 89       	ldd	r25, Y+20	; 0x14
 2c6:	9a 83       	std	Y+2, r25	; 0x02
 2c8:	89 83       	std	Y+1, r24	; 0x01
 2ca:	ae 01       	movw	r20, r28
 2cc:	49 5e       	subi	r20, 0xE9	; 233
 2ce:	5f 4f       	sbci	r21, 0xFF	; 255
 2d0:	6d 89       	ldd	r22, Y+21	; 0x15
 2d2:	7e 89       	ldd	r23, Y+22	; 0x16
 2d4:	ce 01       	movw	r24, r28
 2d6:	01 96       	adiw	r24, 0x01	; 1
 2d8:	0e 94 0e 03 	call	0x61c	; 0x61c <vfscanf>
 2dc:	2e 96       	adiw	r28, 0x0e	; 14
 2de:	e2 e0       	ldi	r30, 0x02	; 2
 2e0:	0c 94 b9 04 	jmp	0x972	; 0x972 <__epilogue_restores__+0x20>

000002e4 <putval>:
 2e4:	20 fd       	sbrc	r18, 0
 2e6:	09 c0       	rjmp	.+18     	; 0x2fa <putval+0x16>
 2e8:	fc 01       	movw	r30, r24
 2ea:	23 fd       	sbrc	r18, 3
 2ec:	05 c0       	rjmp	.+10     	; 0x2f8 <putval+0x14>
 2ee:	22 ff       	sbrs	r18, 2
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <putval+0x12>
 2f2:	73 83       	std	Z+3, r23	; 0x03
 2f4:	62 83       	std	Z+2, r22	; 0x02
 2f6:	51 83       	std	Z+1, r21	; 0x01
 2f8:	40 83       	st	Z, r20
 2fa:	08 95       	ret

000002fc <mulacc>:
 2fc:	44 fd       	sbrc	r20, 4
 2fe:	17 c0       	rjmp	.+46     	; 0x32e <mulacc+0x32>
 300:	46 fd       	sbrc	r20, 6
 302:	17 c0       	rjmp	.+46     	; 0x332 <mulacc+0x36>
 304:	ab 01       	movw	r20, r22
 306:	bc 01       	movw	r22, r24
 308:	da 01       	movw	r26, r20
 30a:	fb 01       	movw	r30, r22
 30c:	aa 0f       	add	r26, r26
 30e:	bb 1f       	adc	r27, r27
 310:	ee 1f       	adc	r30, r30
 312:	ff 1f       	adc	r31, r31
 314:	10 94       	com	r1
 316:	d1 f7       	brne	.-12     	; 0x30c <mulacc+0x10>
 318:	4a 0f       	add	r20, r26
 31a:	5b 1f       	adc	r21, r27
 31c:	6e 1f       	adc	r22, r30
 31e:	7f 1f       	adc	r23, r31
 320:	cb 01       	movw	r24, r22
 322:	ba 01       	movw	r22, r20
 324:	66 0f       	add	r22, r22
 326:	77 1f       	adc	r23, r23
 328:	88 1f       	adc	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	09 c0       	rjmp	.+18     	; 0x340 <mulacc+0x44>
 32e:	33 e0       	ldi	r19, 0x03	; 3
 330:	01 c0       	rjmp	.+2      	; 0x334 <mulacc+0x38>
 332:	34 e0       	ldi	r19, 0x04	; 4
 334:	66 0f       	add	r22, r22
 336:	77 1f       	adc	r23, r23
 338:	88 1f       	adc	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	31 50       	subi	r19, 0x01	; 1
 33e:	d1 f7       	brne	.-12     	; 0x334 <mulacc+0x38>
 340:	62 0f       	add	r22, r18
 342:	71 1d       	adc	r23, r1
 344:	81 1d       	adc	r24, r1
 346:	91 1d       	adc	r25, r1
 348:	08 95       	ret

0000034a <skip_spaces>:
 34a:	0f 93       	push	r16
 34c:	1f 93       	push	r17
 34e:	cf 93       	push	r28
 350:	df 93       	push	r29
 352:	8c 01       	movw	r16, r24
 354:	c8 01       	movw	r24, r16
 356:	0e 94 33 04 	call	0x866	; 0x866 <fgetc>
 35a:	ec 01       	movw	r28, r24
 35c:	97 fd       	sbrc	r25, 7
 35e:	08 c0       	rjmp	.+16     	; 0x370 <skip_spaces+0x26>
 360:	0e 94 1f 04 	call	0x83e	; 0x83e <isspace>
 364:	89 2b       	or	r24, r25
 366:	b1 f7       	brne	.-20     	; 0x354 <skip_spaces+0xa>
 368:	b8 01       	movw	r22, r16
 36a:	ce 01       	movw	r24, r28
 36c:	0e 94 71 04 	call	0x8e2	; 0x8e2 <ungetc>
 370:	ce 01       	movw	r24, r28
 372:	df 91       	pop	r29
 374:	cf 91       	pop	r28
 376:	1f 91       	pop	r17
 378:	0f 91       	pop	r16
 37a:	08 95       	ret

0000037c <conv_int>:
 37c:	8f 92       	push	r8
 37e:	9f 92       	push	r9
 380:	af 92       	push	r10
 382:	bf 92       	push	r11
 384:	ef 92       	push	r14
 386:	ff 92       	push	r15
 388:	0f 93       	push	r16
 38a:	1f 93       	push	r17
 38c:	cf 93       	push	r28
 38e:	df 93       	push	r29
 390:	8c 01       	movw	r16, r24
 392:	d6 2f       	mov	r29, r22
 394:	7a 01       	movw	r14, r20
 396:	b2 2e       	mov	r11, r18
 398:	0e 94 33 04 	call	0x866	; 0x866 <fgetc>
 39c:	9c 01       	movw	r18, r24
 39e:	33 27       	eor	r19, r19
 3a0:	2b 32       	cpi	r18, 0x2B	; 43
 3a2:	31 05       	cpc	r19, r1
 3a4:	31 f0       	breq	.+12     	; 0x3b2 <conv_int+0x36>
 3a6:	2d 32       	cpi	r18, 0x2D	; 45
 3a8:	31 05       	cpc	r19, r1
 3aa:	61 f4       	brne	.+24     	; 0x3c4 <conv_int+0x48>
 3ac:	8b 2d       	mov	r24, r11
 3ae:	80 68       	ori	r24, 0x80	; 128
 3b0:	b8 2e       	mov	r11, r24
 3b2:	d1 50       	subi	r29, 0x01	; 1
 3b4:	11 f4       	brne	.+4      	; 0x3ba <conv_int+0x3e>
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	68 c0       	rjmp	.+208    	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 3ba:	c8 01       	movw	r24, r16
 3bc:	0e 94 33 04 	call	0x866	; 0x866 <fgetc>
 3c0:	97 fd       	sbrc	r25, 7
 3c2:	f9 cf       	rjmp	.-14     	; 0x3b6 <conv_int+0x3a>
 3c4:	cb 2d       	mov	r28, r11
 3c6:	cd 7f       	andi	r28, 0xFD	; 253
 3c8:	2b 2d       	mov	r18, r11
 3ca:	20 73       	andi	r18, 0x30	; 48
 3cc:	09 f5       	brne	.+66     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 3ce:	80 33       	cpi	r24, 0x30	; 48
 3d0:	f9 f4       	brne	.+62     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 3d2:	aa 24       	eor	r10, r10
 3d4:	aa 94       	dec	r10
 3d6:	ad 0e       	add	r10, r29
 3d8:	09 f4       	brne	.+2      	; 0x3dc <conv_int+0x60>
 3da:	43 c0       	rjmp	.+134    	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 3dc:	c8 01       	movw	r24, r16
 3de:	0e 94 33 04 	call	0x866	; 0x866 <fgetc>
 3e2:	97 fd       	sbrc	r25, 7
 3e4:	3e c0       	rjmp	.+124    	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 3e6:	9c 01       	movw	r18, r24
 3e8:	2f 7d       	andi	r18, 0xDF	; 223
 3ea:	33 27       	eor	r19, r19
 3ec:	28 35       	cpi	r18, 0x58	; 88
 3ee:	31 05       	cpc	r19, r1
 3f0:	49 f4       	brne	.+18     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3f2:	c2 64       	ori	r28, 0x42	; 66
 3f4:	d2 50       	subi	r29, 0x02	; 2
 3f6:	a9 f1       	breq	.+106    	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 3f8:	c8 01       	movw	r24, r16
 3fa:	0e 94 33 04 	call	0x866	; 0x866 <fgetc>
 3fe:	97 ff       	sbrs	r25, 7
 400:	07 c0       	rjmp	.+14     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 402:	2f c0       	rjmp	.+94     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 404:	b6 fe       	sbrs	r11, 6
 406:	02 c0       	rjmp	.+4      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 408:	c2 60       	ori	r28, 0x02	; 2
 40a:	01 c0       	rjmp	.+2      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 40c:	c2 61       	ori	r28, 0x12	; 18
 40e:	da 2d       	mov	r29, r10
 410:	81 2c       	mov	r8, r1
 412:	91 2c       	mov	r9, r1
 414:	54 01       	movw	r10, r8
 416:	20 ed       	ldi	r18, 0xD0	; 208
 418:	28 0f       	add	r18, r24
 41a:	28 30       	cpi	r18, 0x08	; 8
 41c:	80 f0       	brcs	.+32     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 41e:	c4 ff       	sbrs	r28, 4
 420:	04 c0       	rjmp	.+8      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 422:	b8 01       	movw	r22, r16
 424:	0e 94 71 04 	call	0x8e2	; 0x8e2 <ungetc>
 428:	19 c0       	rjmp	.+50     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 42a:	2a 30       	cpi	r18, 0x0A	; 10
 42c:	40 f0       	brcs	.+16     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 42e:	c6 ff       	sbrs	r28, 6
 430:	f8 cf       	rjmp	.-16     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 432:	2f 7d       	andi	r18, 0xDF	; 223
 434:	3f ee       	ldi	r19, 0xEF	; 239
 436:	32 0f       	add	r19, r18
 438:	36 30       	cpi	r19, 0x06	; 6
 43a:	98 f7       	brcc	.-26     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 43c:	27 50       	subi	r18, 0x07	; 7
 43e:	4c 2f       	mov	r20, r28
 440:	c5 01       	movw	r24, r10
 442:	b4 01       	movw	r22, r8
 444:	0e 94 7e 01 	call	0x2fc	; 0x2fc <mulacc>
 448:	4b 01       	movw	r8, r22
 44a:	5c 01       	movw	r10, r24
 44c:	c2 60       	ori	r28, 0x02	; 2
 44e:	d1 50       	subi	r29, 0x01	; 1
 450:	59 f0       	breq	.+22     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 452:	c8 01       	movw	r24, r16
 454:	0e 94 33 04 	call	0x866	; 0x866 <fgetc>
 458:	97 ff       	sbrs	r25, 7
 45a:	dd cf       	rjmp	.-70     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 45c:	c1 fd       	sbrc	r28, 1
 45e:	04 c0       	rjmp	.+8      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 460:	aa cf       	rjmp	.-172    	; 0x3b6 <conv_int+0x3a>
 462:	81 2c       	mov	r8, r1
 464:	91 2c       	mov	r9, r1
 466:	54 01       	movw	r10, r8
 468:	c7 ff       	sbrs	r28, 7
 46a:	08 c0       	rjmp	.+16     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 46c:	b0 94       	com	r11
 46e:	a0 94       	com	r10
 470:	90 94       	com	r9
 472:	80 94       	com	r8
 474:	81 1c       	adc	r8, r1
 476:	91 1c       	adc	r9, r1
 478:	a1 1c       	adc	r10, r1
 47a:	b1 1c       	adc	r11, r1
 47c:	2c 2f       	mov	r18, r28
 47e:	b5 01       	movw	r22, r10
 480:	a4 01       	movw	r20, r8
 482:	c7 01       	movw	r24, r14
 484:	0e 94 72 01 	call	0x2e4	; 0x2e4 <putval>
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	df 91       	pop	r29
 48c:	cf 91       	pop	r28
 48e:	1f 91       	pop	r17
 490:	0f 91       	pop	r16
 492:	ff 90       	pop	r15
 494:	ef 90       	pop	r14
 496:	bf 90       	pop	r11
 498:	af 90       	pop	r10
 49a:	9f 90       	pop	r9
 49c:	8f 90       	pop	r8
 49e:	08 95       	ret

000004a0 <conv_brk>:
 4a0:	a0 e2       	ldi	r26, 0x20	; 32
 4a2:	b0 e0       	ldi	r27, 0x00	; 0
 4a4:	e6 e5       	ldi	r30, 0x56	; 86
 4a6:	f2 e0       	ldi	r31, 0x02	; 2
 4a8:	0c 94 90 04 	jmp	0x920	; 0x920 <__prologue_saves__+0x6>
 4ac:	5c 01       	movw	r10, r24
 4ae:	96 2e       	mov	r9, r22
 4b0:	7a 01       	movw	r14, r20
 4b2:	f9 01       	movw	r30, r18
 4b4:	8e 01       	movw	r16, r28
 4b6:	0f 5f       	subi	r16, 0xFF	; 255
 4b8:	1f 4f       	sbci	r17, 0xFF	; 255
 4ba:	68 01       	movw	r12, r16
 4bc:	80 e2       	ldi	r24, 0x20	; 32
 4be:	d8 01       	movw	r26, r16
 4c0:	1d 92       	st	X+, r1
 4c2:	8a 95       	dec	r24
 4c4:	e9 f7       	brne	.-6      	; 0x4c0 <conv_brk+0x20>
 4c6:	d5 01       	movw	r26, r10
 4c8:	13 96       	adiw	r26, 0x03	; 3
 4ca:	8c 90       	ld	r8, X
 4cc:	80 e0       	ldi	r24, 0x00	; 0
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	61 2c       	mov	r6, r1
 4d2:	71 2c       	mov	r7, r1
 4d4:	30 e0       	ldi	r19, 0x00	; 0
 4d6:	61 e0       	ldi	r22, 0x01	; 1
 4d8:	70 e0       	ldi	r23, 0x00	; 0
 4da:	83 fc       	sbrc	r8, 3
 4dc:	25 91       	lpm	r18, Z+
 4de:	83 fe       	sbrs	r8, 3
 4e0:	21 91       	ld	r18, Z+
 4e2:	8f 01       	movw	r16, r30
 4e4:	52 2e       	mov	r5, r18
 4e6:	21 11       	cpse	r18, r1
 4e8:	03 c0       	rjmp	.+6      	; 0x4f0 <conv_brk+0x50>
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	92 c0       	rjmp	.+292    	; 0x614 <conv_brk+0x174>
 4f0:	2e 35       	cpi	r18, 0x5E	; 94
 4f2:	11 f4       	brne	.+4      	; 0x4f8 <conv_brk+0x58>
 4f4:	00 97       	sbiw	r24, 0x00	; 0
 4f6:	51 f1       	breq	.+84     	; 0x54c <conv_brk+0xac>
 4f8:	43 2f       	mov	r20, r19
 4fa:	50 e0       	ldi	r21, 0x00	; 0
 4fc:	48 17       	cp	r20, r24
 4fe:	59 07       	cpc	r21, r25
 500:	3c f4       	brge	.+14     	; 0x510 <conv_brk+0x70>
 502:	2d 35       	cpi	r18, 0x5D	; 93
 504:	59 f1       	breq	.+86     	; 0x55c <conv_brk+0xbc>
 506:	2d 32       	cpi	r18, 0x2D	; 45
 508:	19 f4       	brne	.+6      	; 0x510 <conv_brk+0x70>
 50a:	77 20       	and	r7, r7
 50c:	09 f1       	breq	.+66     	; 0x550 <conv_brk+0xb0>
 50e:	03 c0       	rjmp	.+6      	; 0x516 <conv_brk+0x76>
 510:	77 20       	and	r7, r7
 512:	09 f4       	brne	.+2      	; 0x516 <conv_brk+0x76>
 514:	6a c0       	rjmp	.+212    	; 0x5ea <conv_brk+0x14a>
 516:	45 2d       	mov	r20, r5
 518:	46 95       	lsr	r20
 51a:	46 95       	lsr	r20
 51c:	46 95       	lsr	r20
 51e:	d6 01       	movw	r26, r12
 520:	a4 0f       	add	r26, r20
 522:	b1 1d       	adc	r27, r1
 524:	45 2d       	mov	r20, r5
 526:	47 70       	andi	r20, 0x07	; 7
 528:	8b 01       	movw	r16, r22
 52a:	02 c0       	rjmp	.+4      	; 0x530 <conv_brk+0x90>
 52c:	00 0f       	add	r16, r16
 52e:	11 1f       	adc	r17, r17
 530:	4a 95       	dec	r20
 532:	e2 f7       	brpl	.-8      	; 0x52c <conv_brk+0x8c>
 534:	a8 01       	movw	r20, r16
 536:	5c 91       	ld	r21, X
 538:	45 2b       	or	r20, r21
 53a:	4c 93       	st	X, r20
 53c:	65 14       	cp	r6, r5
 53e:	59 f0       	breq	.+22     	; 0x556 <conv_brk+0xb6>
 540:	56 14       	cp	r5, r6
 542:	10 f4       	brcc	.+4      	; 0x548 <conv_brk+0xa8>
 544:	53 94       	inc	r5
 546:	e7 cf       	rjmp	.-50     	; 0x516 <conv_brk+0x76>
 548:	5a 94       	dec	r5
 54a:	e5 cf       	rjmp	.-54     	; 0x516 <conv_brk+0x76>
 54c:	31 e0       	ldi	r19, 0x01	; 1
 54e:	04 c0       	rjmp	.+8      	; 0x558 <conv_brk+0xb8>
 550:	77 24       	eor	r7, r7
 552:	73 94       	inc	r7
 554:	01 c0       	rjmp	.+2      	; 0x558 <conv_brk+0xb8>
 556:	71 2c       	mov	r7, r1
 558:	01 96       	adiw	r24, 0x01	; 1
 55a:	bf cf       	rjmp	.-130    	; 0x4da <conv_brk+0x3a>
 55c:	77 20       	and	r7, r7
 55e:	19 f0       	breq	.+6      	; 0x566 <conv_brk+0xc6>
 560:	8e 81       	ldd	r24, Y+6	; 0x06
 562:	80 62       	ori	r24, 0x20	; 32
 564:	8e 83       	std	Y+6, r24	; 0x06
 566:	31 11       	cpse	r19, r1
 568:	03 c0       	rjmp	.+6      	; 0x570 <conv_brk+0xd0>
 56a:	88 24       	eor	r8, r8
 56c:	83 94       	inc	r8
 56e:	17 c0       	rjmp	.+46     	; 0x59e <conv_brk+0xfe>
 570:	f6 01       	movw	r30, r12
 572:	9e 01       	movw	r18, r28
 574:	2f 5d       	subi	r18, 0xDF	; 223
 576:	3f 4f       	sbci	r19, 0xFF	; 255
 578:	80 81       	ld	r24, Z
 57a:	80 95       	com	r24
 57c:	81 93       	st	Z+, r24
 57e:	2e 17       	cp	r18, r30
 580:	3f 07       	cpc	r19, r31
 582:	d1 f7       	brne	.-12     	; 0x578 <conv_brk+0xd8>
 584:	f2 cf       	rjmp	.-28     	; 0x56a <conv_brk+0xca>
 586:	e1 14       	cp	r14, r1
 588:	f1 04       	cpc	r15, r1
 58a:	29 f0       	breq	.+10     	; 0x596 <conv_brk+0xf6>
 58c:	d7 01       	movw	r26, r14
 58e:	8c 93       	st	X, r24
 590:	f7 01       	movw	r30, r14
 592:	31 96       	adiw	r30, 0x01	; 1
 594:	7f 01       	movw	r14, r30
 596:	9a 94       	dec	r9
 598:	81 2c       	mov	r8, r1
 59a:	99 20       	and	r9, r9
 59c:	f9 f0       	breq	.+62     	; 0x5dc <conv_brk+0x13c>
 59e:	c5 01       	movw	r24, r10
 5a0:	0e 94 33 04 	call	0x866	; 0x866 <fgetc>
 5a4:	97 fd       	sbrc	r25, 7
 5a6:	18 c0       	rjmp	.+48     	; 0x5d8 <conv_brk+0x138>
 5a8:	fc 01       	movw	r30, r24
 5aa:	ff 27       	eor	r31, r31
 5ac:	23 e0       	ldi	r18, 0x03	; 3
 5ae:	f5 95       	asr	r31
 5b0:	e7 95       	ror	r30
 5b2:	2a 95       	dec	r18
 5b4:	e1 f7       	brne	.-8      	; 0x5ae <conv_brk+0x10e>
 5b6:	ec 0d       	add	r30, r12
 5b8:	fd 1d       	adc	r31, r13
 5ba:	20 81       	ld	r18, Z
 5bc:	30 e0       	ldi	r19, 0x00	; 0
 5be:	ac 01       	movw	r20, r24
 5c0:	47 70       	andi	r20, 0x07	; 7
 5c2:	55 27       	eor	r21, r21
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <conv_brk+0x12a>
 5c6:	35 95       	asr	r19
 5c8:	27 95       	ror	r18
 5ca:	4a 95       	dec	r20
 5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <conv_brk+0x126>
 5ce:	20 fd       	sbrc	r18, 0
 5d0:	da cf       	rjmp	.-76     	; 0x586 <conv_brk+0xe6>
 5d2:	b5 01       	movw	r22, r10
 5d4:	0e 94 71 04 	call	0x8e2	; 0x8e2 <ungetc>
 5d8:	81 10       	cpse	r8, r1
 5da:	87 cf       	rjmp	.-242    	; 0x4ea <conv_brk+0x4a>
 5dc:	e1 14       	cp	r14, r1
 5de:	f1 04       	cpc	r15, r1
 5e0:	11 f0       	breq	.+4      	; 0x5e6 <conv_brk+0x146>
 5e2:	d7 01       	movw	r26, r14
 5e4:	1c 92       	st	X, r1
 5e6:	c8 01       	movw	r24, r16
 5e8:	15 c0       	rjmp	.+42     	; 0x614 <conv_brk+0x174>
 5ea:	42 2f       	mov	r20, r18
 5ec:	46 95       	lsr	r20
 5ee:	46 95       	lsr	r20
 5f0:	46 95       	lsr	r20
 5f2:	d6 01       	movw	r26, r12
 5f4:	a4 0f       	add	r26, r20
 5f6:	b1 1d       	adc	r27, r1
 5f8:	42 2f       	mov	r20, r18
 5fa:	47 70       	andi	r20, 0x07	; 7
 5fc:	8b 01       	movw	r16, r22
 5fe:	02 c0       	rjmp	.+4      	; 0x604 <conv_brk+0x164>
 600:	00 0f       	add	r16, r16
 602:	11 1f       	adc	r17, r17
 604:	4a 95       	dec	r20
 606:	e2 f7       	brpl	.-8      	; 0x600 <conv_brk+0x160>
 608:	a8 01       	movw	r20, r16
 60a:	5c 91       	ld	r21, X
 60c:	45 2b       	or	r20, r21
 60e:	4c 93       	st	X, r20
 610:	62 2e       	mov	r6, r18
 612:	a2 cf       	rjmp	.-188    	; 0x558 <conv_brk+0xb8>
 614:	a0 96       	adiw	r28, 0x20	; 32
 616:	ef e0       	ldi	r30, 0x0F	; 15
 618:	0c 94 ac 04 	jmp	0x958	; 0x958 <__epilogue_restores__+0x6>

0000061c <vfscanf>:
 61c:	a0 e0       	ldi	r26, 0x00	; 0
 61e:	b0 e0       	ldi	r27, 0x00	; 0
 620:	e4 e1       	ldi	r30, 0x14	; 20
 622:	f3 e0       	ldi	r31, 0x03	; 3
 624:	0c 94 90 04 	jmp	0x920	; 0x920 <__prologue_saves__+0x6>
 628:	6c 01       	movw	r12, r24
 62a:	eb 01       	movw	r28, r22
 62c:	5a 01       	movw	r10, r20
 62e:	fc 01       	movw	r30, r24
 630:	17 82       	std	Z+7, r1	; 0x07
 632:	16 82       	std	Z+6, r1	; 0x06
 634:	51 2c       	mov	r5, r1
 636:	f6 01       	movw	r30, r12
 638:	e3 80       	ldd	r14, Z+3	; 0x03
 63a:	fe 01       	movw	r30, r28
 63c:	e3 fc       	sbrc	r14, 3
 63e:	85 91       	lpm	r24, Z+
 640:	e3 fe       	sbrs	r14, 3
 642:	81 91       	ld	r24, Z+
 644:	18 2f       	mov	r17, r24
 646:	ef 01       	movw	r28, r30
 648:	88 23       	and	r24, r24
 64a:	09 f4       	brne	.+2      	; 0x64e <vfscanf+0x32>
 64c:	ee c0       	rjmp	.+476    	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	0e 94 1f 04 	call	0x83e	; 0x83e <isspace>
 654:	89 2b       	or	r24, r25
 656:	21 f0       	breq	.+8      	; 0x660 <vfscanf+0x44>
 658:	c6 01       	movw	r24, r12
 65a:	0e 94 a5 01 	call	0x34a	; 0x34a <skip_spaces>
 65e:	eb cf       	rjmp	.-42     	; 0x636 <vfscanf+0x1a>
 660:	15 32       	cpi	r17, 0x25	; 37
 662:	41 f4       	brne	.+16     	; 0x674 <vfscanf+0x58>
 664:	fe 01       	movw	r30, r28
 666:	e3 fc       	sbrc	r14, 3
 668:	15 91       	lpm	r17, Z+
 66a:	e3 fe       	sbrs	r14, 3
 66c:	11 91       	ld	r17, Z+
 66e:	ef 01       	movw	r28, r30
 670:	15 32       	cpi	r17, 0x25	; 37
 672:	81 f4       	brne	.+32     	; 0x694 <vfscanf+0x78>
 674:	c6 01       	movw	r24, r12
 676:	0e 94 33 04 	call	0x866	; 0x866 <fgetc>
 67a:	97 fd       	sbrc	r25, 7
 67c:	d4 c0       	rjmp	.+424    	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 67e:	41 2f       	mov	r20, r17
 680:	50 e0       	ldi	r21, 0x00	; 0
 682:	9c 01       	movw	r18, r24
 684:	33 27       	eor	r19, r19
 686:	24 17       	cp	r18, r20
 688:	35 07       	cpc	r19, r21
 68a:	a9 f2       	breq	.-86     	; 0x636 <vfscanf+0x1a>
 68c:	b6 01       	movw	r22, r12
 68e:	0e 94 71 04 	call	0x8e2	; 0x8e2 <ungetc>
 692:	cb c0       	rjmp	.+406    	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 694:	1a 32       	cpi	r17, 0x2A	; 42
 696:	39 f4       	brne	.+14     	; 0x6a6 <vfscanf+0x8a>
 698:	e3 fc       	sbrc	r14, 3
 69a:	15 91       	lpm	r17, Z+
 69c:	e3 fe       	sbrs	r14, 3
 69e:	11 91       	ld	r17, Z+
 6a0:	ef 01       	movw	r28, r30
 6a2:	01 e0       	ldi	r16, 0x01	; 1
 6a4:	01 c0       	rjmp	.+2      	; 0x6a8 <vfscanf+0x8c>
 6a6:	00 e0       	ldi	r16, 0x00	; 0
 6a8:	f1 2c       	mov	r15, r1
 6aa:	20 ed       	ldi	r18, 0xD0	; 208
 6ac:	21 0f       	add	r18, r17
 6ae:	2a 30       	cpi	r18, 0x0A	; 10
 6b0:	80 f4       	brcc	.+32     	; 0x6d2 <vfscanf+0xb6>
 6b2:	02 60       	ori	r16, 0x02	; 2
 6b4:	6f 2d       	mov	r22, r15
 6b6:	70 e0       	ldi	r23, 0x00	; 0
 6b8:	80 e0       	ldi	r24, 0x00	; 0
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	40 e2       	ldi	r20, 0x20	; 32
 6be:	0e 94 7e 01 	call	0x2fc	; 0x2fc <mulacc>
 6c2:	f6 2e       	mov	r15, r22
 6c4:	fe 01       	movw	r30, r28
 6c6:	e3 fc       	sbrc	r14, 3
 6c8:	15 91       	lpm	r17, Z+
 6ca:	e3 fe       	sbrs	r14, 3
 6cc:	11 91       	ld	r17, Z+
 6ce:	ef 01       	movw	r28, r30
 6d0:	ec cf       	rjmp	.-40     	; 0x6aa <vfscanf+0x8e>
 6d2:	01 ff       	sbrs	r16, 1
 6d4:	03 c0       	rjmp	.+6      	; 0x6dc <vfscanf+0xc0>
 6d6:	f1 10       	cpse	r15, r1
 6d8:	03 c0       	rjmp	.+6      	; 0x6e0 <vfscanf+0xc4>
 6da:	a7 c0       	rjmp	.+334    	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 6dc:	ff 24       	eor	r15, r15
 6de:	fa 94       	dec	r15
 6e0:	18 36       	cpi	r17, 0x68	; 104
 6e2:	19 f0       	breq	.+6      	; 0x6ea <vfscanf+0xce>
 6e4:	1c 36       	cpi	r17, 0x6C	; 108
 6e6:	51 f0       	breq	.+20     	; 0x6fc <vfscanf+0xe0>
 6e8:	10 c0       	rjmp	.+32     	; 0x70a <vfscanf+0xee>
 6ea:	fe 01       	movw	r30, r28
 6ec:	e3 fc       	sbrc	r14, 3
 6ee:	15 91       	lpm	r17, Z+
 6f0:	e3 fe       	sbrs	r14, 3
 6f2:	11 91       	ld	r17, Z+
 6f4:	ef 01       	movw	r28, r30
 6f6:	18 36       	cpi	r17, 0x68	; 104
 6f8:	41 f4       	brne	.+16     	; 0x70a <vfscanf+0xee>
 6fa:	08 60       	ori	r16, 0x08	; 8
 6fc:	04 60       	ori	r16, 0x04	; 4
 6fe:	fe 01       	movw	r30, r28
 700:	e3 fc       	sbrc	r14, 3
 702:	15 91       	lpm	r17, Z+
 704:	e3 fe       	sbrs	r14, 3
 706:	11 91       	ld	r17, Z+
 708:	ef 01       	movw	r28, r30
 70a:	11 23       	and	r17, r17
 70c:	09 f4       	brne	.+2      	; 0x710 <vfscanf+0xf4>
 70e:	8d c0       	rjmp	.+282    	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 710:	61 2f       	mov	r22, r17
 712:	70 e0       	ldi	r23, 0x00	; 0
 714:	88 e6       	ldi	r24, 0x68	; 104
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	0e 94 28 04 	call	0x850	; 0x850 <strchr_P>
 71c:	89 2b       	or	r24, r25
 71e:	09 f4       	brne	.+2      	; 0x722 <vfscanf+0x106>
 720:	84 c0       	rjmp	.+264    	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 722:	00 fd       	sbrc	r16, 0
 724:	07 c0       	rjmp	.+14     	; 0x734 <vfscanf+0x118>
 726:	f5 01       	movw	r30, r10
 728:	80 80       	ld	r8, Z
 72a:	91 80       	ldd	r9, Z+1	; 0x01
 72c:	c5 01       	movw	r24, r10
 72e:	02 96       	adiw	r24, 0x02	; 2
 730:	5c 01       	movw	r10, r24
 732:	02 c0       	rjmp	.+4      	; 0x738 <vfscanf+0x11c>
 734:	81 2c       	mov	r8, r1
 736:	91 2c       	mov	r9, r1
 738:	1e 36       	cpi	r17, 0x6E	; 110
 73a:	51 f4       	brne	.+20     	; 0x750 <vfscanf+0x134>
 73c:	f6 01       	movw	r30, r12
 73e:	46 81       	ldd	r20, Z+6	; 0x06
 740:	57 81       	ldd	r21, Z+7	; 0x07
 742:	60 e0       	ldi	r22, 0x00	; 0
 744:	70 e0       	ldi	r23, 0x00	; 0
 746:	20 2f       	mov	r18, r16
 748:	c4 01       	movw	r24, r8
 74a:	0e 94 72 01 	call	0x2e4	; 0x2e4 <putval>
 74e:	73 cf       	rjmp	.-282    	; 0x636 <vfscanf+0x1a>
 750:	13 36       	cpi	r17, 0x63	; 99
 752:	a9 f4       	brne	.+42     	; 0x77e <vfscanf+0x162>
 754:	01 fd       	sbrc	r16, 1
 756:	02 c0       	rjmp	.+4      	; 0x75c <vfscanf+0x140>
 758:	ff 24       	eor	r15, r15
 75a:	f3 94       	inc	r15
 75c:	c6 01       	movw	r24, r12
 75e:	0e 94 33 04 	call	0x866	; 0x866 <fgetc>
 762:	97 fd       	sbrc	r25, 7
 764:	60 c0       	rjmp	.+192    	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 766:	81 14       	cp	r8, r1
 768:	91 04       	cpc	r9, r1
 76a:	29 f0       	breq	.+10     	; 0x776 <vfscanf+0x15a>
 76c:	f4 01       	movw	r30, r8
 76e:	80 83       	st	Z, r24
 770:	c4 01       	movw	r24, r8
 772:	01 96       	adiw	r24, 0x01	; 1
 774:	4c 01       	movw	r8, r24
 776:	fa 94       	dec	r15
 778:	f1 10       	cpse	r15, r1
 77a:	f0 cf       	rjmp	.-32     	; 0x75c <vfscanf+0x140>
 77c:	50 c0       	rjmp	.+160    	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 77e:	1b 35       	cpi	r17, 0x5B	; 91
 780:	59 f4       	brne	.+22     	; 0x798 <vfscanf+0x17c>
 782:	9e 01       	movw	r18, r28
 784:	a4 01       	movw	r20, r8
 786:	6f 2d       	mov	r22, r15
 788:	c6 01       	movw	r24, r12
 78a:	0e 94 50 02 	call	0x4a0	; 0x4a0 <conv_brk>
 78e:	ec 01       	movw	r28, r24
 790:	89 2b       	or	r24, r25
 792:	09 f0       	breq	.+2      	; 0x796 <vfscanf+0x17a>
 794:	44 c0       	rjmp	.+136    	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 796:	3e c0       	rjmp	.+124    	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 798:	c6 01       	movw	r24, r12
 79a:	0e 94 a5 01 	call	0x34a	; 0x34a <skip_spaces>
 79e:	97 fd       	sbrc	r25, 7
 7a0:	42 c0       	rjmp	.+132    	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 7a2:	1f 36       	cpi	r17, 0x6F	; 111
 7a4:	61 f1       	breq	.+88     	; 0x7fe <vfscanf+0x1e2>
 7a6:	28 f4       	brcc	.+10     	; 0x7b2 <vfscanf+0x196>
 7a8:	14 36       	cpi	r17, 0x64	; 100
 7aa:	39 f1       	breq	.+78     	; 0x7fa <vfscanf+0x1de>
 7ac:	19 36       	cpi	r17, 0x69	; 105
 7ae:	51 f1       	breq	.+84     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7b0:	28 c0       	rjmp	.+80     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7b2:	13 37       	cpi	r17, 0x73	; 115
 7b4:	71 f0       	breq	.+28     	; 0x7d2 <vfscanf+0x1b6>
 7b6:	15 37       	cpi	r17, 0x75	; 117
 7b8:	01 f1       	breq	.+64     	; 0x7fa <vfscanf+0x1de>
 7ba:	23 c0       	rjmp	.+70     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7bc:	81 14       	cp	r8, r1
 7be:	91 04       	cpc	r9, r1
 7c0:	29 f0       	breq	.+10     	; 0x7cc <vfscanf+0x1b0>
 7c2:	f4 01       	movw	r30, r8
 7c4:	60 82       	st	Z, r6
 7c6:	c4 01       	movw	r24, r8
 7c8:	01 96       	adiw	r24, 0x01	; 1
 7ca:	4c 01       	movw	r8, r24
 7cc:	fa 94       	dec	r15
 7ce:	ff 20       	and	r15, r15
 7d0:	71 f0       	breq	.+28     	; 0x7ee <vfscanf+0x1d2>
 7d2:	c6 01       	movw	r24, r12
 7d4:	0e 94 33 04 	call	0x866	; 0x866 <fgetc>
 7d8:	3c 01       	movw	r6, r24
 7da:	97 fd       	sbrc	r25, 7
 7dc:	08 c0       	rjmp	.+16     	; 0x7ee <vfscanf+0x1d2>
 7de:	0e 94 1f 04 	call	0x83e	; 0x83e <isspace>
 7e2:	89 2b       	or	r24, r25
 7e4:	59 f3       	breq	.-42     	; 0x7bc <vfscanf+0x1a0>
 7e6:	b6 01       	movw	r22, r12
 7e8:	c3 01       	movw	r24, r6
 7ea:	0e 94 71 04 	call	0x8e2	; 0x8e2 <ungetc>
 7ee:	81 14       	cp	r8, r1
 7f0:	91 04       	cpc	r9, r1
 7f2:	a9 f0       	breq	.+42     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 7f4:	f4 01       	movw	r30, r8
 7f6:	10 82       	st	Z, r1
 7f8:	12 c0       	rjmp	.+36     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 7fa:	00 62       	ori	r16, 0x20	; 32
 7fc:	03 c0       	rjmp	.+6      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7fe:	00 61       	ori	r16, 0x10	; 16
 800:	01 c0       	rjmp	.+2      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 802:	00 64       	ori	r16, 0x40	; 64
 804:	20 2f       	mov	r18, r16
 806:	a4 01       	movw	r20, r8
 808:	6f 2d       	mov	r22, r15
 80a:	c6 01       	movw	r24, r12
 80c:	0e 94 be 01 	call	0x37c	; 0x37c <conv_int>
 810:	81 11       	cpse	r24, r1
 812:	05 c0       	rjmp	.+10     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 814:	f6 01       	movw	r30, r12
 816:	83 81       	ldd	r24, Z+3	; 0x03
 818:	80 73       	andi	r24, 0x30	; 48
 81a:	29 f4       	brne	.+10     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 81c:	06 c0       	rjmp	.+12     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 81e:	00 fd       	sbrc	r16, 0
 820:	0a cf       	rjmp	.-492    	; 0x636 <vfscanf+0x1a>
 822:	53 94       	inc	r5
 824:	08 cf       	rjmp	.-496    	; 0x636 <vfscanf+0x1a>
 826:	55 20       	and	r5, r5
 828:	19 f0       	breq	.+6      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 82a:	85 2d       	mov	r24, r5
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	02 c0       	rjmp	.+4      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 830:	8f ef       	ldi	r24, 0xFF	; 255
 832:	9f ef       	ldi	r25, 0xFF	; 255
 834:	cd b7       	in	r28, 0x3d	; 61
 836:	de b7       	in	r29, 0x3e	; 62
 838:	ef e0       	ldi	r30, 0x0F	; 15
 83a:	0c 94 ac 04 	jmp	0x958	; 0x958 <__epilogue_restores__+0x6>

0000083e <isspace>:
 83e:	91 11       	cpse	r25, r1
 840:	0c 94 8a 04 	jmp	0x914	; 0x914 <__ctype_isfalse>
 844:	80 32       	cpi	r24, 0x20	; 32
 846:	19 f0       	breq	.+6      	; 0x84e <isspace+0x10>
 848:	89 50       	subi	r24, 0x09	; 9
 84a:	85 50       	subi	r24, 0x05	; 5
 84c:	c8 f7       	brcc	.-14     	; 0x840 <isspace+0x2>
 84e:	08 95       	ret

00000850 <strchr_P>:
 850:	fc 01       	movw	r30, r24
 852:	05 90       	lpm	r0, Z+
 854:	06 16       	cp	r0, r22
 856:	21 f0       	breq	.+8      	; 0x860 <strchr_P+0x10>
 858:	00 20       	and	r0, r0
 85a:	d9 f7       	brne	.-10     	; 0x852 <strchr_P+0x2>
 85c:	c0 01       	movw	r24, r0
 85e:	08 95       	ret
 860:	31 97       	sbiw	r30, 0x01	; 1
 862:	cf 01       	movw	r24, r30
 864:	08 95       	ret

00000866 <fgetc>:
 866:	cf 93       	push	r28
 868:	df 93       	push	r29
 86a:	ec 01       	movw	r28, r24
 86c:	2b 81       	ldd	r18, Y+3	; 0x03
 86e:	20 ff       	sbrs	r18, 0
 870:	33 c0       	rjmp	.+102    	; 0x8d8 <fgetc+0x72>
 872:	26 ff       	sbrs	r18, 6
 874:	0a c0       	rjmp	.+20     	; 0x88a <fgetc+0x24>
 876:	2f 7b       	andi	r18, 0xBF	; 191
 878:	2b 83       	std	Y+3, r18	; 0x03
 87a:	8e 81       	ldd	r24, Y+6	; 0x06
 87c:	9f 81       	ldd	r25, Y+7	; 0x07
 87e:	01 96       	adiw	r24, 0x01	; 1
 880:	9f 83       	std	Y+7, r25	; 0x07
 882:	8e 83       	std	Y+6, r24	; 0x06
 884:	8a 81       	ldd	r24, Y+2	; 0x02
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	29 c0       	rjmp	.+82     	; 0x8dc <fgetc+0x76>
 88a:	22 ff       	sbrs	r18, 2
 88c:	0f c0       	rjmp	.+30     	; 0x8ac <fgetc+0x46>
 88e:	e8 81       	ld	r30, Y
 890:	f9 81       	ldd	r31, Y+1	; 0x01
 892:	80 81       	ld	r24, Z
 894:	08 2e       	mov	r0, r24
 896:	00 0c       	add	r0, r0
 898:	99 0b       	sbc	r25, r25
 89a:	00 97       	sbiw	r24, 0x00	; 0
 89c:	19 f4       	brne	.+6      	; 0x8a4 <fgetc+0x3e>
 89e:	20 62       	ori	r18, 0x20	; 32
 8a0:	2b 83       	std	Y+3, r18	; 0x03
 8a2:	1a c0       	rjmp	.+52     	; 0x8d8 <fgetc+0x72>
 8a4:	31 96       	adiw	r30, 0x01	; 1
 8a6:	f9 83       	std	Y+1, r31	; 0x01
 8a8:	e8 83       	st	Y, r30
 8aa:	0e c0       	rjmp	.+28     	; 0x8c8 <fgetc+0x62>
 8ac:	ea 85       	ldd	r30, Y+10	; 0x0a
 8ae:	fb 85       	ldd	r31, Y+11	; 0x0b
 8b0:	09 95       	icall
 8b2:	97 ff       	sbrs	r25, 7
 8b4:	09 c0       	rjmp	.+18     	; 0x8c8 <fgetc+0x62>
 8b6:	2b 81       	ldd	r18, Y+3	; 0x03
 8b8:	01 96       	adiw	r24, 0x01	; 1
 8ba:	11 f0       	breq	.+4      	; 0x8c0 <fgetc+0x5a>
 8bc:	80 e2       	ldi	r24, 0x20	; 32
 8be:	01 c0       	rjmp	.+2      	; 0x8c2 <fgetc+0x5c>
 8c0:	80 e1       	ldi	r24, 0x10	; 16
 8c2:	82 2b       	or	r24, r18
 8c4:	8b 83       	std	Y+3, r24	; 0x03
 8c6:	08 c0       	rjmp	.+16     	; 0x8d8 <fgetc+0x72>
 8c8:	2e 81       	ldd	r18, Y+6	; 0x06
 8ca:	3f 81       	ldd	r19, Y+7	; 0x07
 8cc:	2f 5f       	subi	r18, 0xFF	; 255
 8ce:	3f 4f       	sbci	r19, 0xFF	; 255
 8d0:	3f 83       	std	Y+7, r19	; 0x07
 8d2:	2e 83       	std	Y+6, r18	; 0x06
 8d4:	99 27       	eor	r25, r25
 8d6:	02 c0       	rjmp	.+4      	; 0x8dc <fgetc+0x76>
 8d8:	8f ef       	ldi	r24, 0xFF	; 255
 8da:	9f ef       	ldi	r25, 0xFF	; 255
 8dc:	df 91       	pop	r29
 8de:	cf 91       	pop	r28
 8e0:	08 95       	ret

000008e2 <ungetc>:
 8e2:	fb 01       	movw	r30, r22
 8e4:	23 81       	ldd	r18, Z+3	; 0x03
 8e6:	20 ff       	sbrs	r18, 0
 8e8:	12 c0       	rjmp	.+36     	; 0x90e <__stack+0xf>
 8ea:	26 fd       	sbrc	r18, 6
 8ec:	10 c0       	rjmp	.+32     	; 0x90e <__stack+0xf>
 8ee:	8f 3f       	cpi	r24, 0xFF	; 255
 8f0:	3f ef       	ldi	r19, 0xFF	; 255
 8f2:	93 07       	cpc	r25, r19
 8f4:	61 f0       	breq	.+24     	; 0x90e <__stack+0xf>
 8f6:	82 83       	std	Z+2, r24	; 0x02
 8f8:	2f 7d       	andi	r18, 0xDF	; 223
 8fa:	20 64       	ori	r18, 0x40	; 64
 8fc:	23 83       	std	Z+3, r18	; 0x03
 8fe:	26 81       	ldd	r18, Z+6	; 0x06
 900:	37 81       	ldd	r19, Z+7	; 0x07
 902:	21 50       	subi	r18, 0x01	; 1
 904:	31 09       	sbc	r19, r1
 906:	37 83       	std	Z+7, r19	; 0x07
 908:	26 83       	std	Z+6, r18	; 0x06
 90a:	99 27       	eor	r25, r25
 90c:	08 95       	ret
 90e:	8f ef       	ldi	r24, 0xFF	; 255
 910:	9f ef       	ldi	r25, 0xFF	; 255
 912:	08 95       	ret

00000914 <__ctype_isfalse>:
 914:	99 27       	eor	r25, r25
 916:	88 27       	eor	r24, r24

00000918 <__ctype_istrue>:
 918:	08 95       	ret

0000091a <__prologue_saves__>:
 91a:	2f 92       	push	r2
 91c:	3f 92       	push	r3
 91e:	4f 92       	push	r4
 920:	5f 92       	push	r5
 922:	6f 92       	push	r6
 924:	7f 92       	push	r7
 926:	8f 92       	push	r8
 928:	9f 92       	push	r9
 92a:	af 92       	push	r10
 92c:	bf 92       	push	r11
 92e:	cf 92       	push	r12
 930:	df 92       	push	r13
 932:	ef 92       	push	r14
 934:	ff 92       	push	r15
 936:	0f 93       	push	r16
 938:	1f 93       	push	r17
 93a:	cf 93       	push	r28
 93c:	df 93       	push	r29
 93e:	cd b7       	in	r28, 0x3d	; 61
 940:	de b7       	in	r29, 0x3e	; 62
 942:	ca 1b       	sub	r28, r26
 944:	db 0b       	sbc	r29, r27
 946:	0f b6       	in	r0, 0x3f	; 63
 948:	f8 94       	cli
 94a:	de bf       	out	0x3e, r29	; 62
 94c:	0f be       	out	0x3f, r0	; 63
 94e:	cd bf       	out	0x3d, r28	; 61
 950:	09 94       	ijmp

00000952 <__epilogue_restores__>:
 952:	2a 88       	ldd	r2, Y+18	; 0x12
 954:	39 88       	ldd	r3, Y+17	; 0x11
 956:	48 88       	ldd	r4, Y+16	; 0x10
 958:	5f 84       	ldd	r5, Y+15	; 0x0f
 95a:	6e 84       	ldd	r6, Y+14	; 0x0e
 95c:	7d 84       	ldd	r7, Y+13	; 0x0d
 95e:	8c 84       	ldd	r8, Y+12	; 0x0c
 960:	9b 84       	ldd	r9, Y+11	; 0x0b
 962:	aa 84       	ldd	r10, Y+10	; 0x0a
 964:	b9 84       	ldd	r11, Y+9	; 0x09
 966:	c8 84       	ldd	r12, Y+8	; 0x08
 968:	df 80       	ldd	r13, Y+7	; 0x07
 96a:	ee 80       	ldd	r14, Y+6	; 0x06
 96c:	fd 80       	ldd	r15, Y+5	; 0x05
 96e:	0c 81       	ldd	r16, Y+4	; 0x04
 970:	1b 81       	ldd	r17, Y+3	; 0x03
 972:	aa 81       	ldd	r26, Y+2	; 0x02
 974:	b9 81       	ldd	r27, Y+1	; 0x01
 976:	ce 0f       	add	r28, r30
 978:	d1 1d       	adc	r29, r1
 97a:	0f b6       	in	r0, 0x3f	; 63
 97c:	f8 94       	cli
 97e:	de bf       	out	0x3e, r29	; 62
 980:	0f be       	out	0x3f, r0	; 63
 982:	cd bf       	out	0x3d, r28	; 61
 984:	ed 01       	movw	r28, r26
 986:	08 95       	ret

00000988 <_exit>:
 988:	f8 94       	cli

0000098a <__stop_program>:
 98a:	ff cf       	rjmp	.-2      	; 0x98a <__stop_program>
