
Cliente.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000005c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000552  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800100  00800100  000005c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000638  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d6d  00000000  00000000  00000708  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c4  00000000  00000000  00001475  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000747  00000000  00000000  00001d39  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a8  00000000  00000000  00002480  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000572  00000000  00000000  00002628  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000449  00000000  00000000  00002b9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00002fe3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 31       	cpi	r26, 0x11	; 17
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 2c 02 	call	0x458	; 0x458 <main>
  88:	0c 94 a7 02 	jmp	0x54e	; 0x54e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init_A4988>:
	{
		prescaler_activated();
		OCR1A = RPM2Counter(RPM);
	}
	stop_motor();
}
  90:	84 b1       	in	r24, 0x04	; 4
  92:	82 60       	ori	r24, 0x02	; 2
  94:	84 b9       	out	0x04, r24	; 4
  96:	84 b1       	in	r24, 0x04	; 4
  98:	81 60       	ori	r24, 0x01	; 1
  9a:	84 b9       	out	0x04, r24	; 4
  9c:	8a b1       	in	r24, 0x0a	; 10
  9e:	80 68       	ori	r24, 0x80	; 128
  a0:	8a b9       	out	0x0a, r24	; 10
  a2:	8a b1       	in	r24, 0x0a	; 10
  a4:	80 64       	ori	r24, 0x40	; 64
  a6:	8a b9       	out	0x0a, r24	; 10
  a8:	8a b1       	in	r24, 0x0a	; 10
  aa:	80 62       	ori	r24, 0x20	; 32
  ac:	8a b9       	out	0x0a, r24	; 10
  ae:	8a b1       	in	r24, 0x0a	; 10
  b0:	80 61       	ori	r24, 0x10	; 16
  b2:	8a b9       	out	0x0a, r24	; 10
  b4:	8a b1       	in	r24, 0x0a	; 10
  b6:	88 60       	ori	r24, 0x08	; 8
  b8:	8a b9       	out	0x0a, r24	; 10
  ba:	8b b1       	in	r24, 0x0b	; 11
  bc:	80 62       	ori	r24, 0x20	; 32
  be:	8b b9       	out	0x0b, r24	; 11
  c0:	8b b1       	in	r24, 0x0b	; 11
  c2:	80 61       	ori	r24, 0x10	; 16
  c4:	8b b9       	out	0x0b, r24	; 11
  c6:	e1 e8       	ldi	r30, 0x81	; 129
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	8f 7e       	andi	r24, 0xEF	; 239
  ce:	80 83       	st	Z, r24
  d0:	80 81       	ld	r24, Z
  d2:	88 60       	ori	r24, 0x08	; 8
  d4:	80 83       	st	Z, r24
  d6:	e0 e8       	ldi	r30, 0x80	; 128
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	8d 7f       	andi	r24, 0xFD	; 253
  de:	80 83       	st	Z, r24
  e0:	80 81       	ld	r24, Z
  e2:	8e 7f       	andi	r24, 0xFE	; 254
  e4:	80 83       	st	Z, r24
  e6:	80 81       	ld	r24, Z
  e8:	8f 77       	andi	r24, 0x7F	; 127
  ea:	80 83       	st	Z, r24
  ec:	80 81       	ld	r24, Z
  ee:	80 64       	ori	r24, 0x40	; 64
  f0:	80 83       	st	Z, r24
  f2:	ef e6       	ldi	r30, 0x6F	; 111
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	82 60       	ori	r24, 0x02	; 2
  fa:	80 83       	st	Z, r24
  fc:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <previous_rpm+0x1>
 100:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <previous_rpm>
 104:	08 95       	ret

00000106 <prescaler_activated>:
 106:	e1 e8       	ldi	r30, 0x81	; 129
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	8b 7f       	andi	r24, 0xFB	; 251
 10e:	80 83       	st	Z, r24
 110:	80 81       	ld	r24, Z
 112:	82 60       	ori	r24, 0x02	; 2
 114:	80 83       	st	Z, r24
 116:	80 81       	ld	r24, Z
 118:	8e 7f       	andi	r24, 0xFE	; 254
 11a:	80 83       	st	Z, r24
 11c:	08 95       	ret

0000011e <RPM2Counter>:
 11e:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <_edata>
 122:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <_edata+0x1>
 126:	84 9f       	mul	r24, r20
 128:	90 01       	movw	r18, r0
 12a:	85 9f       	mul	r24, r21
 12c:	30 0d       	add	r19, r0
 12e:	94 9f       	mul	r25, r20
 130:	30 0d       	add	r19, r0
 132:	11 24       	eor	r1, r1
 134:	a9 e8       	ldi	r26, 0x89	; 137
 136:	b8 e8       	ldi	r27, 0x88	; 136
 138:	0e 94 76 02 	call	0x4ec	; 0x4ec <__umulhisi3>
 13c:	96 95       	lsr	r25
 13e:	87 95       	ror	r24
 140:	92 95       	swap	r25
 142:	82 95       	swap	r24
 144:	8f 70       	andi	r24, 0x0F	; 15
 146:	89 27       	eor	r24, r25
 148:	9f 70       	andi	r25, 0x0F	; 15
 14a:	89 27       	eor	r24, r25
 14c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <frequency+0x1>
 150:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <frequency>
 154:	9c 01       	movw	r18, r24
 156:	40 e0       	ldi	r20, 0x00	; 0
 158:	50 e0       	ldi	r21, 0x00	; 0
 15a:	60 e4       	ldi	r22, 0x40	; 64
 15c:	72 e4       	ldi	r23, 0x42	; 66
 15e:	8f e0       	ldi	r24, 0x0F	; 15
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 57 02 	call	0x4ae	; 0x4ae <__divmodsi4>
 166:	c9 01       	movw	r24, r18
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <counter+0x1>
 16e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <counter>
 172:	08 95       	ret

00000174 <Microstepping>:
 174:	82 30       	cpi	r24, 0x02	; 2
 176:	61 f1       	breq	.+88     	; 0x1d0 <Microstepping+0x5c>
 178:	28 f4       	brcc	.+10     	; 0x184 <Microstepping+0x10>
 17a:	88 23       	and	r24, r24
 17c:	49 f0       	breq	.+18     	; 0x190 <Microstepping+0x1c>
 17e:	81 30       	cpi	r24, 0x01	; 1
 180:	b9 f0       	breq	.+46     	; 0x1b0 <Microstepping+0x3c>
 182:	08 95       	ret
 184:	83 30       	cpi	r24, 0x03	; 3
 186:	a1 f1       	breq	.+104    	; 0x1f0 <Microstepping+0x7c>
 188:	84 30       	cpi	r24, 0x04	; 4
 18a:	09 f4       	brne	.+2      	; 0x18e <Microstepping+0x1a>
 18c:	41 c0       	rjmp	.+130    	; 0x210 <Microstepping+0x9c>
 18e:	08 95       	ret
 190:	85 b1       	in	r24, 0x05	; 5
 192:	8e 7f       	andi	r24, 0xFE	; 254
 194:	85 b9       	out	0x05, r24	; 5
 196:	8b b1       	in	r24, 0x0b	; 11
 198:	8f 77       	andi	r24, 0x7F	; 127
 19a:	8b b9       	out	0x0b, r24	; 11
 19c:	8b b1       	in	r24, 0x0b	; 11
 19e:	8f 7b       	andi	r24, 0xBF	; 191
 1a0:	8b b9       	out	0x0b, r24	; 11
 1a2:	88 ec       	ldi	r24, 0xC8	; 200
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1aa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 1ae:	08 95       	ret
 1b0:	85 b1       	in	r24, 0x05	; 5
 1b2:	81 60       	ori	r24, 0x01	; 1
 1b4:	85 b9       	out	0x05, r24	; 5
 1b6:	8b b1       	in	r24, 0x0b	; 11
 1b8:	8f 77       	andi	r24, 0x7F	; 127
 1ba:	8b b9       	out	0x0b, r24	; 11
 1bc:	8b b1       	in	r24, 0x0b	; 11
 1be:	8f 7b       	andi	r24, 0xBF	; 191
 1c0:	8b b9       	out	0x0b, r24	; 11
 1c2:	80 e9       	ldi	r24, 0x90	; 144
 1c4:	91 e0       	ldi	r25, 0x01	; 1
 1c6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1ca:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 1ce:	08 95       	ret
 1d0:	85 b1       	in	r24, 0x05	; 5
 1d2:	8e 7f       	andi	r24, 0xFE	; 254
 1d4:	85 b9       	out	0x05, r24	; 5
 1d6:	8b b1       	in	r24, 0x0b	; 11
 1d8:	80 68       	ori	r24, 0x80	; 128
 1da:	8b b9       	out	0x0b, r24	; 11
 1dc:	8b b1       	in	r24, 0x0b	; 11
 1de:	8f 7b       	andi	r24, 0xBF	; 191
 1e0:	8b b9       	out	0x0b, r24	; 11
 1e2:	80 e2       	ldi	r24, 0x20	; 32
 1e4:	93 e0       	ldi	r25, 0x03	; 3
 1e6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 1ee:	08 95       	ret
 1f0:	85 b1       	in	r24, 0x05	; 5
 1f2:	81 60       	ori	r24, 0x01	; 1
 1f4:	85 b9       	out	0x05, r24	; 5
 1f6:	8b b1       	in	r24, 0x0b	; 11
 1f8:	80 68       	ori	r24, 0x80	; 128
 1fa:	8b b9       	out	0x0b, r24	; 11
 1fc:	8b b1       	in	r24, 0x0b	; 11
 1fe:	8f 7b       	andi	r24, 0xBF	; 191
 200:	8b b9       	out	0x0b, r24	; 11
 202:	80 e4       	ldi	r24, 0x40	; 64
 204:	96 e0       	ldi	r25, 0x06	; 6
 206:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 20a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 20e:	08 95       	ret
 210:	85 b1       	in	r24, 0x05	; 5
 212:	81 60       	ori	r24, 0x01	; 1
 214:	85 b9       	out	0x05, r24	; 5
 216:	8b b1       	in	r24, 0x0b	; 11
 218:	80 68       	ori	r24, 0x80	; 128
 21a:	8b b9       	out	0x0b, r24	; 11
 21c:	8b b1       	in	r24, 0x0b	; 11
 21e:	80 64       	ori	r24, 0x40	; 64
 220:	8b b9       	out	0x0b, r24	; 11
 222:	80 e8       	ldi	r24, 0x80	; 128
 224:	9c e0       	ldi	r25, 0x0C	; 12
 226:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 22a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 22e:	08 95       	ret

00000230 <Clockwise>:
 230:	8b b1       	in	r24, 0x0b	; 11
 232:	87 7f       	andi	r24, 0xF7	; 247
 234:	8b b9       	out	0x0b, r24	; 11
 236:	08 95       	ret

00000238 <set_motor>:
 238:	0f 93       	push	r16
 23a:	1f 93       	push	r17
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	ec 01       	movw	r28, r24
 242:	8b 01       	movw	r16, r22
 244:	0e 94 83 00 	call	0x106	; 0x106 <prescaler_activated>
 248:	ce 01       	movw	r24, r28
 24a:	0e 94 8f 00 	call	0x11e	; 0x11e <RPM2Counter>
 24e:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <max_counter+0x1>
 252:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <max_counter>
 256:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <previous_rpm>
 25a:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <previous_rpm+0x1>
 25e:	0e 94 8f 00 	call	0x11e	; 0x11e <RPM2Counter>
 262:	fc 01       	movw	r30, r24
 264:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <min_counter+0x1>
 268:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <min_counter>
 26c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <previous_rpm>
 270:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <previous_rpm+0x1>
 274:	8c 17       	cp	r24, r28
 276:	9d 07       	cpc	r25, r29
 278:	a8 f5       	brcc	.+106    	; 0x2e4 <set_motor+0xac>
 27a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 27e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 282:	c8 9f       	mul	r28, r24
 284:	90 01       	movw	r18, r0
 286:	c9 9f       	mul	r28, r25
 288:	30 0d       	add	r19, r0
 28a:	d8 9f       	mul	r29, r24
 28c:	30 0d       	add	r19, r0
 28e:	11 24       	eor	r1, r1
 290:	a9 e8       	ldi	r26, 0x89	; 137
 292:	b8 e8       	ldi	r27, 0x88	; 136
 294:	0e 94 76 02 	call	0x4ec	; 0x4ec <__umulhisi3>
 298:	9c 01       	movw	r18, r24
 29a:	36 95       	lsr	r19
 29c:	27 95       	ror	r18
 29e:	32 95       	swap	r19
 2a0:	22 95       	swap	r18
 2a2:	2f 70       	andi	r18, 0x0F	; 15
 2a4:	23 27       	eor	r18, r19
 2a6:	3f 70       	andi	r19, 0x0F	; 15
 2a8:	23 27       	eor	r18, r19
 2aa:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <max_counter>
 2ae:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <max_counter+0x1>
 2b2:	af 01       	movw	r20, r30
 2b4:	48 1b       	sub	r20, r24
 2b6:	59 0b       	sbc	r21, r25
 2b8:	ca 01       	movw	r24, r20
 2ba:	20 9f       	mul	r18, r16
 2bc:	b0 01       	movw	r22, r0
 2be:	21 9f       	mul	r18, r17
 2c0:	70 0d       	add	r23, r0
 2c2:	30 9f       	mul	r19, r16
 2c4:	70 0d       	add	r23, r0
 2c6:	11 24       	eor	r1, r1
 2c8:	0e 94 43 02 	call	0x486	; 0x486 <__udivmodhi4>
 2cc:	70 93 0c 01 	sts	0x010C, r23	; 0x80010c <delta_counter+0x1>
 2d0:	60 93 0b 01 	sts	0x010B, r22	; 0x80010b <delta_counter>
 2d4:	f0 93 89 00 	sts	0x0089, r31	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 2d8:	e0 93 88 00 	sts	0x0088, r30	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <type_movement>
 2e2:	32 c0       	rjmp	.+100    	; 0x348 <set_motor+0x110>
 2e4:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <_edata>
 2e8:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <_edata+0x1>
 2ec:	84 9f       	mul	r24, r20
 2ee:	90 01       	movw	r18, r0
 2f0:	85 9f       	mul	r24, r21
 2f2:	30 0d       	add	r19, r0
 2f4:	94 9f       	mul	r25, r20
 2f6:	30 0d       	add	r19, r0
 2f8:	11 24       	eor	r1, r1
 2fa:	a9 e8       	ldi	r26, 0x89	; 137
 2fc:	b8 e8       	ldi	r27, 0x88	; 136
 2fe:	0e 94 76 02 	call	0x4ec	; 0x4ec <__umulhisi3>
 302:	9c 01       	movw	r18, r24
 304:	36 95       	lsr	r19
 306:	27 95       	ror	r18
 308:	32 95       	swap	r19
 30a:	22 95       	swap	r18
 30c:	2f 70       	andi	r18, 0x0F	; 15
 30e:	23 27       	eor	r18, r19
 310:	3f 70       	andi	r19, 0x0F	; 15
 312:	23 27       	eor	r18, r19
 314:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <max_counter>
 318:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <max_counter+0x1>
 31c:	8e 1b       	sub	r24, r30
 31e:	9f 0b       	sbc	r25, r31
 320:	02 9f       	mul	r16, r18
 322:	b0 01       	movw	r22, r0
 324:	03 9f       	mul	r16, r19
 326:	70 0d       	add	r23, r0
 328:	12 9f       	mul	r17, r18
 32a:	70 0d       	add	r23, r0
 32c:	11 24       	eor	r1, r1
 32e:	0e 94 43 02 	call	0x486	; 0x486 <__udivmodhi4>
 332:	70 93 0c 01 	sts	0x010C, r23	; 0x80010c <delta_counter+0x1>
 336:	60 93 0b 01 	sts	0x010B, r22	; 0x80010b <delta_counter>
 33a:	f0 93 89 00 	sts	0x0089, r31	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 33e:	e0 93 88 00 	sts	0x0088, r30	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 342:	82 e0       	ldi	r24, 0x02	; 2
 344:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <type_movement>
 348:	d0 93 08 01 	sts	0x0108, r29	; 0x800108 <previous_rpm+0x1>
 34c:	c0 93 07 01 	sts	0x0107, r28	; 0x800107 <previous_rpm>
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	1f 91       	pop	r17
 356:	0f 91       	pop	r16
 358:	08 95       	ret

0000035a <__vector_11>:

//---------------------------------
//			INT. FUNCTIONS
//---------------------------------
ISR(TIMER1_COMPA_vect){
 35a:	1f 92       	push	r1
 35c:	0f 92       	push	r0
 35e:	0f b6       	in	r0, 0x3f	; 63
 360:	0f 92       	push	r0
 362:	11 24       	eor	r1, r1
 364:	2f 93       	push	r18
 366:	3f 93       	push	r19
 368:	4f 93       	push	r20
 36a:	5f 93       	push	r21
 36c:	8f 93       	push	r24
 36e:	9f 93       	push	r25
	if (type_movement==1)
 370:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <type_movement>
 374:	81 30       	cpi	r24, 0x01	; 1
 376:	29 f5       	brne	.+74     	; 0x3c2 <__vector_11+0x68>
	{
		if (min_counter>max_counter)
 378:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <min_counter>
 37c:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <min_counter+0x1>
 380:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <max_counter>
 384:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <max_counter+0x1>
 388:	28 17       	cp	r18, r24
 38a:	39 07       	cpc	r19, r25
 38c:	88 f4       	brcc	.+34     	; 0x3b0 <__vector_11+0x56>
		{
			min_counter -= delta_counter;
 38e:	40 91 0b 01 	lds	r20, 0x010B	; 0x80010b <delta_counter>
 392:	50 91 0c 01 	lds	r21, 0x010C	; 0x80010c <delta_counter+0x1>
 396:	84 1b       	sub	r24, r20
 398:	95 0b       	sbc	r25, r21
 39a:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <min_counter+0x1>
 39e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <min_counter>
			if (min_counter<max_counter)
 3a2:	82 17       	cp	r24, r18
 3a4:	93 07       	cpc	r25, r19
 3a6:	20 f4       	brcc	.+8      	; 0x3b0 <__vector_11+0x56>
			{
				min_counter = max_counter;
 3a8:	30 93 06 01 	sts	0x0106, r19	; 0x800106 <min_counter+0x1>
 3ac:	20 93 05 01 	sts	0x0105, r18	; 0x800105 <min_counter>
			}
		}
		OCR1A = min_counter;
 3b0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <min_counter>
 3b4:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <min_counter+0x1>
 3b8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 3bc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 3c0:	26 c0       	rjmp	.+76     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
	}else if (type_movement==2)
 3c2:	82 30       	cpi	r24, 0x02	; 2
 3c4:	21 f5       	brne	.+72     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
	{
		if (min_counter<max_counter)
 3c6:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <min_counter>
 3ca:	50 91 06 01 	lds	r21, 0x0106	; 0x800106 <min_counter+0x1>
 3ce:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <max_counter>
 3d2:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <max_counter+0x1>
 3d6:	48 17       	cp	r20, r24
 3d8:	59 07       	cpc	r21, r25
 3da:	88 f4       	brcc	.+34     	; 0x3fe <__vector_11+0xa4>
		{
			min_counter += delta_counter;
 3dc:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <delta_counter>
 3e0:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <delta_counter+0x1>
 3e4:	24 0f       	add	r18, r20
 3e6:	35 1f       	adc	r19, r21
 3e8:	30 93 06 01 	sts	0x0106, r19	; 0x800106 <min_counter+0x1>
 3ec:	20 93 05 01 	sts	0x0105, r18	; 0x800105 <min_counter>
			if (min_counter>max_counter)
 3f0:	82 17       	cp	r24, r18
 3f2:	93 07       	cpc	r25, r19
 3f4:	20 f4       	brcc	.+8      	; 0x3fe <__vector_11+0xa4>
			{
				min_counter = max_counter;
 3f6:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <min_counter+0x1>
 3fa:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <min_counter>
			}
		}
		OCR1A = min_counter;
 3fe:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <min_counter>
 402:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <min_counter+0x1>
 406:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 40a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	}
}
 40e:	9f 91       	pop	r25
 410:	8f 91       	pop	r24
 412:	5f 91       	pop	r21
 414:	4f 91       	pop	r20
 416:	3f 91       	pop	r19
 418:	2f 91       	pop	r18
 41a:	0f 90       	pop	r0
 41c:	0f be       	out	0x3f, r0	; 63
 41e:	0f 90       	pop	r0
 420:	1f 90       	pop	r1
 422:	18 95       	reti

00000424 <init_ADC>:
//---------------------------------
//	       SETTING FUNCTION
//---------------------------------
void init_ADC(){
	// VOLTAGE REFERENCE - AVcc (01)
	clear_bit(ADMUX, REFS1);
 424:	ec e7       	ldi	r30, 0x7C	; 124
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	80 81       	ld	r24, Z
 42a:	8f 77       	andi	r24, 0x7F	; 127
 42c:	80 83       	st	Z, r24
	set_bit(ADMUX, REFS0);
 42e:	80 81       	ld	r24, Z
 430:	80 64       	ori	r24, 0x40	; 64
 432:	80 83       	st	Z, r24
	// ADC RIGTH ADJUST RESULT
	clear_bit(ADMUX, ADLAR);
 434:	80 81       	ld	r24, Z
 436:	8f 7d       	andi	r24, 0xDF	; 223
 438:	80 83       	st	Z, r24
	// PRESCALER SELECT (128 = 111)
	set_bit(ADCSRA, ADPS0);
 43a:	ea e7       	ldi	r30, 0x7A	; 122
 43c:	f0 e0       	ldi	r31, 0x00	; 0
 43e:	80 81       	ld	r24, Z
 440:	81 60       	ori	r24, 0x01	; 1
 442:	80 83       	st	Z, r24
	set_bit(ADCSRA, ADPS1);
 444:	80 81       	ld	r24, Z
 446:	82 60       	ori	r24, 0x02	; 2
 448:	80 83       	st	Z, r24
	set_bit(ADCSRA, ADPS2);
 44a:	80 81       	ld	r24, Z
 44c:	84 60       	ori	r24, 0x04	; 4
 44e:	80 83       	st	Z, r24
	// ADC ENABLE
	set_bit(ADCSRA, ADEN);
 450:	80 81       	ld	r24, Z
 452:	80 68       	ori	r24, 0x80	; 128
 454:	80 83       	st	Z, r24
 456:	08 95       	ret

00000458 <main>:
// #define bit_is_set(sfr, bit) (_SFR_BYTE(sfr) & _BV(bit))
// #define bit_is_clear(sfr, bit) (!(_SFR_BYTE(sfr) & _BV(bit)))

int main(void)
{
	init_A4988();
 458:	0e 94 48 00 	call	0x90	; 0x90 <init_A4988>
	init_ADC();
 45c:	0e 94 12 02 	call	0x424	; 0x424 <init_ADC>
	int BANDERA = 1;
	sei();
 460:	78 94       	sei

int main(void)
{
	init_A4988();
	init_ADC();
	int BANDERA = 1;
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	90 e0       	ldi	r25, 0x00	; 0
	sei();
    /* Replace with your application code */
    while (1) 
    {
		if (BANDERA)
 466:	00 97       	sbiw	r24, 0x00	; 0
 468:	f1 f3       	breq	.-4      	; 0x466 <main+0xe>
		{
			Clockwise();
 46a:	0e 94 18 01 	call	0x230	; 0x230 <Clockwise>
			//Anticlockwise();
			Microstepping(FULL_STEP);
 46e:	80 e0       	ldi	r24, 0x00	; 0
 470:	0e 94 ba 00 	call	0x174	; 0x174 <Microstepping>
			set_motor(100, 10);
 474:	6a e0       	ldi	r22, 0x0A	; 10
 476:	70 e0       	ldi	r23, 0x00	; 0
 478:	84 e6       	ldi	r24, 0x64	; 100
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	0e 94 1c 01 	call	0x238	; 0x238 <set_motor>
			//move2angle(100, 0);
			BANDERA=0;
 480:	80 e0       	ldi	r24, 0x00	; 0
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	f0 cf       	rjmp	.-32     	; 0x466 <main+0xe>

00000486 <__udivmodhi4>:
 486:	aa 1b       	sub	r26, r26
 488:	bb 1b       	sub	r27, r27
 48a:	51 e1       	ldi	r21, 0x11	; 17
 48c:	07 c0       	rjmp	.+14     	; 0x49c <__udivmodhi4_ep>

0000048e <__udivmodhi4_loop>:
 48e:	aa 1f       	adc	r26, r26
 490:	bb 1f       	adc	r27, r27
 492:	a6 17       	cp	r26, r22
 494:	b7 07       	cpc	r27, r23
 496:	10 f0       	brcs	.+4      	; 0x49c <__udivmodhi4_ep>
 498:	a6 1b       	sub	r26, r22
 49a:	b7 0b       	sbc	r27, r23

0000049c <__udivmodhi4_ep>:
 49c:	88 1f       	adc	r24, r24
 49e:	99 1f       	adc	r25, r25
 4a0:	5a 95       	dec	r21
 4a2:	a9 f7       	brne	.-22     	; 0x48e <__udivmodhi4_loop>
 4a4:	80 95       	com	r24
 4a6:	90 95       	com	r25
 4a8:	bc 01       	movw	r22, r24
 4aa:	cd 01       	movw	r24, r26
 4ac:	08 95       	ret

000004ae <__divmodsi4>:
 4ae:	05 2e       	mov	r0, r21
 4b0:	97 fb       	bst	r25, 7
 4b2:	1e f4       	brtc	.+6      	; 0x4ba <__divmodsi4+0xc>
 4b4:	00 94       	com	r0
 4b6:	0e 94 6e 02 	call	0x4dc	; 0x4dc <__negsi2>
 4ba:	57 fd       	sbrc	r21, 7
 4bc:	07 d0       	rcall	.+14     	; 0x4cc <__divmodsi4_neg2>
 4be:	0e 94 85 02 	call	0x50a	; 0x50a <__udivmodsi4>
 4c2:	07 fc       	sbrc	r0, 7
 4c4:	03 d0       	rcall	.+6      	; 0x4cc <__divmodsi4_neg2>
 4c6:	4e f4       	brtc	.+18     	; 0x4da <__divmodsi4_exit>
 4c8:	0c 94 6e 02 	jmp	0x4dc	; 0x4dc <__negsi2>

000004cc <__divmodsi4_neg2>:
 4cc:	50 95       	com	r21
 4ce:	40 95       	com	r20
 4d0:	30 95       	com	r19
 4d2:	21 95       	neg	r18
 4d4:	3f 4f       	sbci	r19, 0xFF	; 255
 4d6:	4f 4f       	sbci	r20, 0xFF	; 255
 4d8:	5f 4f       	sbci	r21, 0xFF	; 255

000004da <__divmodsi4_exit>:
 4da:	08 95       	ret

000004dc <__negsi2>:
 4dc:	90 95       	com	r25
 4de:	80 95       	com	r24
 4e0:	70 95       	com	r23
 4e2:	61 95       	neg	r22
 4e4:	7f 4f       	sbci	r23, 0xFF	; 255
 4e6:	8f 4f       	sbci	r24, 0xFF	; 255
 4e8:	9f 4f       	sbci	r25, 0xFF	; 255
 4ea:	08 95       	ret

000004ec <__umulhisi3>:
 4ec:	a2 9f       	mul	r26, r18
 4ee:	b0 01       	movw	r22, r0
 4f0:	b3 9f       	mul	r27, r19
 4f2:	c0 01       	movw	r24, r0
 4f4:	a3 9f       	mul	r26, r19
 4f6:	70 0d       	add	r23, r0
 4f8:	81 1d       	adc	r24, r1
 4fa:	11 24       	eor	r1, r1
 4fc:	91 1d       	adc	r25, r1
 4fe:	b2 9f       	mul	r27, r18
 500:	70 0d       	add	r23, r0
 502:	81 1d       	adc	r24, r1
 504:	11 24       	eor	r1, r1
 506:	91 1d       	adc	r25, r1
 508:	08 95       	ret

0000050a <__udivmodsi4>:
 50a:	a1 e2       	ldi	r26, 0x21	; 33
 50c:	1a 2e       	mov	r1, r26
 50e:	aa 1b       	sub	r26, r26
 510:	bb 1b       	sub	r27, r27
 512:	fd 01       	movw	r30, r26
 514:	0d c0       	rjmp	.+26     	; 0x530 <__udivmodsi4_ep>

00000516 <__udivmodsi4_loop>:
 516:	aa 1f       	adc	r26, r26
 518:	bb 1f       	adc	r27, r27
 51a:	ee 1f       	adc	r30, r30
 51c:	ff 1f       	adc	r31, r31
 51e:	a2 17       	cp	r26, r18
 520:	b3 07       	cpc	r27, r19
 522:	e4 07       	cpc	r30, r20
 524:	f5 07       	cpc	r31, r21
 526:	20 f0       	brcs	.+8      	; 0x530 <__udivmodsi4_ep>
 528:	a2 1b       	sub	r26, r18
 52a:	b3 0b       	sbc	r27, r19
 52c:	e4 0b       	sbc	r30, r20
 52e:	f5 0b       	sbc	r31, r21

00000530 <__udivmodsi4_ep>:
 530:	66 1f       	adc	r22, r22
 532:	77 1f       	adc	r23, r23
 534:	88 1f       	adc	r24, r24
 536:	99 1f       	adc	r25, r25
 538:	1a 94       	dec	r1
 53a:	69 f7       	brne	.-38     	; 0x516 <__udivmodsi4_loop>
 53c:	60 95       	com	r22
 53e:	70 95       	com	r23
 540:	80 95       	com	r24
 542:	90 95       	com	r25
 544:	9b 01       	movw	r18, r22
 546:	ac 01       	movw	r20, r24
 548:	bd 01       	movw	r22, r26
 54a:	cf 01       	movw	r24, r30
 54c:	08 95       	ret

0000054e <_exit>:
 54e:	f8 94       	cli

00000550 <__stop_program>:
 550:	ff cf       	rjmp	.-2      	; 0x550 <__stop_program>
