
Version02.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00000df0  00000e84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000df0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000033  00800122  00800122  00000ea6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ea6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ed8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001437  00000000  00000000  00001010  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ae0  00000000  00000000  00002447  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a1b  00000000  00000000  00002f27  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000022c  00000000  00000000  00003944  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006d3  00000000  00000000  00003b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000754  00000000  00000000  00004243  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00004997  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 1f 02 	jmp	0x43e	; 0x43e <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ef       	ldi	r30, 0xF0	; 240
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 32       	cpi	r26, 0x22	; 34
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e2       	ldi	r26, 0x22	; 34
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 35       	cpi	r26, 0x55	; 85
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 90 03 	call	0x720	; 0x720 <main>
  9e:	0c 94 f6 06 	jmp	0xdec	; 0xdec <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_A4988>:
}


void step(uint16_t RPM){
	OCR1A = RPM2Counter(RPM);
	prescaler_activated();
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	84 b9       	out	0x04, r24	; 4
  ac:	84 b1       	in	r24, 0x04	; 4
  ae:	81 60       	ori	r24, 0x01	; 1
  b0:	84 b9       	out	0x04, r24	; 4
  b2:	8a b1       	in	r24, 0x0a	; 10
  b4:	80 68       	ori	r24, 0x80	; 128
  b6:	8a b9       	out	0x0a, r24	; 10
  b8:	8a b1       	in	r24, 0x0a	; 10
  ba:	80 64       	ori	r24, 0x40	; 64
  bc:	8a b9       	out	0x0a, r24	; 10
  be:	8a b1       	in	r24, 0x0a	; 10
  c0:	80 62       	ori	r24, 0x20	; 32
  c2:	8a b9       	out	0x0a, r24	; 10
  c4:	8a b1       	in	r24, 0x0a	; 10
  c6:	80 61       	ori	r24, 0x10	; 16
  c8:	8a b9       	out	0x0a, r24	; 10
  ca:	8a b1       	in	r24, 0x0a	; 10
  cc:	88 60       	ori	r24, 0x08	; 8
  ce:	8a b9       	out	0x0a, r24	; 10
  d0:	8b b1       	in	r24, 0x0b	; 11
  d2:	80 62       	ori	r24, 0x20	; 32
  d4:	8b b9       	out	0x0b, r24	; 11
  d6:	8b b1       	in	r24, 0x0b	; 11
  d8:	80 61       	ori	r24, 0x10	; 16
  da:	8b b9       	out	0x0b, r24	; 11
  dc:	e1 e8       	ldi	r30, 0x81	; 129
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	8f 7e       	andi	r24, 0xEF	; 239
  e4:	80 83       	st	Z, r24
  e6:	80 81       	ld	r24, Z
  e8:	88 60       	ori	r24, 0x08	; 8
  ea:	80 83       	st	Z, r24
  ec:	e0 e8       	ldi	r30, 0x80	; 128
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	8d 7f       	andi	r24, 0xFD	; 253
  f4:	80 83       	st	Z, r24
  f6:	80 81       	ld	r24, Z
  f8:	8e 7f       	andi	r24, 0xFE	; 254
  fa:	80 83       	st	Z, r24
  fc:	80 81       	ld	r24, Z
  fe:	8f 77       	andi	r24, 0x7F	; 127
 100:	80 83       	st	Z, r24
 102:	80 81       	ld	r24, Z
 104:	80 64       	ori	r24, 0x40	; 64
 106:	80 83       	st	Z, r24
 108:	ef e6       	ldi	r30, 0x6F	; 111
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	82 60       	ori	r24, 0x02	; 2
 110:	80 83       	st	Z, r24
 112:	08 95       	ret

00000114 <prescaler_activated>:
 114:	e1 e8       	ldi	r30, 0x81	; 129
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	8b 7f       	andi	r24, 0xFB	; 251
 11c:	80 83       	st	Z, r24
 11e:	80 81       	ld	r24, Z
 120:	82 60       	ori	r24, 0x02	; 2
 122:	80 83       	st	Z, r24
 124:	80 81       	ld	r24, Z
 126:	8e 7f       	andi	r24, 0xFE	; 254
 128:	80 83       	st	Z, r24
 12a:	08 95       	ret

0000012c <RPM2Counter>:
 12c:	40 91 2c 01 	lds	r20, 0x012C	; 0x80012c <step_factor>
 130:	50 91 2d 01 	lds	r21, 0x012D	; 0x80012d <step_factor+0x1>
 134:	84 9f       	mul	r24, r20
 136:	90 01       	movw	r18, r0
 138:	85 9f       	mul	r24, r21
 13a:	30 0d       	add	r19, r0
 13c:	94 9f       	mul	r25, r20
 13e:	30 0d       	add	r19, r0
 140:	11 24       	eor	r1, r1
 142:	a9 e8       	ldi	r26, 0x89	; 137
 144:	b8 e8       	ldi	r27, 0x88	; 136
 146:	0e 94 90 06 	call	0xd20	; 0xd20 <__umulhisi3>
 14a:	96 95       	lsr	r25
 14c:	87 95       	ror	r24
 14e:	92 95       	swap	r25
 150:	82 95       	swap	r24
 152:	8f 70       	andi	r24, 0x0F	; 15
 154:	89 27       	eor	r24, r25
 156:	9f 70       	andi	r25, 0x0F	; 15
 158:	89 27       	eor	r24, r25
 15a:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <frequency+0x1>
 15e:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <frequency>
 162:	9c 01       	movw	r18, r24
 164:	40 e0       	ldi	r20, 0x00	; 0
 166:	50 e0       	ldi	r21, 0x00	; 0
 168:	60 e4       	ldi	r22, 0x40	; 64
 16a:	72 e4       	ldi	r23, 0x42	; 66
 16c:	8f e0       	ldi	r24, 0x0F	; 15
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 71 06 	call	0xce2	; 0xce2 <__divmodsi4>
 174:	c9 01       	movw	r24, r18
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <counter+0x1>
 17c:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <counter>
 180:	08 95       	ret

00000182 <Microstepping>:
 182:	82 30       	cpi	r24, 0x02	; 2
 184:	c9 f1       	breq	.+114    	; 0x1f8 <Microstepping+0x76>
 186:	28 f4       	brcc	.+10     	; 0x192 <Microstepping+0x10>
 188:	88 23       	and	r24, r24
 18a:	51 f0       	breq	.+20     	; 0x1a0 <Microstepping+0x1e>
 18c:	81 30       	cpi	r24, 0x01	; 1
 18e:	f1 f0       	breq	.+60     	; 0x1cc <Microstepping+0x4a>
 190:	08 95       	ret
 192:	83 30       	cpi	r24, 0x03	; 3
 194:	09 f4       	brne	.+2      	; 0x198 <Microstepping+0x16>
 196:	46 c0       	rjmp	.+140    	; 0x224 <Microstepping+0xa2>
 198:	84 30       	cpi	r24, 0x04	; 4
 19a:	09 f4       	brne	.+2      	; 0x19e <Microstepping+0x1c>
 19c:	59 c0       	rjmp	.+178    	; 0x250 <Microstepping+0xce>
 19e:	08 95       	ret
 1a0:	85 b1       	in	r24, 0x05	; 5
 1a2:	8e 7f       	andi	r24, 0xFE	; 254
 1a4:	85 b9       	out	0x05, r24	; 5
 1a6:	8b b1       	in	r24, 0x0b	; 11
 1a8:	8f 77       	andi	r24, 0x7F	; 127
 1aa:	8b b9       	out	0x0b, r24	; 11
 1ac:	8b b1       	in	r24, 0x0b	; 11
 1ae:	8f 7b       	andi	r24, 0xBF	; 191
 1b0:	8b b9       	out	0x0b, r24	; 11
 1b2:	88 ec       	ldi	r24, 0xC8	; 200
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <step_factor+0x1>
 1ba:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <step_factor>
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <microstep_factor+0x1>
 1c6:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <microstep_factor>
 1ca:	08 95       	ret
 1cc:	85 b1       	in	r24, 0x05	; 5
 1ce:	81 60       	ori	r24, 0x01	; 1
 1d0:	85 b9       	out	0x05, r24	; 5
 1d2:	8b b1       	in	r24, 0x0b	; 11
 1d4:	8f 77       	andi	r24, 0x7F	; 127
 1d6:	8b b9       	out	0x0b, r24	; 11
 1d8:	8b b1       	in	r24, 0x0b	; 11
 1da:	8f 7b       	andi	r24, 0xBF	; 191
 1dc:	8b b9       	out	0x0b, r24	; 11
 1de:	80 e9       	ldi	r24, 0x90	; 144
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <step_factor+0x1>
 1e6:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <step_factor>
 1ea:	82 e0       	ldi	r24, 0x02	; 2
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <microstep_factor+0x1>
 1f2:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <microstep_factor>
 1f6:	08 95       	ret
 1f8:	85 b1       	in	r24, 0x05	; 5
 1fa:	8e 7f       	andi	r24, 0xFE	; 254
 1fc:	85 b9       	out	0x05, r24	; 5
 1fe:	8b b1       	in	r24, 0x0b	; 11
 200:	80 68       	ori	r24, 0x80	; 128
 202:	8b b9       	out	0x0b, r24	; 11
 204:	8b b1       	in	r24, 0x0b	; 11
 206:	8f 7b       	andi	r24, 0xBF	; 191
 208:	8b b9       	out	0x0b, r24	; 11
 20a:	80 e2       	ldi	r24, 0x20	; 32
 20c:	93 e0       	ldi	r25, 0x03	; 3
 20e:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <step_factor+0x1>
 212:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <step_factor>
 216:	84 e0       	ldi	r24, 0x04	; 4
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <microstep_factor+0x1>
 21e:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <microstep_factor>
 222:	08 95       	ret
 224:	85 b1       	in	r24, 0x05	; 5
 226:	81 60       	ori	r24, 0x01	; 1
 228:	85 b9       	out	0x05, r24	; 5
 22a:	8b b1       	in	r24, 0x0b	; 11
 22c:	80 68       	ori	r24, 0x80	; 128
 22e:	8b b9       	out	0x0b, r24	; 11
 230:	8b b1       	in	r24, 0x0b	; 11
 232:	8f 7b       	andi	r24, 0xBF	; 191
 234:	8b b9       	out	0x0b, r24	; 11
 236:	80 e4       	ldi	r24, 0x40	; 64
 238:	96 e0       	ldi	r25, 0x06	; 6
 23a:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <step_factor+0x1>
 23e:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <step_factor>
 242:	88 e0       	ldi	r24, 0x08	; 8
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <microstep_factor+0x1>
 24a:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <microstep_factor>
 24e:	08 95       	ret
 250:	85 b1       	in	r24, 0x05	; 5
 252:	81 60       	ori	r24, 0x01	; 1
 254:	85 b9       	out	0x05, r24	; 5
 256:	8b b1       	in	r24, 0x0b	; 11
 258:	80 68       	ori	r24, 0x80	; 128
 25a:	8b b9       	out	0x0b, r24	; 11
 25c:	8b b1       	in	r24, 0x0b	; 11
 25e:	80 64       	ori	r24, 0x40	; 64
 260:	8b b9       	out	0x0b, r24	; 11
 262:	80 e8       	ldi	r24, 0x80	; 128
 264:	9c e0       	ldi	r25, 0x0C	; 12
 266:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <step_factor+0x1>
 26a:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <step_factor>
 26e:	80 e1       	ldi	r24, 0x10	; 16
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <microstep_factor+0x1>
 276:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <microstep_factor>
 27a:	08 95       	ret

0000027c <Anticlockwise>:
 27c:	8b b1       	in	r24, 0x0b	; 11
 27e:	88 60       	ori	r24, 0x08	; 8
 280:	8b b9       	out	0x0b, r24	; 11
 282:	08 95       	ret

00000284 <stop_motor>:
 284:	e1 e8       	ldi	r30, 0x81	; 129
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	80 81       	ld	r24, Z
 28a:	8b 7f       	andi	r24, 0xFB	; 251
 28c:	80 83       	st	Z, r24
 28e:	80 81       	ld	r24, Z
 290:	8d 7f       	andi	r24, 0xFD	; 253
 292:	80 83       	st	Z, r24
 294:	80 81       	ld	r24, Z
 296:	8e 7f       	andi	r24, 0xFE	; 254
 298:	80 83       	st	Z, r24
 29a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 29e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 2a2:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <type_movement>
 2a6:	08 95       	ret

000002a8 <set_motor>:
 2a8:	0f 93       	push	r16
 2aa:	1f 93       	push	r17
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
 2b0:	ec 01       	movw	r28, r24
 2b2:	8b 01       	movw	r16, r22
 2b4:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
 2b8:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <__data_end+0x1>
 2bc:	89 2b       	or	r24, r25
 2be:	d1 f7       	brne	.-12     	; 0x2b4 <set_motor+0xc>
 2c0:	0e 94 8a 00 	call	0x114	; 0x114 <prescaler_activated>
 2c4:	ce 01       	movw	r24, r28
 2c6:	0e 94 96 00 	call	0x12c	; 0x12c <RPM2Counter>
 2ca:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <max_counter+0x1>
 2ce:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <max_counter>
 2d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2d6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2da:	0e 94 96 00 	call	0x12c	; 0x12c <RPM2Counter>
 2de:	fc 01       	movw	r30, r24
 2e0:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <min_counter+0x1>
 2e4:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <min_counter>
 2e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2ec:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2f0:	8c 17       	cp	r24, r28
 2f2:	9d 07       	cpc	r25, r29
 2f4:	e0 f5       	brcc	.+120    	; 0x36e <set_motor+0xc6>
 2f6:	d0 93 2b 01 	sts	0x012B, r29	; 0x80012b <_nextrpm+0x1>
 2fa:	c0 93 2a 01 	sts	0x012A, r28	; 0x80012a <_nextrpm>
 2fe:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <step_factor>
 302:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <step_factor+0x1>
 306:	c8 9f       	mul	r28, r24
 308:	90 01       	movw	r18, r0
 30a:	c9 9f       	mul	r28, r25
 30c:	30 0d       	add	r19, r0
 30e:	d8 9f       	mul	r29, r24
 310:	30 0d       	add	r19, r0
 312:	11 24       	eor	r1, r1
 314:	a9 e8       	ldi	r26, 0x89	; 137
 316:	b8 e8       	ldi	r27, 0x88	; 136
 318:	0e 94 90 06 	call	0xd20	; 0xd20 <__umulhisi3>
 31c:	ac 01       	movw	r20, r24
 31e:	56 95       	lsr	r21
 320:	47 95       	ror	r20
 322:	52 95       	swap	r21
 324:	42 95       	swap	r20
 326:	4f 70       	andi	r20, 0x0F	; 15
 328:	45 27       	eor	r20, r21
 32a:	5f 70       	andi	r21, 0x0F	; 15
 32c:	45 27       	eor	r20, r21
 32e:	20 91 3b 01 	lds	r18, 0x013B	; 0x80013b <max_counter>
 332:	30 91 3c 01 	lds	r19, 0x013C	; 0x80013c <max_counter+0x1>
 336:	cf 01       	movw	r24, r30
 338:	82 1b       	sub	r24, r18
 33a:	93 0b       	sbc	r25, r19
 33c:	40 9f       	mul	r20, r16
 33e:	b0 01       	movw	r22, r0
 340:	41 9f       	mul	r20, r17
 342:	70 0d       	add	r23, r0
 344:	50 9f       	mul	r21, r16
 346:	70 0d       	add	r23, r0
 348:	11 24       	eor	r1, r1
 34a:	0e 94 5d 06 	call	0xcba	; 0xcba <__udivmodhi4>
 34e:	70 93 38 01 	sts	0x0138, r23	; 0x800138 <delta_counter+0x1>
 352:	60 93 37 01 	sts	0x0137, r22	; 0x800137 <delta_counter>
 356:	30 93 25 01 	sts	0x0125, r19	; 0x800125 <target_counter+0x1>
 35a:	20 93 24 01 	sts	0x0124, r18	; 0x800124 <target_counter>
 35e:	f0 93 89 00 	sts	0x0089, r31	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 362:	e0 93 88 00 	sts	0x0088, r30	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <type_movement>
 36c:	3b c0       	rjmp	.+118    	; 0x3e4 <set_motor+0x13c>
 36e:	d0 93 2b 01 	sts	0x012B, r29	; 0x80012b <_nextrpm+0x1>
 372:	c0 93 2a 01 	sts	0x012A, r28	; 0x80012a <_nextrpm>
 376:	40 91 2c 01 	lds	r20, 0x012C	; 0x80012c <step_factor>
 37a:	50 91 2d 01 	lds	r21, 0x012D	; 0x80012d <step_factor+0x1>
 37e:	84 9f       	mul	r24, r20
 380:	90 01       	movw	r18, r0
 382:	85 9f       	mul	r24, r21
 384:	30 0d       	add	r19, r0
 386:	94 9f       	mul	r25, r20
 388:	30 0d       	add	r19, r0
 38a:	11 24       	eor	r1, r1
 38c:	a9 e8       	ldi	r26, 0x89	; 137
 38e:	b8 e8       	ldi	r27, 0x88	; 136
 390:	0e 94 90 06 	call	0xd20	; 0xd20 <__umulhisi3>
 394:	ac 01       	movw	r20, r24
 396:	56 95       	lsr	r21
 398:	47 95       	ror	r20
 39a:	52 95       	swap	r21
 39c:	42 95       	swap	r20
 39e:	4f 70       	andi	r20, 0x0F	; 15
 3a0:	45 27       	eor	r20, r21
 3a2:	5f 70       	andi	r21, 0x0F	; 15
 3a4:	45 27       	eor	r20, r21
 3a6:	20 91 3b 01 	lds	r18, 0x013B	; 0x80013b <max_counter>
 3aa:	30 91 3c 01 	lds	r19, 0x013C	; 0x80013c <max_counter+0x1>
 3ae:	c9 01       	movw	r24, r18
 3b0:	8e 1b       	sub	r24, r30
 3b2:	9f 0b       	sbc	r25, r31
 3b4:	04 9f       	mul	r16, r20
 3b6:	b0 01       	movw	r22, r0
 3b8:	05 9f       	mul	r16, r21
 3ba:	70 0d       	add	r23, r0
 3bc:	14 9f       	mul	r17, r20
 3be:	70 0d       	add	r23, r0
 3c0:	11 24       	eor	r1, r1
 3c2:	0e 94 5d 06 	call	0xcba	; 0xcba <__udivmodhi4>
 3c6:	70 93 38 01 	sts	0x0138, r23	; 0x800138 <delta_counter+0x1>
 3ca:	60 93 37 01 	sts	0x0137, r22	; 0x800137 <delta_counter>
 3ce:	30 93 25 01 	sts	0x0125, r19	; 0x800125 <target_counter+0x1>
 3d2:	20 93 24 01 	sts	0x0124, r18	; 0x800124 <target_counter>
 3d6:	f0 93 89 00 	sts	0x0089, r31	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 3da:	e0 93 88 00 	sts	0x0088, r30	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 3de:	82 e0       	ldi	r24, 0x02	; 2
 3e0:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <type_movement>
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <__data_end+0x1>
 3ec:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end>
 3f0:	df 91       	pop	r29
 3f2:	cf 91       	pop	r28
 3f4:	1f 91       	pop	r17
 3f6:	0f 91       	pop	r16
 3f8:	08 95       	ret

000003fa <read_speed>:
 3fa:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 3fe:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 402:	2f 5f       	subi	r18, 0xFF	; 255
 404:	3f 4f       	sbci	r19, 0xFF	; 255
 406:	22 95       	swap	r18
 408:	32 95       	swap	r19
 40a:	30 7f       	andi	r19, 0xF0	; 240
 40c:	32 27       	eor	r19, r18
 40e:	20 7f       	andi	r18, 0xF0	; 240
 410:	32 27       	eor	r19, r18
 412:	40 e0       	ldi	r20, 0x00	; 0
 414:	50 e0       	ldi	r21, 0x00	; 0
 416:	60 e0       	ldi	r22, 0x00	; 0
 418:	74 e2       	ldi	r23, 0x24	; 36
 41a:	84 ef       	ldi	r24, 0xF4	; 244
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	0e 94 71 06 	call	0xce2	; 0xce2 <__divmodsi4>
 422:	6c e3       	ldi	r22, 0x3C	; 60
 424:	62 9f       	mul	r22, r18
 426:	c0 01       	movw	r24, r0
 428:	63 9f       	mul	r22, r19
 42a:	90 0d       	add	r25, r0
 42c:	11 24       	eor	r1, r1
 42e:	60 91 2c 01 	lds	r22, 0x012C	; 0x80012c <step_factor>
 432:	70 91 2d 01 	lds	r23, 0x012D	; 0x80012d <step_factor+0x1>
 436:	0e 94 5d 06 	call	0xcba	; 0xcba <__udivmodhi4>
 43a:	cb 01       	movw	r24, r22
 43c:	08 95       	ret

0000043e <__vector_11>:
}

//---------------------------------
//			INT. FUNCTIONS
//---------------------------------
ISR(TIMER1_COMPA_vect){
 43e:	1f 92       	push	r1
 440:	0f 92       	push	r0
 442:	0f b6       	in	r0, 0x3f	; 63
 444:	0f 92       	push	r0
 446:	11 24       	eor	r1, r1
 448:	2f 93       	push	r18
 44a:	3f 93       	push	r19
 44c:	4f 93       	push	r20
 44e:	5f 93       	push	r21
 450:	6f 93       	push	r22
 452:	7f 93       	push	r23
 454:	8f 93       	push	r24
 456:	9f 93       	push	r25
 458:	af 93       	push	r26
 45a:	bf 93       	push	r27
 45c:	ef 93       	push	r30
 45e:	ff 93       	push	r31
	if (ramping_activate)
 460:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
 464:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <__data_end+0x1>
 468:	89 2b       	or	r24, r25
 46a:	09 f4       	brne	.+2      	; 0x46e <__vector_11+0x30>
 46c:	77 c0       	rjmp	.+238    	; 0x55c <__vector_11+0x11e>
	{
		if (type_movement==1)
 46e:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <type_movement>
 472:	81 30       	cpi	r24, 0x01	; 1
 474:	c9 f5       	brne	.+114    	; 0x4e8 <__vector_11+0xaa>
		{
			if (min_counter>target_counter)
 476:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <min_counter>
 47a:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <min_counter+0x1>
 47e:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <target_counter>
 482:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <target_counter+0x1>
 486:	28 17       	cp	r18, r24
 488:	39 07       	cpc	r19, r25
 48a:	28 f5       	brcc	.+74     	; 0x4d6 <__vector_11+0x98>
			{
				min_counter -= delta_counter;
 48c:	20 91 37 01 	lds	r18, 0x0137	; 0x800137 <delta_counter>
 490:	30 91 38 01 	lds	r19, 0x0138	; 0x800138 <delta_counter+0x1>
 494:	82 1b       	sub	r24, r18
 496:	93 0b       	sbc	r25, r19
 498:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <min_counter+0x1>
 49c:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <min_counter>
				if (min_counter<target_counter)
 4a0:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <target_counter>
 4a4:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <target_counter+0x1>
 4a8:	82 17       	cp	r24, r18
 4aa:	93 07       	cpc	r25, r19
 4ac:	a0 f4       	brcc	.+40     	; 0x4d6 <__vector_11+0x98>
				{
					min_counter = target_counter;
 4ae:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <target_counter>
 4b2:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <target_counter+0x1>
 4b6:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <min_counter+0x1>
 4ba:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <min_counter>
					previous_rpm = _nextrpm;
 4be:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <_nextrpm>
 4c2:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <_nextrpm+0x1>
 4c6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 4ca:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
					ramping_activate = 0;
 4ce:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <__data_end+0x1>
 4d2:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <__data_end>
				}
			}
			OCR1A = min_counter;
 4d6:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <min_counter>
 4da:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <min_counter+0x1>
 4de:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 4e2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 4e6:	3a c0       	rjmp	.+116    	; 0x55c <__vector_11+0x11e>
		}else if (type_movement==2)
 4e8:	82 30       	cpi	r24, 0x02	; 2
 4ea:	c1 f5       	brne	.+112    	; 0x55c <__vector_11+0x11e>
		{
			if (min_counter<target_counter)
 4ec:	20 91 33 01 	lds	r18, 0x0133	; 0x800133 <min_counter>
 4f0:	30 91 34 01 	lds	r19, 0x0134	; 0x800134 <min_counter+0x1>
 4f4:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <target_counter>
 4f8:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <target_counter+0x1>
 4fc:	28 17       	cp	r18, r24
 4fe:	39 07       	cpc	r19, r25
 500:	28 f5       	brcc	.+74     	; 0x54c <__vector_11+0x10e>
			{
				min_counter += delta_counter;
 502:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <delta_counter>
 506:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <delta_counter+0x1>
 50a:	82 0f       	add	r24, r18
 50c:	93 1f       	adc	r25, r19
 50e:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <min_counter+0x1>
 512:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <min_counter>
				if (min_counter>target_counter)
 516:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <target_counter>
 51a:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <target_counter+0x1>
 51e:	28 17       	cp	r18, r24
 520:	39 07       	cpc	r19, r25
 522:	a0 f4       	brcc	.+40     	; 0x54c <__vector_11+0x10e>
				{
					min_counter = target_counter;
 524:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <target_counter>
 528:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <target_counter+0x1>
 52c:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <min_counter+0x1>
 530:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <min_counter>
					previous_rpm = _nextrpm;
 534:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <_nextrpm>
 538:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <_nextrpm+0x1>
 53c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 540:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
					ramping_activate = 0;
 544:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <__data_end+0x1>
 548:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <__data_end>
				}
			}
			OCR1A = min_counter;
 54c:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <min_counter>
 550:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <min_counter+0x1>
 554:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 558:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		}
	}
	if (type_movement == 3 && step_flag) {
 55c:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <type_movement>
 560:	83 30       	cpi	r24, 0x03	; 3
 562:	e1 f4       	brne	.+56     	; 0x59c <__vector_11+0x15e>
 564:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <step_flag>
 568:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <step_flag+0x1>
 56c:	89 2b       	or	r24, r25
 56e:	b1 f0       	breq	.+44     	; 0x59c <__vector_11+0x15e>
		step_count++;
 570:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <step_count>
 574:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <step_count+0x1>
 578:	01 96       	adiw	r24, 0x01	; 1
 57a:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <step_count+0x1>
 57e:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <step_count>
		if (step_count >= steps_needed) {
 582:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <steps_needed>
 586:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <steps_needed+0x1>
 58a:	82 17       	cp	r24, r18
 58c:	93 07       	cpc	r25, r19
 58e:	30 f0       	brcs	.+12     	; 0x59c <__vector_11+0x15e>
			step_flag = 0; // Disable stepping to prevent further increments
 590:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <step_flag+0x1>
 594:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <step_flag>
			stop_motor(); // Stop motor within ISR once target steps are reached
 598:	0e 94 42 01 	call	0x284	; 0x284 <stop_motor>
		}
	}
}
 59c:	ff 91       	pop	r31
 59e:	ef 91       	pop	r30
 5a0:	bf 91       	pop	r27
 5a2:	af 91       	pop	r26
 5a4:	9f 91       	pop	r25
 5a6:	8f 91       	pop	r24
 5a8:	7f 91       	pop	r23
 5aa:	6f 91       	pop	r22
 5ac:	5f 91       	pop	r21
 5ae:	4f 91       	pop	r20
 5b0:	3f 91       	pop	r19
 5b2:	2f 91       	pop	r18
 5b4:	0f 90       	pop	r0
 5b6:	0f be       	out	0x3f, r0	; 63
 5b8:	0f 90       	pop	r0
 5ba:	1f 90       	pop	r1
 5bc:	18 95       	reti

000005be <init_ADC>:
//-----------------------------
//      USER's FUNCTIONS
//-----------------------------
uint16_t set_origin(void){
	return ADC2angle();
}
 5be:	ec e7       	ldi	r30, 0x7C	; 124
 5c0:	f0 e0       	ldi	r31, 0x00	; 0
 5c2:	80 81       	ld	r24, Z
 5c4:	8f 77       	andi	r24, 0x7F	; 127
 5c6:	80 83       	st	Z, r24
 5c8:	80 81       	ld	r24, Z
 5ca:	80 64       	ori	r24, 0x40	; 64
 5cc:	80 83       	st	Z, r24
 5ce:	80 81       	ld	r24, Z
 5d0:	8f 7d       	andi	r24, 0xDF	; 223
 5d2:	80 83       	st	Z, r24
 5d4:	ea e7       	ldi	r30, 0x7A	; 122
 5d6:	f0 e0       	ldi	r31, 0x00	; 0
 5d8:	80 81       	ld	r24, Z
 5da:	81 60       	ori	r24, 0x01	; 1
 5dc:	80 83       	st	Z, r24
 5de:	80 81       	ld	r24, Z
 5e0:	82 60       	ori	r24, 0x02	; 2
 5e2:	80 83       	st	Z, r24
 5e4:	80 81       	ld	r24, Z
 5e6:	84 60       	ori	r24, 0x04	; 4
 5e8:	80 83       	st	Z, r24
 5ea:	80 81       	ld	r24, Z
 5ec:	80 68       	ori	r24, 0x80	; 128
 5ee:	80 83       	st	Z, r24
 5f0:	8a b1       	in	r24, 0x0a	; 10
 5f2:	84 60       	ori	r24, 0x04	; 4
 5f4:	8a b9       	out	0x0a, r24	; 10
 5f6:	8b b1       	in	r24, 0x0b	; 11
 5f8:	84 60       	ori	r24, 0x04	; 4
 5fa:	8b b9       	out	0x0b, r24	; 11
 5fc:	08 95       	ret

000005fe <ADC_read>:
 5fe:	8f 70       	andi	r24, 0x0F	; 15
 600:	ec e7       	ldi	r30, 0x7C	; 124
 602:	f0 e0       	ldi	r31, 0x00	; 0
 604:	90 81       	ld	r25, Z
 606:	90 7f       	andi	r25, 0xF0	; 240
 608:	89 2b       	or	r24, r25
 60a:	80 83       	st	Z, r24
 60c:	ea e7       	ldi	r30, 0x7A	; 122
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	80 81       	ld	r24, Z
 612:	80 64       	ori	r24, 0x40	; 64
 614:	80 83       	st	Z, r24
 616:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 61a:	86 fd       	sbrc	r24, 6
 61c:	fc cf       	rjmp	.-8      	; 0x616 <ADC_read+0x18>
 61e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 622:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 626:	08 95       	ret

00000628 <ADC2angle>:
 628:	80 e0       	ldi	r24, 0x00	; 0
 62a:	0e 94 ff 02 	call	0x5fe	; 0x5fe <ADC_read>
 62e:	bc 01       	movw	r22, r24
 630:	80 e0       	ldi	r24, 0x00	; 0
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	0e 94 62 05 	call	0xac4	; 0xac4 <__floatunsisf>
 638:	20 e0       	ldi	r18, 0x00	; 0
 63a:	30 e0       	ldi	r19, 0x00	; 0
 63c:	44 eb       	ldi	r20, 0xB4	; 180
 63e:	53 e4       	ldi	r21, 0x43	; 67
 640:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__mulsf3>
 644:	20 e0       	ldi	r18, 0x00	; 0
 646:	30 ec       	ldi	r19, 0xC0	; 192
 648:	4f e7       	ldi	r20, 0x7F	; 127
 64a:	54 e4       	ldi	r21, 0x44	; 68
 64c:	0e 94 ba 04 	call	0x974	; 0x974 <__divsf3>
 650:	0e 94 33 05 	call	0xa66	; 0xa66 <__fixunssfsi>
 654:	cb 01       	movw	r24, r22
 656:	08 95       	ret

00000658 <read_angle>:

uint16_t read_angle(void){
	uint16_t actual_angle = ADC2angle();
 658:	0e 94 14 03 	call	0x628	; 0x628 <ADC2angle>
 65c:	bc 01       	movw	r22, r24

	if (new_zero == 0) {
 65e:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <new_zero>
 662:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <new_zero+0x1>
 666:	00 97       	sbiw	r24, 0x00	; 0
 668:	b1 f0       	breq	.+44     	; 0x696 <read_angle+0x3e>
		return actual_angle;
	} else {
		// Calculate adjusted angle relative to new_zero
		int16_t adjusted_angle = actual_angle - new_zero;
 66a:	68 1b       	sub	r22, r24
 66c:	79 0b       	sbc	r23, r25
 66e:	9b 01       	movw	r18, r22

		// Normalize angle within 0 to 360 degrees
		if (adjusted_angle < 0) {
 670:	7a f4       	brpl	.+30     	; 0x690 <read_angle+0x38>
			adjusted_angle += full_circle_degree;
 672:	07 2e       	mov	r0, r23
 674:	00 0c       	add	r0, r0
 676:	88 0b       	sbc	r24, r24
 678:	99 0b       	sbc	r25, r25
 67a:	0e 94 64 05 	call	0xac8	; 0xac8 <__floatsisf>
 67e:	20 e0       	ldi	r18, 0x00	; 0
 680:	30 e0       	ldi	r19, 0x00	; 0
 682:	44 eb       	ldi	r20, 0xB4	; 180
 684:	53 e4       	ldi	r21, 0x43	; 67
 686:	0e 94 4e 04 	call	0x89c	; 0x89c <__addsf3>
 68a:	0e 94 2c 05 	call	0xa58	; 0xa58 <__fixsfsi>
 68e:	9b 01       	movw	r18, r22
		}
		return (uint16_t)adjusted_angle;
 690:	82 2f       	mov	r24, r18
 692:	93 2f       	mov	r25, r19
 694:	08 95       	ret

uint16_t read_angle(void){
	uint16_t actual_angle = ADC2angle();

	if (new_zero == 0) {
		return actual_angle;
 696:	86 2f       	mov	r24, r22
 698:	97 2f       	mov	r25, r23
		if (adjusted_angle < 0) {
			adjusted_angle += full_circle_degree;
		}
		return (uint16_t)adjusted_angle;
	}
}
 69a:	08 95       	ret

0000069c <read_current>:

uint16_t read_current(void){
	uint16_t current = ADC_read(1);
 69c:	81 e0       	ldi	r24, 0x01	; 1
 69e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <ADC_read>
	return((current*max_voltage)/adc_resolution);
 6a2:	bc 01       	movw	r22, r24
 6a4:	80 e0       	ldi	r24, 0x00	; 0
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	0e 94 62 05 	call	0xac4	; 0xac4 <__floatunsisf>
 6ac:	20 e0       	ldi	r18, 0x00	; 0
 6ae:	30 e0       	ldi	r19, 0x00	; 0
 6b0:	40 ea       	ldi	r20, 0xA0	; 160
 6b2:	50 e4       	ldi	r21, 0x40	; 64
 6b4:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__mulsf3>
 6b8:	20 e0       	ldi	r18, 0x00	; 0
 6ba:	30 ec       	ldi	r19, 0xC0	; 192
 6bc:	4f e7       	ldi	r20, 0x7F	; 127
 6be:	54 e4       	ldi	r21, 0x44	; 68
 6c0:	0e 94 ba 04 	call	0x974	; 0x974 <__divsf3>
 6c4:	0e 94 33 05 	call	0xa66	; 0xa66 <__fixunssfsi>
 6c8:	cb 01       	movw	r24, r22
 6ca:	08 95       	ret

000006cc <UART_init>:
// MACROS INTERNAS DE LIBRERIA <avr/sfr_defs.h> -- SOLO Lectura de bits
// #define bit_is_set(sfr, bit) (_SFR_BYTE(sfr) & _BV(bit))
// #define bit_is_clear(sfr, bit) (!(_SFR_BYTE(sfr) & _BV(bit)))

void UART_init(unsigned int baud) {
	unsigned int ubrr = F_CPU/16/baud-1;
 6cc:	9c 01       	movw	r18, r24
 6ce:	40 e0       	ldi	r20, 0x00	; 0
 6d0:	50 e0       	ldi	r21, 0x00	; 0
 6d2:	60 e4       	ldi	r22, 0x40	; 64
 6d4:	72 e4       	ldi	r23, 0x42	; 66
 6d6:	8f e0       	ldi	r24, 0x0F	; 15
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	0e 94 71 06 	call	0xce2	; 0xce2 <__divmodsi4>
 6de:	21 50       	subi	r18, 0x01	; 1
 6e0:	31 09       	sbc	r19, r1
	UBRR0H = (unsigned char)(ubrr>>8);
 6e2:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 6e6:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);  // Enable receiver and transmitter
 6ea:	88 e1       	ldi	r24, 0x18	; 24
 6ec:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00); // Set frame: 8 data bits, 1 stop bit
 6f0:	86 e0       	ldi	r24, 0x06	; 6
 6f2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 6f6:	08 95       	ret

000006f8 <UART_transmit>:
}

void UART_transmit(unsigned char data) {
	while (!(UCSR0A & (1<<UDRE0)));  // Wait for empty transmit buffer
 6f8:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 6fc:	95 ff       	sbrs	r25, 5
 6fe:	fc cf       	rjmp	.-8      	; 0x6f8 <UART_transmit>
	UDR0 = data;                     // Put data into buffer, sends the data
 700:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 704:	08 95       	ret

00000706 <UART_printString>:
}

void UART_printString(const char* str) {
 706:	cf 93       	push	r28
 708:	df 93       	push	r29
 70a:	ec 01       	movw	r28, r24
	while (*str) {
 70c:	03 c0       	rjmp	.+6      	; 0x714 <UART_printString+0xe>
		UART_transmit(*str++);
 70e:	21 96       	adiw	r28, 0x01	; 1
 710:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <UART_transmit>
	while (!(UCSR0A & (1<<UDRE0)));  // Wait for empty transmit buffer
	UDR0 = data;                     // Put data into buffer, sends the data
}

void UART_printString(const char* str) {
	while (*str) {
 714:	88 81       	ld	r24, Y
 716:	81 11       	cpse	r24, r1
 718:	fa cf       	rjmp	.-12     	; 0x70e <UART_printString+0x8>
		UART_transmit(*str++);
	}
}
 71a:	df 91       	pop	r29
 71c:	cf 91       	pop	r28
 71e:	08 95       	ret

00000720 <main>:
float dato_adc;
float dato_angle;
float dato_speed;
int main(void)
{
	UART_init(9600);
 720:	80 e8       	ldi	r24, 0x80	; 128
 722:	95 e2       	ldi	r25, 0x25	; 37
 724:	0e 94 66 03 	call	0x6cc	; 0x6cc <UART_init>
	init_ADC();
 728:	0e 94 df 02 	call	0x5be	; 0x5be <init_ADC>
	init_A4988();
 72c:	0e 94 53 00 	call	0xa6	; 0xa6 <init_A4988>
	
	int BANDERA = 1;
	sei();
 730:	78 94       	sei
{
	UART_init(9600);
	init_ADC();
	init_A4988();
	
	int BANDERA = 1;
 732:	c1 e0       	ldi	r28, 0x01	; 1
 734:	d0 e0       	ldi	r29, 0x00	; 0
	sei();
    /* Replace with your application code */
    while (1) 
    {
		if (BANDERA)
 736:	20 97       	sbiw	r28, 0x00	; 0
 738:	b1 f0       	breq	.+44     	; 0x766 <main+0x46>
		{
			//Clockwise();
			Anticlockwise();
 73a:	0e 94 3e 01 	call	0x27c	; 0x27c <Anticlockwise>
			Microstepping(FULL_STEP);
 73e:	80 e0       	ldi	r24, 0x00	; 0
 740:	0e 94 c1 00 	call	0x182	; 0x182 <Microstepping>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 744:	2f ef       	ldi	r18, 0xFF	; 255
 746:	83 e2       	ldi	r24, 0x23	; 35
 748:	94 ef       	ldi	r25, 0xF4	; 244
 74a:	21 50       	subi	r18, 0x01	; 1
 74c:	80 40       	sbci	r24, 0x00	; 0
 74e:	90 40       	sbci	r25, 0x00	; 0
 750:	e1 f7       	brne	.-8      	; 0x74a <main+0x2a>
 752:	00 c0       	rjmp	.+0      	; 0x754 <main+0x34>
 754:	00 00       	nop
			//set_origin();
			_delay_ms(5000);
			//dato_move2angle = move2angle(10, 200);
			set_motor(20, 5);
 756:	65 e0       	ldi	r22, 0x05	; 5
 758:	70 e0       	ldi	r23, 0x00	; 0
 75a:	84 e1       	ldi	r24, 0x14	; 20
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <set_motor>
			//set_motor(10, 5);
			//move2angle(6, 45);
			//stop_motor();
			BANDERA=0;
 762:	c0 e0       	ldi	r28, 0x00	; 0
 764:	d0 e0       	ldi	r29, 0x00	; 0
		}
		dato_angle = read_angle();
 766:	0e 94 2c 03 	call	0x658	; 0x658 <read_angle>
 76a:	bc 01       	movw	r22, r24
 76c:	80 e0       	ldi	r24, 0x00	; 0
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	0e 94 62 05 	call	0xac4	; 0xac4 <__floatunsisf>
 774:	60 93 3f 01 	sts	0x013F, r22	; 0x80013f <dato_angle>
 778:	70 93 40 01 	sts	0x0140, r23	; 0x800140 <dato_angle+0x1>
 77c:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <dato_angle+0x2>
 780:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <dato_angle+0x3>
		dato_adc = read_current();
 784:	0e 94 4e 03 	call	0x69c	; 0x69c <read_current>
 788:	bc 01       	movw	r22, r24
 78a:	80 e0       	ldi	r24, 0x00	; 0
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	0e 94 62 05 	call	0xac4	; 0xac4 <__floatunsisf>
 792:	60 93 43 01 	sts	0x0143, r22	; 0x800143 <dato_adc>
 796:	70 93 44 01 	sts	0x0144, r23	; 0x800144 <dato_adc+0x1>
 79a:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <dato_adc+0x2>
 79e:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <dato_adc+0x3>
		dato_speed = read_speed();
 7a2:	0e 94 fd 01 	call	0x3fa	; 0x3fa <read_speed>
 7a6:	bc 01       	movw	r22, r24
 7a8:	80 e0       	ldi	r24, 0x00	; 0
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	0e 94 62 05 	call	0xac4	; 0xac4 <__floatunsisf>
 7b0:	60 93 51 01 	sts	0x0151, r22	; 0x800151 <dato_speed>
 7b4:	70 93 52 01 	sts	0x0152, r23	; 0x800152 <dato_speed+0x1>
 7b8:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <dato_speed+0x2>
 7bc:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <dato_speed+0x3>
		itoa(dato_angle, str, 10);	
 7c0:	60 91 3f 01 	lds	r22, 0x013F	; 0x80013f <dato_angle>
 7c4:	70 91 40 01 	lds	r23, 0x0140	; 0x800140 <dato_angle+0x1>
 7c8:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <dato_angle+0x2>
 7cc:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <dato_angle+0x3>
 7d0:	0e 94 2c 05 	call	0xa58	; 0xa58 <__fixsfsi>
 7d4:	dc 01       	movw	r26, r24
 7d6:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 7d8:	4a e0       	ldi	r20, 0x0A	; 10
 7da:	67 e4       	ldi	r22, 0x47	; 71
 7dc:	71 e0       	ldi	r23, 0x01	; 1
 7de:	0e 94 c1 06 	call	0xd82	; 0xd82 <__itoa_ncheck>
		UART_printString("Angle:");	
 7e2:	82 e0       	ldi	r24, 0x02	; 2
 7e4:	91 e0       	ldi	r25, 0x01	; 1
 7e6:	0e 94 83 03 	call	0x706	; 0x706 <UART_printString>
		UART_printString(str);  // Send a string
 7ea:	87 e4       	ldi	r24, 0x47	; 71
 7ec:	91 e0       	ldi	r25, 0x01	; 1
 7ee:	0e 94 83 03 	call	0x706	; 0x706 <UART_printString>
		UART_printString("\r\n");
 7f2:	89 e0       	ldi	r24, 0x09	; 9
 7f4:	91 e0       	ldi	r25, 0x01	; 1
 7f6:	0e 94 83 03 	call	0x706	; 0x706 <UART_printString>
 7fa:	8f e3       	ldi	r24, 0x3F	; 63
 7fc:	9c e9       	ldi	r25, 0x9C	; 156
 7fe:	01 97       	sbiw	r24, 0x01	; 1
 800:	f1 f7       	brne	.-4      	; 0x7fe <main+0xde>
 802:	00 c0       	rjmp	.+0      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 804:	00 00       	nop
		_delay_ms(10);  // Delay for a second
		UART_printString("Corriente:");
 806:	8c e0       	ldi	r24, 0x0C	; 12
 808:	91 e0       	ldi	r25, 0x01	; 1
 80a:	0e 94 83 03 	call	0x706	; 0x706 <UART_printString>
		itoa(dato_adc, str, 10);
 80e:	60 91 43 01 	lds	r22, 0x0143	; 0x800143 <dato_adc>
 812:	70 91 44 01 	lds	r23, 0x0144	; 0x800144 <dato_adc+0x1>
 816:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <dato_adc+0x2>
 81a:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <dato_adc+0x3>
 81e:	0e 94 2c 05 	call	0xa58	; 0xa58 <__fixsfsi>
 822:	dc 01       	movw	r26, r24
 824:	cb 01       	movw	r24, r22
 826:	4a e0       	ldi	r20, 0x0A	; 10
 828:	67 e4       	ldi	r22, 0x47	; 71
 82a:	71 e0       	ldi	r23, 0x01	; 1
 82c:	0e 94 c1 06 	call	0xd82	; 0xd82 <__itoa_ncheck>
		UART_printString(str);  // Send a string
 830:	87 e4       	ldi	r24, 0x47	; 71
 832:	91 e0       	ldi	r25, 0x01	; 1
 834:	0e 94 83 03 	call	0x706	; 0x706 <UART_printString>
		UART_printString("\r\n");
 838:	89 e0       	ldi	r24, 0x09	; 9
 83a:	91 e0       	ldi	r25, 0x01	; 1
 83c:	0e 94 83 03 	call	0x706	; 0x706 <UART_printString>
 840:	8f e3       	ldi	r24, 0x3F	; 63
 842:	9c e9       	ldi	r25, 0x9C	; 156
 844:	01 97       	sbiw	r24, 0x01	; 1
 846:	f1 f7       	brne	.-4      	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 848:	00 c0       	rjmp	.+0      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 84a:	00 00       	nop
		_delay_ms(10);  // Delay for a secod
		UART_printString("Velocidad:");
 84c:	87 e1       	ldi	r24, 0x17	; 23
 84e:	91 e0       	ldi	r25, 0x01	; 1
 850:	0e 94 83 03 	call	0x706	; 0x706 <UART_printString>
		itoa(dato_speed, str, 10);
 854:	60 91 51 01 	lds	r22, 0x0151	; 0x800151 <dato_speed>
 858:	70 91 52 01 	lds	r23, 0x0152	; 0x800152 <dato_speed+0x1>
 85c:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <dato_speed+0x2>
 860:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <dato_speed+0x3>
 864:	0e 94 2c 05 	call	0xa58	; 0xa58 <__fixsfsi>
 868:	dc 01       	movw	r26, r24
 86a:	cb 01       	movw	r24, r22
 86c:	4a e0       	ldi	r20, 0x0A	; 10
 86e:	67 e4       	ldi	r22, 0x47	; 71
 870:	71 e0       	ldi	r23, 0x01	; 1
 872:	0e 94 c1 06 	call	0xd82	; 0xd82 <__itoa_ncheck>
		UART_printString(str);  // Send a string
 876:	87 e4       	ldi	r24, 0x47	; 71
 878:	91 e0       	ldi	r25, 0x01	; 1
 87a:	0e 94 83 03 	call	0x706	; 0x706 <UART_printString>
		UART_printString("\r\n");
 87e:	89 e0       	ldi	r24, 0x09	; 9
 880:	91 e0       	ldi	r25, 0x01	; 1
 882:	0e 94 83 03 	call	0x706	; 0x706 <UART_printString>
 886:	9f ef       	ldi	r25, 0xFF	; 255
 888:	23 ed       	ldi	r18, 0xD3	; 211
 88a:	80 e3       	ldi	r24, 0x30	; 48
 88c:	91 50       	subi	r25, 0x01	; 1
 88e:	20 40       	sbci	r18, 0x00	; 0
 890:	80 40       	sbci	r24, 0x00	; 0
 892:	e1 f7       	brne	.-8      	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
 894:	00 c0       	rjmp	.+0      	; 0x896 <__DATA_REGION_LENGTH__+0x96>
 896:	00 00       	nop
 898:	4e cf       	rjmp	.-356    	; 0x736 <main+0x16>

0000089a <__subsf3>:
 89a:	50 58       	subi	r21, 0x80	; 128

0000089c <__addsf3>:
 89c:	bb 27       	eor	r27, r27
 89e:	aa 27       	eor	r26, r26
 8a0:	0e 94 65 04 	call	0x8ca	; 0x8ca <__addsf3x>
 8a4:	0c 94 b6 05 	jmp	0xb6c	; 0xb6c <__fp_round>
 8a8:	0e 94 a8 05 	call	0xb50	; 0xb50 <__fp_pscA>
 8ac:	38 f0       	brcs	.+14     	; 0x8bc <__addsf3+0x20>
 8ae:	0e 94 af 05 	call	0xb5e	; 0xb5e <__fp_pscB>
 8b2:	20 f0       	brcs	.+8      	; 0x8bc <__addsf3+0x20>
 8b4:	39 f4       	brne	.+14     	; 0x8c4 <__addsf3+0x28>
 8b6:	9f 3f       	cpi	r25, 0xFF	; 255
 8b8:	19 f4       	brne	.+6      	; 0x8c0 <__addsf3+0x24>
 8ba:	26 f4       	brtc	.+8      	; 0x8c4 <__addsf3+0x28>
 8bc:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__fp_nan>
 8c0:	0e f4       	brtc	.+2      	; 0x8c4 <__addsf3+0x28>
 8c2:	e0 95       	com	r30
 8c4:	e7 fb       	bst	r30, 7
 8c6:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__fp_inf>

000008ca <__addsf3x>:
 8ca:	e9 2f       	mov	r30, r25
 8cc:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__fp_split3>
 8d0:	58 f3       	brcs	.-42     	; 0x8a8 <__addsf3+0xc>
 8d2:	ba 17       	cp	r27, r26
 8d4:	62 07       	cpc	r22, r18
 8d6:	73 07       	cpc	r23, r19
 8d8:	84 07       	cpc	r24, r20
 8da:	95 07       	cpc	r25, r21
 8dc:	20 f0       	brcs	.+8      	; 0x8e6 <__addsf3x+0x1c>
 8de:	79 f4       	brne	.+30     	; 0x8fe <__addsf3x+0x34>
 8e0:	a6 f5       	brtc	.+104    	; 0x94a <__stack+0x4b>
 8e2:	0c 94 e9 05 	jmp	0xbd2	; 0xbd2 <__fp_zero>
 8e6:	0e f4       	brtc	.+2      	; 0x8ea <__addsf3x+0x20>
 8e8:	e0 95       	com	r30
 8ea:	0b 2e       	mov	r0, r27
 8ec:	ba 2f       	mov	r27, r26
 8ee:	a0 2d       	mov	r26, r0
 8f0:	0b 01       	movw	r0, r22
 8f2:	b9 01       	movw	r22, r18
 8f4:	90 01       	movw	r18, r0
 8f6:	0c 01       	movw	r0, r24
 8f8:	ca 01       	movw	r24, r20
 8fa:	a0 01       	movw	r20, r0
 8fc:	11 24       	eor	r1, r1
 8fe:	ff 27       	eor	r31, r31
 900:	59 1b       	sub	r21, r25
 902:	99 f0       	breq	.+38     	; 0x92a <__stack+0x2b>
 904:	59 3f       	cpi	r21, 0xF9	; 249
 906:	50 f4       	brcc	.+20     	; 0x91c <__stack+0x1d>
 908:	50 3e       	cpi	r21, 0xE0	; 224
 90a:	68 f1       	brcs	.+90     	; 0x966 <__stack+0x67>
 90c:	1a 16       	cp	r1, r26
 90e:	f0 40       	sbci	r31, 0x00	; 0
 910:	a2 2f       	mov	r26, r18
 912:	23 2f       	mov	r18, r19
 914:	34 2f       	mov	r19, r20
 916:	44 27       	eor	r20, r20
 918:	58 5f       	subi	r21, 0xF8	; 248
 91a:	f3 cf       	rjmp	.-26     	; 0x902 <__stack+0x3>
 91c:	46 95       	lsr	r20
 91e:	37 95       	ror	r19
 920:	27 95       	ror	r18
 922:	a7 95       	ror	r26
 924:	f0 40       	sbci	r31, 0x00	; 0
 926:	53 95       	inc	r21
 928:	c9 f7       	brne	.-14     	; 0x91c <__stack+0x1d>
 92a:	7e f4       	brtc	.+30     	; 0x94a <__stack+0x4b>
 92c:	1f 16       	cp	r1, r31
 92e:	ba 0b       	sbc	r27, r26
 930:	62 0b       	sbc	r22, r18
 932:	73 0b       	sbc	r23, r19
 934:	84 0b       	sbc	r24, r20
 936:	ba f0       	brmi	.+46     	; 0x966 <__stack+0x67>
 938:	91 50       	subi	r25, 0x01	; 1
 93a:	a1 f0       	breq	.+40     	; 0x964 <__stack+0x65>
 93c:	ff 0f       	add	r31, r31
 93e:	bb 1f       	adc	r27, r27
 940:	66 1f       	adc	r22, r22
 942:	77 1f       	adc	r23, r23
 944:	88 1f       	adc	r24, r24
 946:	c2 f7       	brpl	.-16     	; 0x938 <__stack+0x39>
 948:	0e c0       	rjmp	.+28     	; 0x966 <__stack+0x67>
 94a:	ba 0f       	add	r27, r26
 94c:	62 1f       	adc	r22, r18
 94e:	73 1f       	adc	r23, r19
 950:	84 1f       	adc	r24, r20
 952:	48 f4       	brcc	.+18     	; 0x966 <__stack+0x67>
 954:	87 95       	ror	r24
 956:	77 95       	ror	r23
 958:	67 95       	ror	r22
 95a:	b7 95       	ror	r27
 95c:	f7 95       	ror	r31
 95e:	9e 3f       	cpi	r25, 0xFE	; 254
 960:	08 f0       	brcs	.+2      	; 0x964 <__stack+0x65>
 962:	b0 cf       	rjmp	.-160    	; 0x8c4 <__addsf3+0x28>
 964:	93 95       	inc	r25
 966:	88 0f       	add	r24, r24
 968:	08 f0       	brcs	.+2      	; 0x96c <__stack+0x6d>
 96a:	99 27       	eor	r25, r25
 96c:	ee 0f       	add	r30, r30
 96e:	97 95       	ror	r25
 970:	87 95       	ror	r24
 972:	08 95       	ret

00000974 <__divsf3>:
 974:	0e 94 ce 04 	call	0x99c	; 0x99c <__divsf3x>
 978:	0c 94 b6 05 	jmp	0xb6c	; 0xb6c <__fp_round>
 97c:	0e 94 af 05 	call	0xb5e	; 0xb5e <__fp_pscB>
 980:	58 f0       	brcs	.+22     	; 0x998 <__divsf3+0x24>
 982:	0e 94 a8 05 	call	0xb50	; 0xb50 <__fp_pscA>
 986:	40 f0       	brcs	.+16     	; 0x998 <__divsf3+0x24>
 988:	29 f4       	brne	.+10     	; 0x994 <__divsf3+0x20>
 98a:	5f 3f       	cpi	r21, 0xFF	; 255
 98c:	29 f0       	breq	.+10     	; 0x998 <__divsf3+0x24>
 98e:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__fp_inf>
 992:	51 11       	cpse	r21, r1
 994:	0c 94 ea 05 	jmp	0xbd4	; 0xbd4 <__fp_szero>
 998:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__fp_nan>

0000099c <__divsf3x>:
 99c:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__fp_split3>
 9a0:	68 f3       	brcs	.-38     	; 0x97c <__divsf3+0x8>

000009a2 <__divsf3_pse>:
 9a2:	99 23       	and	r25, r25
 9a4:	b1 f3       	breq	.-20     	; 0x992 <__divsf3+0x1e>
 9a6:	55 23       	and	r21, r21
 9a8:	91 f3       	breq	.-28     	; 0x98e <__divsf3+0x1a>
 9aa:	95 1b       	sub	r25, r21
 9ac:	55 0b       	sbc	r21, r21
 9ae:	bb 27       	eor	r27, r27
 9b0:	aa 27       	eor	r26, r26
 9b2:	62 17       	cp	r22, r18
 9b4:	73 07       	cpc	r23, r19
 9b6:	84 07       	cpc	r24, r20
 9b8:	38 f0       	brcs	.+14     	; 0x9c8 <__divsf3_pse+0x26>
 9ba:	9f 5f       	subi	r25, 0xFF	; 255
 9bc:	5f 4f       	sbci	r21, 0xFF	; 255
 9be:	22 0f       	add	r18, r18
 9c0:	33 1f       	adc	r19, r19
 9c2:	44 1f       	adc	r20, r20
 9c4:	aa 1f       	adc	r26, r26
 9c6:	a9 f3       	breq	.-22     	; 0x9b2 <__divsf3_pse+0x10>
 9c8:	35 d0       	rcall	.+106    	; 0xa34 <__divsf3_pse+0x92>
 9ca:	0e 2e       	mov	r0, r30
 9cc:	3a f0       	brmi	.+14     	; 0x9dc <__divsf3_pse+0x3a>
 9ce:	e0 e8       	ldi	r30, 0x80	; 128
 9d0:	32 d0       	rcall	.+100    	; 0xa36 <__divsf3_pse+0x94>
 9d2:	91 50       	subi	r25, 0x01	; 1
 9d4:	50 40       	sbci	r21, 0x00	; 0
 9d6:	e6 95       	lsr	r30
 9d8:	00 1c       	adc	r0, r0
 9da:	ca f7       	brpl	.-14     	; 0x9ce <__divsf3_pse+0x2c>
 9dc:	2b d0       	rcall	.+86     	; 0xa34 <__divsf3_pse+0x92>
 9de:	fe 2f       	mov	r31, r30
 9e0:	29 d0       	rcall	.+82     	; 0xa34 <__divsf3_pse+0x92>
 9e2:	66 0f       	add	r22, r22
 9e4:	77 1f       	adc	r23, r23
 9e6:	88 1f       	adc	r24, r24
 9e8:	bb 1f       	adc	r27, r27
 9ea:	26 17       	cp	r18, r22
 9ec:	37 07       	cpc	r19, r23
 9ee:	48 07       	cpc	r20, r24
 9f0:	ab 07       	cpc	r26, r27
 9f2:	b0 e8       	ldi	r27, 0x80	; 128
 9f4:	09 f0       	breq	.+2      	; 0x9f8 <__divsf3_pse+0x56>
 9f6:	bb 0b       	sbc	r27, r27
 9f8:	80 2d       	mov	r24, r0
 9fa:	bf 01       	movw	r22, r30
 9fc:	ff 27       	eor	r31, r31
 9fe:	93 58       	subi	r25, 0x83	; 131
 a00:	5f 4f       	sbci	r21, 0xFF	; 255
 a02:	3a f0       	brmi	.+14     	; 0xa12 <__divsf3_pse+0x70>
 a04:	9e 3f       	cpi	r25, 0xFE	; 254
 a06:	51 05       	cpc	r21, r1
 a08:	78 f0       	brcs	.+30     	; 0xa28 <__divsf3_pse+0x86>
 a0a:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__fp_inf>
 a0e:	0c 94 ea 05 	jmp	0xbd4	; 0xbd4 <__fp_szero>
 a12:	5f 3f       	cpi	r21, 0xFF	; 255
 a14:	e4 f3       	brlt	.-8      	; 0xa0e <__divsf3_pse+0x6c>
 a16:	98 3e       	cpi	r25, 0xE8	; 232
 a18:	d4 f3       	brlt	.-12     	; 0xa0e <__divsf3_pse+0x6c>
 a1a:	86 95       	lsr	r24
 a1c:	77 95       	ror	r23
 a1e:	67 95       	ror	r22
 a20:	b7 95       	ror	r27
 a22:	f7 95       	ror	r31
 a24:	9f 5f       	subi	r25, 0xFF	; 255
 a26:	c9 f7       	brne	.-14     	; 0xa1a <__divsf3_pse+0x78>
 a28:	88 0f       	add	r24, r24
 a2a:	91 1d       	adc	r25, r1
 a2c:	96 95       	lsr	r25
 a2e:	87 95       	ror	r24
 a30:	97 f9       	bld	r25, 7
 a32:	08 95       	ret
 a34:	e1 e0       	ldi	r30, 0x01	; 1
 a36:	66 0f       	add	r22, r22
 a38:	77 1f       	adc	r23, r23
 a3a:	88 1f       	adc	r24, r24
 a3c:	bb 1f       	adc	r27, r27
 a3e:	62 17       	cp	r22, r18
 a40:	73 07       	cpc	r23, r19
 a42:	84 07       	cpc	r24, r20
 a44:	ba 07       	cpc	r27, r26
 a46:	20 f0       	brcs	.+8      	; 0xa50 <__divsf3_pse+0xae>
 a48:	62 1b       	sub	r22, r18
 a4a:	73 0b       	sbc	r23, r19
 a4c:	84 0b       	sbc	r24, r20
 a4e:	ba 0b       	sbc	r27, r26
 a50:	ee 1f       	adc	r30, r30
 a52:	88 f7       	brcc	.-30     	; 0xa36 <__divsf3_pse+0x94>
 a54:	e0 95       	com	r30
 a56:	08 95       	ret

00000a58 <__fixsfsi>:
 a58:	0e 94 33 05 	call	0xa66	; 0xa66 <__fixunssfsi>
 a5c:	68 94       	set
 a5e:	b1 11       	cpse	r27, r1
 a60:	0c 94 ea 05 	jmp	0xbd4	; 0xbd4 <__fp_szero>
 a64:	08 95       	ret

00000a66 <__fixunssfsi>:
 a66:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fp_splitA>
 a6a:	88 f0       	brcs	.+34     	; 0xa8e <__fixunssfsi+0x28>
 a6c:	9f 57       	subi	r25, 0x7F	; 127
 a6e:	98 f0       	brcs	.+38     	; 0xa96 <__fixunssfsi+0x30>
 a70:	b9 2f       	mov	r27, r25
 a72:	99 27       	eor	r25, r25
 a74:	b7 51       	subi	r27, 0x17	; 23
 a76:	b0 f0       	brcs	.+44     	; 0xaa4 <__fixunssfsi+0x3e>
 a78:	e1 f0       	breq	.+56     	; 0xab2 <__fixunssfsi+0x4c>
 a7a:	66 0f       	add	r22, r22
 a7c:	77 1f       	adc	r23, r23
 a7e:	88 1f       	adc	r24, r24
 a80:	99 1f       	adc	r25, r25
 a82:	1a f0       	brmi	.+6      	; 0xa8a <__fixunssfsi+0x24>
 a84:	ba 95       	dec	r27
 a86:	c9 f7       	brne	.-14     	; 0xa7a <__fixunssfsi+0x14>
 a88:	14 c0       	rjmp	.+40     	; 0xab2 <__fixunssfsi+0x4c>
 a8a:	b1 30       	cpi	r27, 0x01	; 1
 a8c:	91 f0       	breq	.+36     	; 0xab2 <__fixunssfsi+0x4c>
 a8e:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <__fp_zero>
 a92:	b1 e0       	ldi	r27, 0x01	; 1
 a94:	08 95       	ret
 a96:	0c 94 e9 05 	jmp	0xbd2	; 0xbd2 <__fp_zero>
 a9a:	67 2f       	mov	r22, r23
 a9c:	78 2f       	mov	r23, r24
 a9e:	88 27       	eor	r24, r24
 aa0:	b8 5f       	subi	r27, 0xF8	; 248
 aa2:	39 f0       	breq	.+14     	; 0xab2 <__fixunssfsi+0x4c>
 aa4:	b9 3f       	cpi	r27, 0xF9	; 249
 aa6:	cc f3       	brlt	.-14     	; 0xa9a <__fixunssfsi+0x34>
 aa8:	86 95       	lsr	r24
 aaa:	77 95       	ror	r23
 aac:	67 95       	ror	r22
 aae:	b3 95       	inc	r27
 ab0:	d9 f7       	brne	.-10     	; 0xaa8 <__fixunssfsi+0x42>
 ab2:	3e f4       	brtc	.+14     	; 0xac2 <__fixunssfsi+0x5c>
 ab4:	90 95       	com	r25
 ab6:	80 95       	com	r24
 ab8:	70 95       	com	r23
 aba:	61 95       	neg	r22
 abc:	7f 4f       	sbci	r23, 0xFF	; 255
 abe:	8f 4f       	sbci	r24, 0xFF	; 255
 ac0:	9f 4f       	sbci	r25, 0xFF	; 255
 ac2:	08 95       	ret

00000ac4 <__floatunsisf>:
 ac4:	e8 94       	clt
 ac6:	09 c0       	rjmp	.+18     	; 0xada <__floatsisf+0x12>

00000ac8 <__floatsisf>:
 ac8:	97 fb       	bst	r25, 7
 aca:	3e f4       	brtc	.+14     	; 0xada <__floatsisf+0x12>
 acc:	90 95       	com	r25
 ace:	80 95       	com	r24
 ad0:	70 95       	com	r23
 ad2:	61 95       	neg	r22
 ad4:	7f 4f       	sbci	r23, 0xFF	; 255
 ad6:	8f 4f       	sbci	r24, 0xFF	; 255
 ad8:	9f 4f       	sbci	r25, 0xFF	; 255
 ada:	99 23       	and	r25, r25
 adc:	a9 f0       	breq	.+42     	; 0xb08 <__floatsisf+0x40>
 ade:	f9 2f       	mov	r31, r25
 ae0:	96 e9       	ldi	r25, 0x96	; 150
 ae2:	bb 27       	eor	r27, r27
 ae4:	93 95       	inc	r25
 ae6:	f6 95       	lsr	r31
 ae8:	87 95       	ror	r24
 aea:	77 95       	ror	r23
 aec:	67 95       	ror	r22
 aee:	b7 95       	ror	r27
 af0:	f1 11       	cpse	r31, r1
 af2:	f8 cf       	rjmp	.-16     	; 0xae4 <__floatsisf+0x1c>
 af4:	fa f4       	brpl	.+62     	; 0xb34 <__floatsisf+0x6c>
 af6:	bb 0f       	add	r27, r27
 af8:	11 f4       	brne	.+4      	; 0xafe <__floatsisf+0x36>
 afa:	60 ff       	sbrs	r22, 0
 afc:	1b c0       	rjmp	.+54     	; 0xb34 <__floatsisf+0x6c>
 afe:	6f 5f       	subi	r22, 0xFF	; 255
 b00:	7f 4f       	sbci	r23, 0xFF	; 255
 b02:	8f 4f       	sbci	r24, 0xFF	; 255
 b04:	9f 4f       	sbci	r25, 0xFF	; 255
 b06:	16 c0       	rjmp	.+44     	; 0xb34 <__floatsisf+0x6c>
 b08:	88 23       	and	r24, r24
 b0a:	11 f0       	breq	.+4      	; 0xb10 <__floatsisf+0x48>
 b0c:	96 e9       	ldi	r25, 0x96	; 150
 b0e:	11 c0       	rjmp	.+34     	; 0xb32 <__floatsisf+0x6a>
 b10:	77 23       	and	r23, r23
 b12:	21 f0       	breq	.+8      	; 0xb1c <__floatsisf+0x54>
 b14:	9e e8       	ldi	r25, 0x8E	; 142
 b16:	87 2f       	mov	r24, r23
 b18:	76 2f       	mov	r23, r22
 b1a:	05 c0       	rjmp	.+10     	; 0xb26 <__floatsisf+0x5e>
 b1c:	66 23       	and	r22, r22
 b1e:	71 f0       	breq	.+28     	; 0xb3c <__floatsisf+0x74>
 b20:	96 e8       	ldi	r25, 0x86	; 134
 b22:	86 2f       	mov	r24, r22
 b24:	70 e0       	ldi	r23, 0x00	; 0
 b26:	60 e0       	ldi	r22, 0x00	; 0
 b28:	2a f0       	brmi	.+10     	; 0xb34 <__floatsisf+0x6c>
 b2a:	9a 95       	dec	r25
 b2c:	66 0f       	add	r22, r22
 b2e:	77 1f       	adc	r23, r23
 b30:	88 1f       	adc	r24, r24
 b32:	da f7       	brpl	.-10     	; 0xb2a <__floatsisf+0x62>
 b34:	88 0f       	add	r24, r24
 b36:	96 95       	lsr	r25
 b38:	87 95       	ror	r24
 b3a:	97 f9       	bld	r25, 7
 b3c:	08 95       	ret

00000b3e <__fp_inf>:
 b3e:	97 f9       	bld	r25, 7
 b40:	9f 67       	ori	r25, 0x7F	; 127
 b42:	80 e8       	ldi	r24, 0x80	; 128
 b44:	70 e0       	ldi	r23, 0x00	; 0
 b46:	60 e0       	ldi	r22, 0x00	; 0
 b48:	08 95       	ret

00000b4a <__fp_nan>:
 b4a:	9f ef       	ldi	r25, 0xFF	; 255
 b4c:	80 ec       	ldi	r24, 0xC0	; 192
 b4e:	08 95       	ret

00000b50 <__fp_pscA>:
 b50:	00 24       	eor	r0, r0
 b52:	0a 94       	dec	r0
 b54:	16 16       	cp	r1, r22
 b56:	17 06       	cpc	r1, r23
 b58:	18 06       	cpc	r1, r24
 b5a:	09 06       	cpc	r0, r25
 b5c:	08 95       	ret

00000b5e <__fp_pscB>:
 b5e:	00 24       	eor	r0, r0
 b60:	0a 94       	dec	r0
 b62:	12 16       	cp	r1, r18
 b64:	13 06       	cpc	r1, r19
 b66:	14 06       	cpc	r1, r20
 b68:	05 06       	cpc	r0, r21
 b6a:	08 95       	ret

00000b6c <__fp_round>:
 b6c:	09 2e       	mov	r0, r25
 b6e:	03 94       	inc	r0
 b70:	00 0c       	add	r0, r0
 b72:	11 f4       	brne	.+4      	; 0xb78 <__fp_round+0xc>
 b74:	88 23       	and	r24, r24
 b76:	52 f0       	brmi	.+20     	; 0xb8c <__fp_round+0x20>
 b78:	bb 0f       	add	r27, r27
 b7a:	40 f4       	brcc	.+16     	; 0xb8c <__fp_round+0x20>
 b7c:	bf 2b       	or	r27, r31
 b7e:	11 f4       	brne	.+4      	; 0xb84 <__fp_round+0x18>
 b80:	60 ff       	sbrs	r22, 0
 b82:	04 c0       	rjmp	.+8      	; 0xb8c <__fp_round+0x20>
 b84:	6f 5f       	subi	r22, 0xFF	; 255
 b86:	7f 4f       	sbci	r23, 0xFF	; 255
 b88:	8f 4f       	sbci	r24, 0xFF	; 255
 b8a:	9f 4f       	sbci	r25, 0xFF	; 255
 b8c:	08 95       	ret

00000b8e <__fp_split3>:
 b8e:	57 fd       	sbrc	r21, 7
 b90:	90 58       	subi	r25, 0x80	; 128
 b92:	44 0f       	add	r20, r20
 b94:	55 1f       	adc	r21, r21
 b96:	59 f0       	breq	.+22     	; 0xbae <__fp_splitA+0x10>
 b98:	5f 3f       	cpi	r21, 0xFF	; 255
 b9a:	71 f0       	breq	.+28     	; 0xbb8 <__fp_splitA+0x1a>
 b9c:	47 95       	ror	r20

00000b9e <__fp_splitA>:
 b9e:	88 0f       	add	r24, r24
 ba0:	97 fb       	bst	r25, 7
 ba2:	99 1f       	adc	r25, r25
 ba4:	61 f0       	breq	.+24     	; 0xbbe <__fp_splitA+0x20>
 ba6:	9f 3f       	cpi	r25, 0xFF	; 255
 ba8:	79 f0       	breq	.+30     	; 0xbc8 <__fp_splitA+0x2a>
 baa:	87 95       	ror	r24
 bac:	08 95       	ret
 bae:	12 16       	cp	r1, r18
 bb0:	13 06       	cpc	r1, r19
 bb2:	14 06       	cpc	r1, r20
 bb4:	55 1f       	adc	r21, r21
 bb6:	f2 cf       	rjmp	.-28     	; 0xb9c <__fp_split3+0xe>
 bb8:	46 95       	lsr	r20
 bba:	f1 df       	rcall	.-30     	; 0xb9e <__fp_splitA>
 bbc:	08 c0       	rjmp	.+16     	; 0xbce <__fp_splitA+0x30>
 bbe:	16 16       	cp	r1, r22
 bc0:	17 06       	cpc	r1, r23
 bc2:	18 06       	cpc	r1, r24
 bc4:	99 1f       	adc	r25, r25
 bc6:	f1 cf       	rjmp	.-30     	; 0xbaa <__fp_splitA+0xc>
 bc8:	86 95       	lsr	r24
 bca:	71 05       	cpc	r23, r1
 bcc:	61 05       	cpc	r22, r1
 bce:	08 94       	sec
 bd0:	08 95       	ret

00000bd2 <__fp_zero>:
 bd2:	e8 94       	clt

00000bd4 <__fp_szero>:
 bd4:	bb 27       	eor	r27, r27
 bd6:	66 27       	eor	r22, r22
 bd8:	77 27       	eor	r23, r23
 bda:	cb 01       	movw	r24, r22
 bdc:	97 f9       	bld	r25, 7
 bde:	08 95       	ret

00000be0 <__mulsf3>:
 be0:	0e 94 03 06 	call	0xc06	; 0xc06 <__mulsf3x>
 be4:	0c 94 b6 05 	jmp	0xb6c	; 0xb6c <__fp_round>
 be8:	0e 94 a8 05 	call	0xb50	; 0xb50 <__fp_pscA>
 bec:	38 f0       	brcs	.+14     	; 0xbfc <__mulsf3+0x1c>
 bee:	0e 94 af 05 	call	0xb5e	; 0xb5e <__fp_pscB>
 bf2:	20 f0       	brcs	.+8      	; 0xbfc <__mulsf3+0x1c>
 bf4:	95 23       	and	r25, r21
 bf6:	11 f0       	breq	.+4      	; 0xbfc <__mulsf3+0x1c>
 bf8:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__fp_inf>
 bfc:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__fp_nan>
 c00:	11 24       	eor	r1, r1
 c02:	0c 94 ea 05 	jmp	0xbd4	; 0xbd4 <__fp_szero>

00000c06 <__mulsf3x>:
 c06:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__fp_split3>
 c0a:	70 f3       	brcs	.-36     	; 0xbe8 <__mulsf3+0x8>

00000c0c <__mulsf3_pse>:
 c0c:	95 9f       	mul	r25, r21
 c0e:	c1 f3       	breq	.-16     	; 0xc00 <__mulsf3+0x20>
 c10:	95 0f       	add	r25, r21
 c12:	50 e0       	ldi	r21, 0x00	; 0
 c14:	55 1f       	adc	r21, r21
 c16:	62 9f       	mul	r22, r18
 c18:	f0 01       	movw	r30, r0
 c1a:	72 9f       	mul	r23, r18
 c1c:	bb 27       	eor	r27, r27
 c1e:	f0 0d       	add	r31, r0
 c20:	b1 1d       	adc	r27, r1
 c22:	63 9f       	mul	r22, r19
 c24:	aa 27       	eor	r26, r26
 c26:	f0 0d       	add	r31, r0
 c28:	b1 1d       	adc	r27, r1
 c2a:	aa 1f       	adc	r26, r26
 c2c:	64 9f       	mul	r22, r20
 c2e:	66 27       	eor	r22, r22
 c30:	b0 0d       	add	r27, r0
 c32:	a1 1d       	adc	r26, r1
 c34:	66 1f       	adc	r22, r22
 c36:	82 9f       	mul	r24, r18
 c38:	22 27       	eor	r18, r18
 c3a:	b0 0d       	add	r27, r0
 c3c:	a1 1d       	adc	r26, r1
 c3e:	62 1f       	adc	r22, r18
 c40:	73 9f       	mul	r23, r19
 c42:	b0 0d       	add	r27, r0
 c44:	a1 1d       	adc	r26, r1
 c46:	62 1f       	adc	r22, r18
 c48:	83 9f       	mul	r24, r19
 c4a:	a0 0d       	add	r26, r0
 c4c:	61 1d       	adc	r22, r1
 c4e:	22 1f       	adc	r18, r18
 c50:	74 9f       	mul	r23, r20
 c52:	33 27       	eor	r19, r19
 c54:	a0 0d       	add	r26, r0
 c56:	61 1d       	adc	r22, r1
 c58:	23 1f       	adc	r18, r19
 c5a:	84 9f       	mul	r24, r20
 c5c:	60 0d       	add	r22, r0
 c5e:	21 1d       	adc	r18, r1
 c60:	82 2f       	mov	r24, r18
 c62:	76 2f       	mov	r23, r22
 c64:	6a 2f       	mov	r22, r26
 c66:	11 24       	eor	r1, r1
 c68:	9f 57       	subi	r25, 0x7F	; 127
 c6a:	50 40       	sbci	r21, 0x00	; 0
 c6c:	9a f0       	brmi	.+38     	; 0xc94 <__mulsf3_pse+0x88>
 c6e:	f1 f0       	breq	.+60     	; 0xcac <__mulsf3_pse+0xa0>
 c70:	88 23       	and	r24, r24
 c72:	4a f0       	brmi	.+18     	; 0xc86 <__mulsf3_pse+0x7a>
 c74:	ee 0f       	add	r30, r30
 c76:	ff 1f       	adc	r31, r31
 c78:	bb 1f       	adc	r27, r27
 c7a:	66 1f       	adc	r22, r22
 c7c:	77 1f       	adc	r23, r23
 c7e:	88 1f       	adc	r24, r24
 c80:	91 50       	subi	r25, 0x01	; 1
 c82:	50 40       	sbci	r21, 0x00	; 0
 c84:	a9 f7       	brne	.-22     	; 0xc70 <__mulsf3_pse+0x64>
 c86:	9e 3f       	cpi	r25, 0xFE	; 254
 c88:	51 05       	cpc	r21, r1
 c8a:	80 f0       	brcs	.+32     	; 0xcac <__mulsf3_pse+0xa0>
 c8c:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__fp_inf>
 c90:	0c 94 ea 05 	jmp	0xbd4	; 0xbd4 <__fp_szero>
 c94:	5f 3f       	cpi	r21, 0xFF	; 255
 c96:	e4 f3       	brlt	.-8      	; 0xc90 <__mulsf3_pse+0x84>
 c98:	98 3e       	cpi	r25, 0xE8	; 232
 c9a:	d4 f3       	brlt	.-12     	; 0xc90 <__mulsf3_pse+0x84>
 c9c:	86 95       	lsr	r24
 c9e:	77 95       	ror	r23
 ca0:	67 95       	ror	r22
 ca2:	b7 95       	ror	r27
 ca4:	f7 95       	ror	r31
 ca6:	e7 95       	ror	r30
 ca8:	9f 5f       	subi	r25, 0xFF	; 255
 caa:	c1 f7       	brne	.-16     	; 0xc9c <__mulsf3_pse+0x90>
 cac:	fe 2b       	or	r31, r30
 cae:	88 0f       	add	r24, r24
 cb0:	91 1d       	adc	r25, r1
 cb2:	96 95       	lsr	r25
 cb4:	87 95       	ror	r24
 cb6:	97 f9       	bld	r25, 7
 cb8:	08 95       	ret

00000cba <__udivmodhi4>:
 cba:	aa 1b       	sub	r26, r26
 cbc:	bb 1b       	sub	r27, r27
 cbe:	51 e1       	ldi	r21, 0x11	; 17
 cc0:	07 c0       	rjmp	.+14     	; 0xcd0 <__udivmodhi4_ep>

00000cc2 <__udivmodhi4_loop>:
 cc2:	aa 1f       	adc	r26, r26
 cc4:	bb 1f       	adc	r27, r27
 cc6:	a6 17       	cp	r26, r22
 cc8:	b7 07       	cpc	r27, r23
 cca:	10 f0       	brcs	.+4      	; 0xcd0 <__udivmodhi4_ep>
 ccc:	a6 1b       	sub	r26, r22
 cce:	b7 0b       	sbc	r27, r23

00000cd0 <__udivmodhi4_ep>:
 cd0:	88 1f       	adc	r24, r24
 cd2:	99 1f       	adc	r25, r25
 cd4:	5a 95       	dec	r21
 cd6:	a9 f7       	brne	.-22     	; 0xcc2 <__udivmodhi4_loop>
 cd8:	80 95       	com	r24
 cda:	90 95       	com	r25
 cdc:	bc 01       	movw	r22, r24
 cde:	cd 01       	movw	r24, r26
 ce0:	08 95       	ret

00000ce2 <__divmodsi4>:
 ce2:	05 2e       	mov	r0, r21
 ce4:	97 fb       	bst	r25, 7
 ce6:	1e f4       	brtc	.+6      	; 0xcee <__divmodsi4+0xc>
 ce8:	00 94       	com	r0
 cea:	0e 94 88 06 	call	0xd10	; 0xd10 <__negsi2>
 cee:	57 fd       	sbrc	r21, 7
 cf0:	07 d0       	rcall	.+14     	; 0xd00 <__divmodsi4_neg2>
 cf2:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__udivmodsi4>
 cf6:	07 fc       	sbrc	r0, 7
 cf8:	03 d0       	rcall	.+6      	; 0xd00 <__divmodsi4_neg2>
 cfa:	4e f4       	brtc	.+18     	; 0xd0e <__divmodsi4_exit>
 cfc:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__negsi2>

00000d00 <__divmodsi4_neg2>:
 d00:	50 95       	com	r21
 d02:	40 95       	com	r20
 d04:	30 95       	com	r19
 d06:	21 95       	neg	r18
 d08:	3f 4f       	sbci	r19, 0xFF	; 255
 d0a:	4f 4f       	sbci	r20, 0xFF	; 255
 d0c:	5f 4f       	sbci	r21, 0xFF	; 255

00000d0e <__divmodsi4_exit>:
 d0e:	08 95       	ret

00000d10 <__negsi2>:
 d10:	90 95       	com	r25
 d12:	80 95       	com	r24
 d14:	70 95       	com	r23
 d16:	61 95       	neg	r22
 d18:	7f 4f       	sbci	r23, 0xFF	; 255
 d1a:	8f 4f       	sbci	r24, 0xFF	; 255
 d1c:	9f 4f       	sbci	r25, 0xFF	; 255
 d1e:	08 95       	ret

00000d20 <__umulhisi3>:
 d20:	a2 9f       	mul	r26, r18
 d22:	b0 01       	movw	r22, r0
 d24:	b3 9f       	mul	r27, r19
 d26:	c0 01       	movw	r24, r0
 d28:	a3 9f       	mul	r26, r19
 d2a:	70 0d       	add	r23, r0
 d2c:	81 1d       	adc	r24, r1
 d2e:	11 24       	eor	r1, r1
 d30:	91 1d       	adc	r25, r1
 d32:	b2 9f       	mul	r27, r18
 d34:	70 0d       	add	r23, r0
 d36:	81 1d       	adc	r24, r1
 d38:	11 24       	eor	r1, r1
 d3a:	91 1d       	adc	r25, r1
 d3c:	08 95       	ret

00000d3e <__udivmodsi4>:
 d3e:	a1 e2       	ldi	r26, 0x21	; 33
 d40:	1a 2e       	mov	r1, r26
 d42:	aa 1b       	sub	r26, r26
 d44:	bb 1b       	sub	r27, r27
 d46:	fd 01       	movw	r30, r26
 d48:	0d c0       	rjmp	.+26     	; 0xd64 <__udivmodsi4_ep>

00000d4a <__udivmodsi4_loop>:
 d4a:	aa 1f       	adc	r26, r26
 d4c:	bb 1f       	adc	r27, r27
 d4e:	ee 1f       	adc	r30, r30
 d50:	ff 1f       	adc	r31, r31
 d52:	a2 17       	cp	r26, r18
 d54:	b3 07       	cpc	r27, r19
 d56:	e4 07       	cpc	r30, r20
 d58:	f5 07       	cpc	r31, r21
 d5a:	20 f0       	brcs	.+8      	; 0xd64 <__udivmodsi4_ep>
 d5c:	a2 1b       	sub	r26, r18
 d5e:	b3 0b       	sbc	r27, r19
 d60:	e4 0b       	sbc	r30, r20
 d62:	f5 0b       	sbc	r31, r21

00000d64 <__udivmodsi4_ep>:
 d64:	66 1f       	adc	r22, r22
 d66:	77 1f       	adc	r23, r23
 d68:	88 1f       	adc	r24, r24
 d6a:	99 1f       	adc	r25, r25
 d6c:	1a 94       	dec	r1
 d6e:	69 f7       	brne	.-38     	; 0xd4a <__udivmodsi4_loop>
 d70:	60 95       	com	r22
 d72:	70 95       	com	r23
 d74:	80 95       	com	r24
 d76:	90 95       	com	r25
 d78:	9b 01       	movw	r18, r22
 d7a:	ac 01       	movw	r20, r24
 d7c:	bd 01       	movw	r22, r26
 d7e:	cf 01       	movw	r24, r30
 d80:	08 95       	ret

00000d82 <__itoa_ncheck>:
 d82:	bb 27       	eor	r27, r27
 d84:	4a 30       	cpi	r20, 0x0A	; 10
 d86:	31 f4       	brne	.+12     	; 0xd94 <__itoa_ncheck+0x12>
 d88:	99 23       	and	r25, r25
 d8a:	22 f4       	brpl	.+8      	; 0xd94 <__itoa_ncheck+0x12>
 d8c:	bd e2       	ldi	r27, 0x2D	; 45
 d8e:	90 95       	com	r25
 d90:	81 95       	neg	r24
 d92:	9f 4f       	sbci	r25, 0xFF	; 255
 d94:	0c 94 cd 06 	jmp	0xd9a	; 0xd9a <__utoa_common>

00000d98 <__utoa_ncheck>:
 d98:	bb 27       	eor	r27, r27

00000d9a <__utoa_common>:
 d9a:	fb 01       	movw	r30, r22
 d9c:	55 27       	eor	r21, r21
 d9e:	aa 27       	eor	r26, r26
 da0:	88 0f       	add	r24, r24
 da2:	99 1f       	adc	r25, r25
 da4:	aa 1f       	adc	r26, r26
 da6:	a4 17       	cp	r26, r20
 da8:	10 f0       	brcs	.+4      	; 0xdae <__utoa_common+0x14>
 daa:	a4 1b       	sub	r26, r20
 dac:	83 95       	inc	r24
 dae:	50 51       	subi	r21, 0x10	; 16
 db0:	b9 f7       	brne	.-18     	; 0xda0 <__utoa_common+0x6>
 db2:	a0 5d       	subi	r26, 0xD0	; 208
 db4:	aa 33       	cpi	r26, 0x3A	; 58
 db6:	08 f0       	brcs	.+2      	; 0xdba <__utoa_common+0x20>
 db8:	a9 5d       	subi	r26, 0xD9	; 217
 dba:	a1 93       	st	Z+, r26
 dbc:	00 97       	sbiw	r24, 0x00	; 0
 dbe:	79 f7       	brne	.-34     	; 0xd9e <__utoa_common+0x4>
 dc0:	b1 11       	cpse	r27, r1
 dc2:	b1 93       	st	Z+, r27
 dc4:	11 92       	st	Z+, r1
 dc6:	cb 01       	movw	r24, r22
 dc8:	0c 94 e6 06 	jmp	0xdcc	; 0xdcc <strrev>

00000dcc <strrev>:
 dcc:	dc 01       	movw	r26, r24
 dce:	fc 01       	movw	r30, r24
 dd0:	67 2f       	mov	r22, r23
 dd2:	71 91       	ld	r23, Z+
 dd4:	77 23       	and	r23, r23
 dd6:	e1 f7       	brne	.-8      	; 0xdd0 <strrev+0x4>
 dd8:	32 97       	sbiw	r30, 0x02	; 2
 dda:	04 c0       	rjmp	.+8      	; 0xde4 <strrev+0x18>
 ddc:	7c 91       	ld	r23, X
 dde:	6d 93       	st	X+, r22
 de0:	70 83       	st	Z, r23
 de2:	62 91       	ld	r22, -Z
 de4:	ae 17       	cp	r26, r30
 de6:	bf 07       	cpc	r27, r31
 de8:	c8 f3       	brcs	.-14     	; 0xddc <strrev+0x10>
 dea:	08 95       	ret

00000dec <_exit>:
 dec:	f8 94       	cli

00000dee <__stop_program>:
 dee:	ff cf       	rjmp	.-2      	; 0xdee <__stop_program>
