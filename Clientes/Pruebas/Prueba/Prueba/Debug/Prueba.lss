
Prueba.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000051a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004a6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  0000051a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000051a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000054c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  0000058c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c6c  00000000  00000000  00000604  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000824  00000000  00000000  00001270  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000062b  00000000  00000000  00001a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000170  00000000  00000000  000020c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000058c  00000000  00000000  00002230  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006ae  00000000  00000000  000027bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002e6a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 30       	cpi	r26, 0x08	; 8
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 ee 01 	call	0x3dc	; 0x3dc <main>
  88:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <config_A4988>:
	_frecuencia_inicial = frecuencia_o;
	_frecuencia_final = frecuencia_l;
	_ciclo_trabajo = duty;
	
	movimiento = 3;
}
  90:	84 b1       	in	r24, 0x04	; 4
  92:	82 60       	ori	r24, 0x02	; 2
  94:	84 b9       	out	0x04, r24	; 4
  96:	84 b1       	in	r24, 0x04	; 4
  98:	81 60       	ori	r24, 0x01	; 1
  9a:	84 b9       	out	0x04, r24	; 4
  9c:	8a b1       	in	r24, 0x0a	; 10
  9e:	80 68       	ori	r24, 0x80	; 128
  a0:	8a b9       	out	0x0a, r24	; 10
  a2:	8a b1       	in	r24, 0x0a	; 10
  a4:	80 64       	ori	r24, 0x40	; 64
  a6:	8a b9       	out	0x0a, r24	; 10
  a8:	8a b1       	in	r24, 0x0a	; 10
  aa:	80 62       	ori	r24, 0x20	; 32
  ac:	8a b9       	out	0x0a, r24	; 10
  ae:	8a b1       	in	r24, 0x0a	; 10
  b0:	80 61       	ori	r24, 0x10	; 16
  b2:	8a b9       	out	0x0a, r24	; 10
  b4:	8a b1       	in	r24, 0x0a	; 10
  b6:	88 60       	ori	r24, 0x08	; 8
  b8:	8a b9       	out	0x0a, r24	; 10
  ba:	8b b1       	in	r24, 0x0b	; 11
  bc:	80 62       	ori	r24, 0x20	; 32
  be:	8b b9       	out	0x0b, r24	; 11
  c0:	8b b1       	in	r24, 0x0b	; 11
  c2:	80 61       	ori	r24, 0x10	; 16
  c4:	8b b9       	out	0x0b, r24	; 11
  c6:	e1 e8       	ldi	r30, 0x81	; 129
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	80 61       	ori	r24, 0x10	; 16
  ce:	80 83       	st	Z, r24
  d0:	80 81       	ld	r24, Z
  d2:	88 60       	ori	r24, 0x08	; 8
  d4:	80 83       	st	Z, r24
  d6:	e0 e8       	ldi	r30, 0x80	; 128
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	82 60       	ori	r24, 0x02	; 2
  de:	80 83       	st	Z, r24
  e0:	80 81       	ld	r24, Z
  e2:	8e 7f       	andi	r24, 0xFE	; 254
  e4:	80 83       	st	Z, r24
  e6:	80 81       	ld	r24, Z
  e8:	80 68       	ori	r24, 0x80	; 128
  ea:	80 83       	st	Z, r24
  ec:	80 81       	ld	r24, Z
  ee:	8f 7b       	andi	r24, 0xBF	; 191
  f0:	80 83       	st	Z, r24
  f2:	ef e6       	ldi	r30, 0x6F	; 111
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	82 60       	ori	r24, 0x02	; 2
  fa:	80 83       	st	Z, r24
  fc:	08 95       	ret

000000fe <config_direccion>:
  fe:	88 23       	and	r24, r24
 100:	19 f0       	breq	.+6      	; 0x108 <config_direccion+0xa>
 102:	81 30       	cpi	r24, 0x01	; 1
 104:	29 f0       	breq	.+10     	; 0x110 <config_direccion+0x12>
 106:	08 95       	ret
 108:	8b b1       	in	r24, 0x0b	; 11
 10a:	87 7f       	andi	r24, 0xF7	; 247
 10c:	8b b9       	out	0x0b, r24	; 11
 10e:	08 95       	ret
 110:	8b b1       	in	r24, 0x0b	; 11
 112:	88 60       	ori	r24, 0x08	; 8
 114:	8b b9       	out	0x0b, r24	; 11
 116:	08 95       	ret

00000118 <config_microstepping>:
 118:	82 30       	cpi	r24, 0x02	; 2
 11a:	f9 f0       	breq	.+62     	; 0x15a <config_microstepping+0x42>
 11c:	28 f4       	brcc	.+10     	; 0x128 <config_microstepping+0x10>
 11e:	88 23       	and	r24, r24
 120:	41 f0       	breq	.+16     	; 0x132 <config_microstepping+0x1a>
 122:	81 30       	cpi	r24, 0x01	; 1
 124:	81 f0       	breq	.+32     	; 0x146 <config_microstepping+0x2e>
 126:	08 95       	ret
 128:	83 30       	cpi	r24, 0x03	; 3
 12a:	09 f1       	breq	.+66     	; 0x16e <config_microstepping+0x56>
 12c:	84 30       	cpi	r24, 0x04	; 4
 12e:	49 f1       	breq	.+82     	; 0x182 <config_microstepping+0x6a>
 130:	08 95       	ret
 132:	85 b1       	in	r24, 0x05	; 5
 134:	8e 7f       	andi	r24, 0xFE	; 254
 136:	85 b9       	out	0x05, r24	; 5
 138:	8b b1       	in	r24, 0x0b	; 11
 13a:	8f 77       	andi	r24, 0x7F	; 127
 13c:	8b b9       	out	0x0b, r24	; 11
 13e:	8b b1       	in	r24, 0x0b	; 11
 140:	8f 7b       	andi	r24, 0xBF	; 191
 142:	8b b9       	out	0x0b, r24	; 11
 144:	08 95       	ret
 146:	85 b1       	in	r24, 0x05	; 5
 148:	81 60       	ori	r24, 0x01	; 1
 14a:	85 b9       	out	0x05, r24	; 5
 14c:	8b b1       	in	r24, 0x0b	; 11
 14e:	8f 77       	andi	r24, 0x7F	; 127
 150:	8b b9       	out	0x0b, r24	; 11
 152:	8b b1       	in	r24, 0x0b	; 11
 154:	8f 7b       	andi	r24, 0xBF	; 191
 156:	8b b9       	out	0x0b, r24	; 11
 158:	08 95       	ret
 15a:	85 b1       	in	r24, 0x05	; 5
 15c:	8e 7f       	andi	r24, 0xFE	; 254
 15e:	85 b9       	out	0x05, r24	; 5
 160:	8b b1       	in	r24, 0x0b	; 11
 162:	80 68       	ori	r24, 0x80	; 128
 164:	8b b9       	out	0x0b, r24	; 11
 166:	8b b1       	in	r24, 0x0b	; 11
 168:	8f 7b       	andi	r24, 0xBF	; 191
 16a:	8b b9       	out	0x0b, r24	; 11
 16c:	08 95       	ret
 16e:	85 b1       	in	r24, 0x05	; 5
 170:	81 60       	ori	r24, 0x01	; 1
 172:	85 b9       	out	0x05, r24	; 5
 174:	8b b1       	in	r24, 0x0b	; 11
 176:	80 68       	ori	r24, 0x80	; 128
 178:	8b b9       	out	0x0b, r24	; 11
 17a:	8b b1       	in	r24, 0x0b	; 11
 17c:	8f 7b       	andi	r24, 0xBF	; 191
 17e:	8b b9       	out	0x0b, r24	; 11
 180:	08 95       	ret
 182:	85 b1       	in	r24, 0x05	; 5
 184:	81 60       	ori	r24, 0x01	; 1
 186:	85 b9       	out	0x05, r24	; 5
 188:	8b b1       	in	r24, 0x0b	; 11
 18a:	80 68       	ori	r24, 0x80	; 128
 18c:	8b b9       	out	0x0b, r24	; 11
 18e:	8b b1       	in	r24, 0x0b	; 11
 190:	80 64       	ori	r24, 0x40	; 64
 192:	8b b9       	out	0x0b, r24	; 11
 194:	08 95       	ret

00000196 <incrementar_velocidad>:
 196:	ef 92       	push	r14
 198:	ff 92       	push	r15
 19a:	0f 93       	push	r16
 19c:	1f 93       	push	r17
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	16 2f       	mov	r17, r22
 1a4:	7a 01       	movw	r14, r20
 1a6:	e9 01       	movw	r28, r18
 1a8:	e1 e8       	ldi	r30, 0x81	; 129
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	90 81       	ld	r25, Z
 1ae:	94 60       	ori	r25, 0x04	; 4
 1b0:	90 83       	st	Z, r25
 1b2:	90 81       	ld	r25, Z
 1b4:	9d 7f       	andi	r25, 0xFD	; 253
 1b6:	90 83       	st	Z, r25
 1b8:	90 81       	ld	r25, Z
 1ba:	91 60       	ori	r25, 0x01	; 1
 1bc:	90 83       	st	Z, r25
 1be:	0e 94 8c 00 	call	0x118	; 0x118 <config_microstepping>
 1c2:	81 2f       	mov	r24, r17
 1c4:	0e 94 7f 00 	call	0xfe	; 0xfe <config_direccion>
 1c8:	f0 92 03 01 	sts	0x0103, r15	; 0x800103 <_frecuencia_inicial+0x1>
 1cc:	e0 92 02 01 	sts	0x0102, r14	; 0x800102 <_frecuencia_inicial>
 1d0:	d0 93 05 01 	sts	0x0105, r29	; 0x800105 <_frecuencia_final+0x1>
 1d4:	c0 93 04 01 	sts	0x0104, r28	; 0x800104 <_frecuencia_final>
 1d8:	00 93 01 01 	sts	0x0101, r16	; 0x800101 <_ciclo_trabajo>
 1dc:	82 e0       	ldi	r24, 0x02	; 2
 1de:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	1f 91       	pop	r17
 1e8:	0f 91       	pop	r16
 1ea:	ff 90       	pop	r15
 1ec:	ef 90       	pop	r14
 1ee:	08 95       	ret

000001f0 <__vector_11>:


ISR(TIMER1_COMPA_vect){
 1f0:	1f 92       	push	r1
 1f2:	0f 92       	push	r0
 1f4:	0f b6       	in	r0, 0x3f	; 63
 1f6:	0f 92       	push	r0
 1f8:	11 24       	eor	r1, r1
 1fa:	cf 92       	push	r12
 1fc:	df 92       	push	r13
 1fe:	ef 92       	push	r14
 200:	ff 92       	push	r15
 202:	2f 93       	push	r18
 204:	3f 93       	push	r19
 206:	4f 93       	push	r20
 208:	5f 93       	push	r21
 20a:	6f 93       	push	r22
 20c:	7f 93       	push	r23
 20e:	8f 93       	push	r24
 210:	9f 93       	push	r25
 212:	af 93       	push	r26
 214:	bf 93       	push	r27
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
 21a:	ef 93       	push	r30
 21c:	ff 93       	push	r31
	// VARIABLES
	uint16_t maxval;
	
	if (movimiento == 1)
 21e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 222:	81 30       	cpi	r24, 0x01	; 1
 224:	51 f5       	brne	.+84     	; 0x27a <__vector_11+0x8a>
	{
		maxval = (F_CPU/1024/_frecuencia)-1;
 226:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <_frecuencia>
 22a:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <_frecuencia+0x1>
 22e:	40 e0       	ldi	r20, 0x00	; 0
 230:	50 e0       	ldi	r21, 0x00	; 0
 232:	69 e0       	ldi	r22, 0x09	; 9
 234:	7d e3       	ldi	r23, 0x3D	; 61
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 01 02 	call	0x402	; 0x402 <__divmodsi4>
 23e:	21 50       	subi	r18, 0x01	; 1
 240:	31 09       	sbc	r19, r1
		ICR1 = maxval;
 242:	e6 e8       	ldi	r30, 0x86	; 134
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	31 83       	std	Z+1, r19	; 0x01
 248:	20 83       	st	Z, r18
		OCR1A = (ICR1*_ciclo_trabajo)/100;
 24a:	80 81       	ld	r24, Z
 24c:	91 81       	ldd	r25, Z+1	; 0x01
 24e:	40 91 01 01 	lds	r20, 0x0101	; 0x800101 <_ciclo_trabajo>
 252:	48 9f       	mul	r20, r24
 254:	90 01       	movw	r18, r0
 256:	49 9f       	mul	r20, r25
 258:	30 0d       	add	r19, r0
 25a:	11 24       	eor	r1, r1
 25c:	36 95       	lsr	r19
 25e:	27 95       	ror	r18
 260:	36 95       	lsr	r19
 262:	27 95       	ror	r18
 264:	ab e7       	ldi	r26, 0x7B	; 123
 266:	b4 e1       	ldi	r27, 0x14	; 20
 268:	0e 94 20 02 	call	0x440	; 0x440 <__umulhisi3>
 26c:	96 95       	lsr	r25
 26e:	87 95       	ror	r24
 270:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 274:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 278:	9a c0       	rjmp	.+308    	; 0x3ae <__vector_11+0x1be>
	}else if(movimiento == 2){
 27a:	82 30       	cpi	r24, 0x02	; 2
 27c:	09 f0       	breq	.+2      	; 0x280 <__vector_11+0x90>
 27e:	4a c0       	rjmp	.+148    	; 0x314 <__vector_11+0x124>
		uint16_t maxval_i = (F_CPU/1024/_frecuencia_inicial)-1;
 280:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <_frecuencia_inicial>
 284:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <_frecuencia_inicial+0x1>
 288:	40 e0       	ldi	r20, 0x00	; 0
 28a:	50 e0       	ldi	r21, 0x00	; 0
 28c:	0f 2e       	mov	r0, r31
 28e:	f9 e0       	ldi	r31, 0x09	; 9
 290:	cf 2e       	mov	r12, r31
 292:	fd e3       	ldi	r31, 0x3D	; 61
 294:	df 2e       	mov	r13, r31
 296:	e1 2c       	mov	r14, r1
 298:	f1 2c       	mov	r15, r1
 29a:	f0 2d       	mov	r31, r0
 29c:	c7 01       	movw	r24, r14
 29e:	b6 01       	movw	r22, r12
 2a0:	0e 94 01 02 	call	0x402	; 0x402 <__divmodsi4>
 2a4:	e9 01       	movw	r28, r18
 2a6:	21 97       	sbiw	r28, 0x01	; 1
		uint16_t maxval_f = (F_CPU/1024/_frecuencia_final)-1;
 2a8:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <_frecuencia_final>
 2ac:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <_frecuencia_final+0x1>
 2b0:	40 e0       	ldi	r20, 0x00	; 0
 2b2:	50 e0       	ldi	r21, 0x00	; 0
 2b4:	c7 01       	movw	r24, r14
 2b6:	b6 01       	movw	r22, r12
 2b8:	0e 94 01 02 	call	0x402	; 0x402 <__divmodsi4>
 2bc:	a9 01       	movw	r20, r18
 2be:	41 50       	subi	r20, 0x01	; 1
 2c0:	51 09       	sbc	r21, r1
		
		while(true){
			if (maxval_i>maxval_f)
 2c2:	4c 17       	cp	r20, r28
 2c4:	5d 07       	cpc	r21, r29
 2c6:	e8 f7       	brcc	.-6      	; 0x2c2 <__vector_11+0xd2>
			{
				ICR1 = maxval_i;
 2c8:	e6 e8       	ldi	r30, 0x86	; 134
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
 2cc:	d1 83       	std	Z+1, r29	; 0x01
 2ce:	c0 83       	st	Z, r28
				OCR1A = (ICR1*_ciclo_trabajo)/100;
 2d0:	80 81       	ld	r24, Z
 2d2:	91 81       	ldd	r25, Z+1	; 0x01
 2d4:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <_ciclo_trabajo>
 2d8:	68 9f       	mul	r22, r24
 2da:	90 01       	movw	r18, r0
 2dc:	69 9f       	mul	r22, r25
 2de:	30 0d       	add	r19, r0
 2e0:	11 24       	eor	r1, r1
 2e2:	36 95       	lsr	r19
 2e4:	27 95       	ror	r18
 2e6:	36 95       	lsr	r19
 2e8:	27 95       	ror	r18
 2ea:	ab e7       	ldi	r26, 0x7B	; 123
 2ec:	b4 e1       	ldi	r27, 0x14	; 20
 2ee:	0e 94 20 02 	call	0x440	; 0x440 <__umulhisi3>
 2f2:	96 95       	lsr	r25
 2f4:	87 95       	ror	r24
 2f6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 2fa:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
				maxval_i--;
 2fe:	21 97       	sbiw	r28, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 300:	2f ef       	ldi	r18, 0xFF	; 255
 302:	8b e4       	ldi	r24, 0x4B	; 75
 304:	9d e1       	ldi	r25, 0x1D	; 29
 306:	21 50       	subi	r18, 0x01	; 1
 308:	80 40       	sbci	r24, 0x00	; 0
 30a:	90 40       	sbci	r25, 0x00	; 0
 30c:	e1 f7       	brne	.-8      	; 0x306 <__vector_11+0x116>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <__vector_11+0x120>
 310:	00 00       	nop
 312:	d7 cf       	rjmp	.-82     	; 0x2c2 <__vector_11+0xd2>
				_delay_ms(600);
			}
		}
		
	}else if (movimiento==3){
 314:	83 30       	cpi	r24, 0x03	; 3
 316:	09 f0       	breq	.+2      	; 0x31a <__vector_11+0x12a>
 318:	4a c0       	rjmp	.+148    	; 0x3ae <__vector_11+0x1be>
		uint16_t maxval_i = (F_CPU/1024/_frecuencia_inicial)-1;
 31a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <_frecuencia_inicial>
 31e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <_frecuencia_inicial+0x1>
 322:	40 e0       	ldi	r20, 0x00	; 0
 324:	50 e0       	ldi	r21, 0x00	; 0
 326:	0f 2e       	mov	r0, r31
 328:	f9 e0       	ldi	r31, 0x09	; 9
 32a:	cf 2e       	mov	r12, r31
 32c:	fd e3       	ldi	r31, 0x3D	; 61
 32e:	df 2e       	mov	r13, r31
 330:	e1 2c       	mov	r14, r1
 332:	f1 2c       	mov	r15, r1
 334:	f0 2d       	mov	r31, r0
 336:	c7 01       	movw	r24, r14
 338:	b6 01       	movw	r22, r12
 33a:	0e 94 01 02 	call	0x402	; 0x402 <__divmodsi4>
 33e:	e9 01       	movw	r28, r18
 340:	21 97       	sbiw	r28, 0x01	; 1
		uint16_t maxval_f = (F_CPU/1024/_frecuencia_final)-1;
 342:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <_frecuencia_final>
 346:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <_frecuencia_final+0x1>
 34a:	40 e0       	ldi	r20, 0x00	; 0
 34c:	50 e0       	ldi	r21, 0x00	; 0
 34e:	c7 01       	movw	r24, r14
 350:	b6 01       	movw	r22, r12
 352:	0e 94 01 02 	call	0x402	; 0x402 <__divmodsi4>
 356:	a9 01       	movw	r20, r18
 358:	41 50       	subi	r20, 0x01	; 1
 35a:	51 09       	sbc	r21, r1
		
		while(true){
			if (maxval_i<maxval_f)
 35c:	c4 17       	cp	r28, r20
 35e:	d5 07       	cpc	r29, r21
 360:	e8 f7       	brcc	.-6      	; 0x35c <__vector_11+0x16c>
			{
				ICR1 = maxval_i;
 362:	e6 e8       	ldi	r30, 0x86	; 134
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	d1 83       	std	Z+1, r29	; 0x01
 368:	c0 83       	st	Z, r28
				OCR1A = (ICR1*_ciclo_trabajo)/100;
 36a:	80 81       	ld	r24, Z
 36c:	91 81       	ldd	r25, Z+1	; 0x01
 36e:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <_ciclo_trabajo>
 372:	68 9f       	mul	r22, r24
 374:	90 01       	movw	r18, r0
 376:	69 9f       	mul	r22, r25
 378:	30 0d       	add	r19, r0
 37a:	11 24       	eor	r1, r1
 37c:	36 95       	lsr	r19
 37e:	27 95       	ror	r18
 380:	36 95       	lsr	r19
 382:	27 95       	ror	r18
 384:	ab e7       	ldi	r26, 0x7B	; 123
 386:	b4 e1       	ldi	r27, 0x14	; 20
 388:	0e 94 20 02 	call	0x440	; 0x440 <__umulhisi3>
 38c:	96 95       	lsr	r25
 38e:	87 95       	ror	r24
 390:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 394:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
				maxval_i++;
 398:	21 96       	adiw	r28, 0x01	; 1
 39a:	2f ef       	ldi	r18, 0xFF	; 255
 39c:	8b e4       	ldi	r24, 0x4B	; 75
 39e:	9d e1       	ldi	r25, 0x1D	; 29
 3a0:	21 50       	subi	r18, 0x01	; 1
 3a2:	80 40       	sbci	r24, 0x00	; 0
 3a4:	90 40       	sbci	r25, 0x00	; 0
 3a6:	e1 f7       	brne	.-8      	; 0x3a0 <__vector_11+0x1b0>
 3a8:	00 c0       	rjmp	.+0      	; 0x3aa <__vector_11+0x1ba>
 3aa:	00 00       	nop
 3ac:	d7 cf       	rjmp	.-82     	; 0x35c <__vector_11+0x16c>
				_delay_ms(600);
			}
		}
	}
	
}
 3ae:	ff 91       	pop	r31
 3b0:	ef 91       	pop	r30
 3b2:	df 91       	pop	r29
 3b4:	cf 91       	pop	r28
 3b6:	bf 91       	pop	r27
 3b8:	af 91       	pop	r26
 3ba:	9f 91       	pop	r25
 3bc:	8f 91       	pop	r24
 3be:	7f 91       	pop	r23
 3c0:	6f 91       	pop	r22
 3c2:	5f 91       	pop	r21
 3c4:	4f 91       	pop	r20
 3c6:	3f 91       	pop	r19
 3c8:	2f 91       	pop	r18
 3ca:	ff 90       	pop	r15
 3cc:	ef 90       	pop	r14
 3ce:	df 90       	pop	r13
 3d0:	cf 90       	pop	r12
 3d2:	0f 90       	pop	r0
 3d4:	0f be       	out	0x3f, r0	; 63
 3d6:	0f 90       	pop	r0
 3d8:	1f 90       	pop	r1
 3da:	18 95       	reti

000003dc <main>:
// #define bit_is_set(sfr, bit) (_SFR_BYTE(sfr) & _BV(bit))
// #define bit_is_clear(sfr, bit) (!(_SFR_BYTE(sfr) & _BV(bit)))

int main(void)
{	
	config_A4988();
 3dc:	0e 94 48 00 	call	0x90	; 0x90 <config_A4988>
	
	sei();
 3e0:	78 94       	sei
 3e2:	8f e3       	ldi	r24, 0x3F	; 63
 3e4:	9c e9       	ldi	r25, 0x9C	; 156
 3e6:	01 97       	sbiw	r24, 0x01	; 1
 3e8:	f1 f7       	brne	.-4      	; 0x3e6 <main+0xa>
 3ea:	00 c0       	rjmp	.+0      	; 0x3ec <main+0x10>
 3ec:	00 00       	nop
	while (1)
	{
		_delay_ms(10);
		//init_motor(FULL_STEP, ANTIHORARIO, 61, 50);
		//stop_motor();
		incrementar_velocidad(FULL_STEP, HORARIO, 20, 800, 50);
 3ee:	02 e3       	ldi	r16, 0x32	; 50
 3f0:	20 e2       	ldi	r18, 0x20	; 32
 3f2:	33 e0       	ldi	r19, 0x03	; 3
 3f4:	44 e1       	ldi	r20, 0x14	; 20
 3f6:	50 e0       	ldi	r21, 0x00	; 0
 3f8:	60 e0       	ldi	r22, 0x00	; 0
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	0e 94 cb 00 	call	0x196	; 0x196 <incrementar_velocidad>
 400:	f0 cf       	rjmp	.-32     	; 0x3e2 <main+0x6>

00000402 <__divmodsi4>:
 402:	05 2e       	mov	r0, r21
 404:	97 fb       	bst	r25, 7
 406:	1e f4       	brtc	.+6      	; 0x40e <__divmodsi4+0xc>
 408:	00 94       	com	r0
 40a:	0e 94 18 02 	call	0x430	; 0x430 <__negsi2>
 40e:	57 fd       	sbrc	r21, 7
 410:	07 d0       	rcall	.+14     	; 0x420 <__divmodsi4_neg2>
 412:	0e 94 2f 02 	call	0x45e	; 0x45e <__udivmodsi4>
 416:	07 fc       	sbrc	r0, 7
 418:	03 d0       	rcall	.+6      	; 0x420 <__divmodsi4_neg2>
 41a:	4e f4       	brtc	.+18     	; 0x42e <__divmodsi4_exit>
 41c:	0c 94 18 02 	jmp	0x430	; 0x430 <__negsi2>

00000420 <__divmodsi4_neg2>:
 420:	50 95       	com	r21
 422:	40 95       	com	r20
 424:	30 95       	com	r19
 426:	21 95       	neg	r18
 428:	3f 4f       	sbci	r19, 0xFF	; 255
 42a:	4f 4f       	sbci	r20, 0xFF	; 255
 42c:	5f 4f       	sbci	r21, 0xFF	; 255

0000042e <__divmodsi4_exit>:
 42e:	08 95       	ret

00000430 <__negsi2>:
 430:	90 95       	com	r25
 432:	80 95       	com	r24
 434:	70 95       	com	r23
 436:	61 95       	neg	r22
 438:	7f 4f       	sbci	r23, 0xFF	; 255
 43a:	8f 4f       	sbci	r24, 0xFF	; 255
 43c:	9f 4f       	sbci	r25, 0xFF	; 255
 43e:	08 95       	ret

00000440 <__umulhisi3>:
 440:	a2 9f       	mul	r26, r18
 442:	b0 01       	movw	r22, r0
 444:	b3 9f       	mul	r27, r19
 446:	c0 01       	movw	r24, r0
 448:	a3 9f       	mul	r26, r19
 44a:	70 0d       	add	r23, r0
 44c:	81 1d       	adc	r24, r1
 44e:	11 24       	eor	r1, r1
 450:	91 1d       	adc	r25, r1
 452:	b2 9f       	mul	r27, r18
 454:	70 0d       	add	r23, r0
 456:	81 1d       	adc	r24, r1
 458:	11 24       	eor	r1, r1
 45a:	91 1d       	adc	r25, r1
 45c:	08 95       	ret

0000045e <__udivmodsi4>:
 45e:	a1 e2       	ldi	r26, 0x21	; 33
 460:	1a 2e       	mov	r1, r26
 462:	aa 1b       	sub	r26, r26
 464:	bb 1b       	sub	r27, r27
 466:	fd 01       	movw	r30, r26
 468:	0d c0       	rjmp	.+26     	; 0x484 <__udivmodsi4_ep>

0000046a <__udivmodsi4_loop>:
 46a:	aa 1f       	adc	r26, r26
 46c:	bb 1f       	adc	r27, r27
 46e:	ee 1f       	adc	r30, r30
 470:	ff 1f       	adc	r31, r31
 472:	a2 17       	cp	r26, r18
 474:	b3 07       	cpc	r27, r19
 476:	e4 07       	cpc	r30, r20
 478:	f5 07       	cpc	r31, r21
 47a:	20 f0       	brcs	.+8      	; 0x484 <__udivmodsi4_ep>
 47c:	a2 1b       	sub	r26, r18
 47e:	b3 0b       	sbc	r27, r19
 480:	e4 0b       	sbc	r30, r20
 482:	f5 0b       	sbc	r31, r21

00000484 <__udivmodsi4_ep>:
 484:	66 1f       	adc	r22, r22
 486:	77 1f       	adc	r23, r23
 488:	88 1f       	adc	r24, r24
 48a:	99 1f       	adc	r25, r25
 48c:	1a 94       	dec	r1
 48e:	69 f7       	brne	.-38     	; 0x46a <__udivmodsi4_loop>
 490:	60 95       	com	r22
 492:	70 95       	com	r23
 494:	80 95       	com	r24
 496:	90 95       	com	r25
 498:	9b 01       	movw	r18, r22
 49a:	ac 01       	movw	r20, r24
 49c:	bd 01       	movw	r22, r26
 49e:	cf 01       	movw	r24, r30
 4a0:	08 95       	ret

000004a2 <_exit>:
 4a2:	f8 94       	cli

000004a4 <__stop_program>:
 4a4:	ff cf       	rjmp	.-2      	; 0x4a4 <__stop_program>
