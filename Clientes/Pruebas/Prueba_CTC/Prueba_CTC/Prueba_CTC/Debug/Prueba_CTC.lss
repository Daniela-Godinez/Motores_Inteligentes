
Prueba_CTC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000003ea  0000047e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800106  00800106  00000484  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000754  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000628  00000000  00000000  00000c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ca  00000000  00000000  00001298  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001564  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003fa  00000000  00000000  000015b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000063  00000000  00000000  000019b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001a15  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 4b 01 	jmp	0x296	; 0x296 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ee       	ldi	r30, 0xEA	; 234
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 31       	cpi	r26, 0x12	; 18
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
int main(void)
{
	//-----------------------------
	//           SALIDAS
	//-----------------------------
	set_bit(DDRB, 1); // STEP - PWM
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	84 b9       	out	0x04, r24	; 4
	set_bit(DDRB, 0); // MS1
  ac:	84 b1       	in	r24, 0x04	; 4
  ae:	81 60       	ori	r24, 0x01	; 1
  b0:	84 b9       	out	0x04, r24	; 4
	set_bit(DDRD, 7); // MS2
  b2:	8a b1       	in	r24, 0x0a	; 10
  b4:	80 68       	ori	r24, 0x80	; 128
  b6:	8a b9       	out	0x0a, r24	; 10
	set_bit(DDRD, 6); // MS3
  b8:	8a b1       	in	r24, 0x0a	; 10
  ba:	80 64       	ori	r24, 0x40	; 64
  bc:	8a b9       	out	0x0a, r24	; 10
	set_bit(DDRD, 5); // RST
  be:	8a b1       	in	r24, 0x0a	; 10
  c0:	80 62       	ori	r24, 0x20	; 32
  c2:	8a b9       	out	0x0a, r24	; 10
	set_bit(DDRD, 4); // SLP
  c4:	8a b1       	in	r24, 0x0a	; 10
  c6:	80 61       	ori	r24, 0x10	; 16
  c8:	8a b9       	out	0x0a, r24	; 10
	set_bit(DDRD, 3); // DIR
  ca:	8a b1       	in	r24, 0x0a	; 10
  cc:	88 60       	ori	r24, 0x08	; 8
  ce:	8a b9       	out	0x0a, r24	; 10
	
	set_bit(DDRD,0);
  d0:	8a b1       	in	r24, 0x0a	; 10
  d2:	81 60       	ori	r24, 0x01	; 1
  d4:	8a b9       	out	0x0a, r24	; 10
	
	clear_bit(PORTB, 0); // MS1
  d6:	85 b1       	in	r24, 0x05	; 5
  d8:	8e 7f       	andi	r24, 0xFE	; 254
  da:	85 b9       	out	0x05, r24	; 5
	clear_bit(PORTD, 7); // MS2
  dc:	8b b1       	in	r24, 0x0b	; 11
  de:	8f 77       	andi	r24, 0x7F	; 127
  e0:	8b b9       	out	0x0b, r24	; 11
	clear_bit(PORTD, 6); // MS3
  e2:	8b b1       	in	r24, 0x0b	; 11
  e4:	8f 7b       	andi	r24, 0xBF	; 191
  e6:	8b b9       	out	0x0b, r24	; 11
	
	set_bit(PORTD, 5);
  e8:	8b b1       	in	r24, 0x0b	; 11
  ea:	80 62       	ori	r24, 0x20	; 32
  ec:	8b b9       	out	0x0b, r24	; 11
	set_bit(PORTD, 4);
  ee:	8b b1       	in	r24, 0x0b	; 11
  f0:	80 61       	ori	r24, 0x10	; 16
  f2:	8b b9       	out	0x0b, r24	; 11
	set_bit(PORTD, 3);
  f4:	8b b1       	in	r24, 0x0b	; 11
  f6:	88 60       	ori	r24, 0x08	; 8
  f8:	8b b9       	out	0x0b, r24	; 11
	
	//-----------------------------
	//       MODO CTC - 0100
	//-----------------------------
	// (TMR1 - MODO 4 - MAXVAL OCR1A)
	clear_bit(TCCR1B, WGM13);
  fa:	e1 e8       	ldi	r30, 0x81	; 129
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	8f 7e       	andi	r24, 0xEF	; 239
 102:	80 83       	st	Z, r24
	set_bit(TCCR1B, WGM12);
 104:	80 81       	ld	r24, Z
 106:	88 60       	ori	r24, 0x08	; 8
 108:	80 83       	st	Z, r24
	clear_bit(TCCR1A, WGM11);
 10a:	a0 e8       	ldi	r26, 0x80	; 128
 10c:	b0 e0       	ldi	r27, 0x00	; 0
 10e:	8c 91       	ld	r24, X
 110:	8d 7f       	andi	r24, 0xFD	; 253
 112:	8c 93       	st	X, r24
	clear_bit(TCCR1A, WGM10);
 114:	8c 91       	ld	r24, X
 116:	8e 7f       	andi	r24, 0xFE	; 254
 118:	8c 93       	st	X, r24
	
	//-----------------------------
	//     PRESCALER - 8 (010)
	//-----------------------------
	clear_bit(TCCR1B, CS12);
 11a:	80 81       	ld	r24, Z
 11c:	8b 7f       	andi	r24, 0xFB	; 251
 11e:	80 83       	st	Z, r24
	set_bit(TCCR1B, CS11);
 120:	80 81       	ld	r24, Z
 122:	82 60       	ori	r24, 0x02	; 2
 124:	80 83       	st	Z, r24
	clear_bit(TCCR1B, CS10);
 126:	80 81       	ld	r24, Z
 128:	8e 7f       	andi	r24, 0xFE	; 254
 12a:	80 83       	st	Z, r24
	
	//-----------------------------
	//      CONMUTA OC1x (01)
	//-----------------------------
	clear_bit(TCCR1A,COM1A1);
 12c:	8c 91       	ld	r24, X
 12e:	8f 77       	andi	r24, 0x7F	; 127
 130:	8c 93       	st	X, r24
	set_bit(TCCR1A, COM1A0);
 132:	8c 91       	ld	r24, X
 134:	80 64       	ori	r24, 0x40	; 64
 136:	8c 93       	st	X, r24
	
	//-----------------------------
	//  INTERRUPCION TMR1 - MASK
	//-----------------------------
	TIMSK1 |= (1<<OCIE1A);
 138:	ef e6       	ldi	r30, 0x6F	; 111
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	82 60       	ori	r24, 0x02	; 2
 140:	80 83       	st	Z, r24
	
	
	
	tiempo_m = timpo_s/60;
 142:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 146:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 14a:	a9 e8       	ldi	r26, 0x89	; 137
 14c:	b8 e8       	ldi	r27, 0x88	; 136
 14e:	0e 94 c2 01 	call	0x384	; 0x384 <__umulhisi3>
 152:	96 95       	lsr	r25
 154:	87 95       	ror	r24
 156:	92 95       	swap	r25
 158:	82 95       	swap	r24
 15a:	8f 70       	andi	r24, 0x0F	; 15
 15c:	89 27       	eor	r24, r25
 15e:	9f 70       	andi	r25, 0x0F	; 15
 160:	89 27       	eor	r24, r25
 162:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <tiempo_m+0x1>
 166:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <tiempo_m>
	
	frecuencia_i = (rpm_i*200)/60;
 16a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <rpm_i>
 16e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <rpm_i+0x1>
 172:	48 ec       	ldi	r20, 0xC8	; 200
 174:	48 9f       	mul	r20, r24
 176:	90 01       	movw	r18, r0
 178:	49 9f       	mul	r20, r25
 17a:	30 0d       	add	r19, r0
 17c:	11 24       	eor	r1, r1
 17e:	0e 94 c2 01 	call	0x384	; 0x384 <__umulhisi3>
 182:	96 95       	lsr	r25
 184:	87 95       	ror	r24
 186:	92 95       	swap	r25
 188:	82 95       	swap	r24
 18a:	8f 70       	andi	r24, 0x0F	; 15
 18c:	89 27       	eor	r24, r25
 18e:	9f 70       	andi	r25, 0x0F	; 15
 190:	89 27       	eor	r24, r25
 192:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <frecuencia_i+0x1>
 196:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <frecuencia_i>
	frecuencia_f = (rpm_f*200)/60;
 19a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <rpm_f>
 19e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <rpm_f+0x1>
 1a2:	48 9f       	mul	r20, r24
 1a4:	90 01       	movw	r18, r0
 1a6:	49 9f       	mul	r20, r25
 1a8:	30 0d       	add	r19, r0
 1aa:	11 24       	eor	r1, r1
 1ac:	0e 94 c2 01 	call	0x384	; 0x384 <__umulhisi3>
 1b0:	96 95       	lsr	r25
 1b2:	87 95       	ror	r24
 1b4:	92 95       	swap	r25
 1b6:	82 95       	swap	r24
 1b8:	8f 70       	andi	r24, 0x0F	; 15
 1ba:	89 27       	eor	r24, r25
 1bc:	9f 70       	andi	r25, 0x0F	; 15
 1be:	89 27       	eor	r24, r25
 1c0:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
 1c4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
	
	maxval = (F_CPU/16/frecuencia_i)-1;
 1c8:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <frecuencia_i>
 1cc:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <frecuencia_i+0x1>
 1d0:	03 2e       	mov	r0, r19
 1d2:	00 0c       	add	r0, r0
 1d4:	44 0b       	sbc	r20, r20
 1d6:	55 0b       	sbc	r21, r21
 1d8:	0f 2e       	mov	r0, r31
 1da:	f0 e4       	ldi	r31, 0x40	; 64
 1dc:	cf 2e       	mov	r12, r31
 1de:	f2 e4       	ldi	r31, 0x42	; 66
 1e0:	df 2e       	mov	r13, r31
 1e2:	ff e0       	ldi	r31, 0x0F	; 15
 1e4:	ef 2e       	mov	r14, r31
 1e6:	f1 2c       	mov	r15, r1
 1e8:	f0 2d       	mov	r31, r0
 1ea:	c7 01       	movw	r24, r14
 1ec:	b6 01       	movw	r22, r12
 1ee:	0e 94 a3 01 	call	0x346	; 0x346 <__divmodsi4>
 1f2:	21 50       	subi	r18, 0x01	; 1
 1f4:	31 09       	sbc	r19, r1
 1f6:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <maxval+0x1>
 1fa:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <maxval>
	minval = (F_CPU/16/frecuencia_f)-1;
 1fe:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
 202:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
 206:	03 2e       	mov	r0, r19
 208:	00 0c       	add	r0, r0
 20a:	44 0b       	sbc	r20, r20
 20c:	55 0b       	sbc	r21, r21
 20e:	c7 01       	movw	r24, r14
 210:	b6 01       	movw	r22, r12
 212:	0e 94 a3 01 	call	0x346	; 0x346 <__divmodsi4>
 216:	21 50       	subi	r18, 0x01	; 1
 218:	31 09       	sbc	r19, r1
 21a:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <minval+0x1>
 21e:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <minval>
	
	//rango_aceleracion = (maxval-minval)/(tiempo_m*(rpm_f-rpm_i));
	rango_aceleracion = ((maxval-minval)*rpm_f)/(tiempo_m*(rpm_f-rpm_i));
 222:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <maxval>
 226:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <maxval+0x1>
 22a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <minval>
 22e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <minval+0x1>
 232:	28 1b       	sub	r18, r24
 234:	39 0b       	sbc	r19, r25
 236:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <rpm_f>
 23a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <rpm_f+0x1>
 23e:	24 9f       	mul	r18, r20
 240:	c0 01       	movw	r24, r0
 242:	25 9f       	mul	r18, r21
 244:	90 0d       	add	r25, r0
 246:	34 9f       	mul	r19, r20
 248:	90 0d       	add	r25, r0
 24a:	11 24       	eor	r1, r1
 24c:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <rpm_f>
 250:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <rpm_f+0x1>
 254:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <rpm_i>
 258:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <rpm_i+0x1>
 25c:	24 1b       	sub	r18, r20
 25e:	35 0b       	sbc	r19, r21
 260:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <tiempo_m>
 264:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <tiempo_m+0x1>
 268:	24 9f       	mul	r18, r20
 26a:	b0 01       	movw	r22, r0
 26c:	25 9f       	mul	r18, r21
 26e:	70 0d       	add	r23, r0
 270:	34 9f       	mul	r19, r20
 272:	70 0d       	add	r23, r0
 274:	11 24       	eor	r1, r1
 276:	0e 94 8f 01 	call	0x31e	; 0x31e <__udivmodhi4>
 27a:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <rango_aceleracion+0x1>
 27e:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <rango_aceleracion>

	OCR1A = maxval;	
 282:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <maxval>
 286:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <maxval+0x1>
 28a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 28e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	sei();
 292:	78 94       	sei
 294:	ff cf       	rjmp	.-2      	; 0x294 <main+0x1ee>

00000296 <__vector_11>:
    while (1) 
    {
    }
}

ISR(TIMER1_COMPA_vect){
 296:	1f 92       	push	r1
 298:	0f 92       	push	r0
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	0f 92       	push	r0
 29e:	11 24       	eor	r1, r1
 2a0:	2f 93       	push	r18
 2a2:	3f 93       	push	r19
 2a4:	8f 93       	push	r24
 2a6:	9f 93       	push	r25
	if (maxval > minval)
 2a8:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <maxval>
 2ac:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <maxval+0x1>
 2b0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <minval>
 2b4:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <minval+0x1>
 2b8:	82 17       	cp	r24, r18
 2ba:	93 07       	cpc	r25, r19
 2bc:	f8 f4       	brcc	.+62     	; 0x2fc <__vector_11+0x66>
	{
		maxval -= 45;
 2be:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <maxval>
 2c2:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <maxval+0x1>
 2c6:	8d 97       	sbiw	r24, 0x2d	; 45
 2c8:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <maxval+0x1>
 2cc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <maxval>
		if (maxval < minval) {
 2d0:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <maxval>
 2d4:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <maxval+0x1>
 2d8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <minval>
 2dc:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <minval+0x1>
 2e0:	28 17       	cp	r18, r24
 2e2:	39 07       	cpc	r19, r25
 2e4:	58 f4       	brcc	.+22     	; 0x2fc <__vector_11+0x66>
			maxval=minval;
 2e6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <minval>
 2ea:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <minval+0x1>
 2ee:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <maxval+0x1>
 2f2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <maxval>
			set_bit(PORTD,0);
 2f6:	8b b1       	in	r24, 0x0b	; 11
 2f8:	81 60       	ori	r24, 0x01	; 1
 2fa:	8b b9       	out	0x0b, r24	; 11
		}
	}
	OCR1A = maxval;
 2fc:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <maxval>
 300:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <maxval+0x1>
 304:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 308:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
}
 30c:	9f 91       	pop	r25
 30e:	8f 91       	pop	r24
 310:	3f 91       	pop	r19
 312:	2f 91       	pop	r18
 314:	0f 90       	pop	r0
 316:	0f be       	out	0x3f, r0	; 63
 318:	0f 90       	pop	r0
 31a:	1f 90       	pop	r1
 31c:	18 95       	reti

0000031e <__udivmodhi4>:
 31e:	aa 1b       	sub	r26, r26
 320:	bb 1b       	sub	r27, r27
 322:	51 e1       	ldi	r21, 0x11	; 17
 324:	07 c0       	rjmp	.+14     	; 0x334 <__udivmodhi4_ep>

00000326 <__udivmodhi4_loop>:
 326:	aa 1f       	adc	r26, r26
 328:	bb 1f       	adc	r27, r27
 32a:	a6 17       	cp	r26, r22
 32c:	b7 07       	cpc	r27, r23
 32e:	10 f0       	brcs	.+4      	; 0x334 <__udivmodhi4_ep>
 330:	a6 1b       	sub	r26, r22
 332:	b7 0b       	sbc	r27, r23

00000334 <__udivmodhi4_ep>:
 334:	88 1f       	adc	r24, r24
 336:	99 1f       	adc	r25, r25
 338:	5a 95       	dec	r21
 33a:	a9 f7       	brne	.-22     	; 0x326 <__udivmodhi4_loop>
 33c:	80 95       	com	r24
 33e:	90 95       	com	r25
 340:	bc 01       	movw	r22, r24
 342:	cd 01       	movw	r24, r26
 344:	08 95       	ret

00000346 <__divmodsi4>:
 346:	05 2e       	mov	r0, r21
 348:	97 fb       	bst	r25, 7
 34a:	1e f4       	brtc	.+6      	; 0x352 <__divmodsi4+0xc>
 34c:	00 94       	com	r0
 34e:	0e 94 ba 01 	call	0x374	; 0x374 <__negsi2>
 352:	57 fd       	sbrc	r21, 7
 354:	07 d0       	rcall	.+14     	; 0x364 <__divmodsi4_neg2>
 356:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <__udivmodsi4>
 35a:	07 fc       	sbrc	r0, 7
 35c:	03 d0       	rcall	.+6      	; 0x364 <__divmodsi4_neg2>
 35e:	4e f4       	brtc	.+18     	; 0x372 <__divmodsi4_exit>
 360:	0c 94 ba 01 	jmp	0x374	; 0x374 <__negsi2>

00000364 <__divmodsi4_neg2>:
 364:	50 95       	com	r21
 366:	40 95       	com	r20
 368:	30 95       	com	r19
 36a:	21 95       	neg	r18
 36c:	3f 4f       	sbci	r19, 0xFF	; 255
 36e:	4f 4f       	sbci	r20, 0xFF	; 255
 370:	5f 4f       	sbci	r21, 0xFF	; 255

00000372 <__divmodsi4_exit>:
 372:	08 95       	ret

00000374 <__negsi2>:
 374:	90 95       	com	r25
 376:	80 95       	com	r24
 378:	70 95       	com	r23
 37a:	61 95       	neg	r22
 37c:	7f 4f       	sbci	r23, 0xFF	; 255
 37e:	8f 4f       	sbci	r24, 0xFF	; 255
 380:	9f 4f       	sbci	r25, 0xFF	; 255
 382:	08 95       	ret

00000384 <__umulhisi3>:
 384:	a2 9f       	mul	r26, r18
 386:	b0 01       	movw	r22, r0
 388:	b3 9f       	mul	r27, r19
 38a:	c0 01       	movw	r24, r0
 38c:	a3 9f       	mul	r26, r19
 38e:	70 0d       	add	r23, r0
 390:	81 1d       	adc	r24, r1
 392:	11 24       	eor	r1, r1
 394:	91 1d       	adc	r25, r1
 396:	b2 9f       	mul	r27, r18
 398:	70 0d       	add	r23, r0
 39a:	81 1d       	adc	r24, r1
 39c:	11 24       	eor	r1, r1
 39e:	91 1d       	adc	r25, r1
 3a0:	08 95       	ret

000003a2 <__udivmodsi4>:
 3a2:	a1 e2       	ldi	r26, 0x21	; 33
 3a4:	1a 2e       	mov	r1, r26
 3a6:	aa 1b       	sub	r26, r26
 3a8:	bb 1b       	sub	r27, r27
 3aa:	fd 01       	movw	r30, r26
 3ac:	0d c0       	rjmp	.+26     	; 0x3c8 <__udivmodsi4_ep>

000003ae <__udivmodsi4_loop>:
 3ae:	aa 1f       	adc	r26, r26
 3b0:	bb 1f       	adc	r27, r27
 3b2:	ee 1f       	adc	r30, r30
 3b4:	ff 1f       	adc	r31, r31
 3b6:	a2 17       	cp	r26, r18
 3b8:	b3 07       	cpc	r27, r19
 3ba:	e4 07       	cpc	r30, r20
 3bc:	f5 07       	cpc	r31, r21
 3be:	20 f0       	brcs	.+8      	; 0x3c8 <__udivmodsi4_ep>
 3c0:	a2 1b       	sub	r26, r18
 3c2:	b3 0b       	sbc	r27, r19
 3c4:	e4 0b       	sbc	r30, r20
 3c6:	f5 0b       	sbc	r31, r21

000003c8 <__udivmodsi4_ep>:
 3c8:	66 1f       	adc	r22, r22
 3ca:	77 1f       	adc	r23, r23
 3cc:	88 1f       	adc	r24, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	1a 94       	dec	r1
 3d2:	69 f7       	brne	.-38     	; 0x3ae <__udivmodsi4_loop>
 3d4:	60 95       	com	r22
 3d6:	70 95       	com	r23
 3d8:	80 95       	com	r24
 3da:	90 95       	com	r25
 3dc:	9b 01       	movw	r18, r22
 3de:	ac 01       	movw	r20, r24
 3e0:	bd 01       	movw	r22, r26
 3e2:	cf 01       	movw	r24, r30
 3e4:	08 95       	ret

000003e6 <_exit>:
 3e6:	f8 94       	cli

000003e8 <__stop_program>:
 3e8:	ff cf       	rjmp	.-2      	; 0x3e8 <__stop_program>
