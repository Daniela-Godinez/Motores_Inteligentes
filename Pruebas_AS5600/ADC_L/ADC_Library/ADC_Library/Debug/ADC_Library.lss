
ADC_Library.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000290  00000324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000290  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800104  00800104  00000328  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000358  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000afe  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f4  00000000  00000000  00000f0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000481  00000000  00000000  00001802  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c4  00000000  00000000  00001c84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004bf  00000000  00000000  00001d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000014f  00000000  00000000  00002207  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002356  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e9       	ldi	r30, 0x90	; 144
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 31       	cpi	r26, 0x10	; 16
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ac 00 	call	0x158	; 0x158 <main>
  9e:	0c 94 46 01 	jmp	0x28c	; 0x28c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_init>:

uint16_t new_zero = 0;

void ADC_init(){
	// Voltaje de referencia externo a AVcc (01)
	clear_bit(ADMUX, REFS1);
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	8f 77       	andi	r24, 0x7F	; 127
  ae:	80 83       	st	Z, r24
	set_bit(ADMUX, REFS0);
  b0:	80 81       	ld	r24, Z
  b2:	80 64       	ori	r24, 0x40	; 64
  b4:	80 83       	st	Z, r24
	// ADC Right Adjust Result
	clear_bit(ADMUX, ADLAR);
  b6:	80 81       	ld	r24, Z
  b8:	8f 7d       	andi	r24, 0xDF	; 223
  ba:	80 83       	st	Z, r24
	// Factor de division en el preescalador del ADC (128 =  111)
	set_bit(ADCSRA, ADPS0);
  bc:	ea e7       	ldi	r30, 0x7A	; 122
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	81 60       	ori	r24, 0x01	; 1
  c4:	80 83       	st	Z, r24
	set_bit(ADCSRA, ADPS1);
  c6:	80 81       	ld	r24, Z
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	80 83       	st	Z, r24
	set_bit(ADCSRA, ADPS2);
  cc:	80 81       	ld	r24, Z
  ce:	84 60       	ori	r24, 0x04	; 4
  d0:	80 83       	st	Z, r24
	// Habilitar el ADC
	set_bit(ADCSRA, ADEN);
  d2:	80 81       	ld	r24, Z
  d4:	80 68       	ori	r24, 0x80	; 128
  d6:	80 83       	st	Z, r24
  d8:	08 95       	ret

000000da <ADC_read>:
}

uint16_t ADC_read(uint8_t canal){
	canal &= channel_mask;
  da:	8f 70       	andi	r24, 0x0F	; 15
	ADMUX = (ADMUX & channel_shift_mask)|canal;
  dc:	ec e7       	ldi	r30, 0x7C	; 124
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	90 81       	ld	r25, Z
  e2:	90 7f       	andi	r25, 0xF0	; 240
  e4:	89 2b       	or	r24, r25
  e6:	80 83       	st	Z, r24
	set_bit(ADCSRA, ADSC);
  e8:	ea e7       	ldi	r30, 0x7A	; 122
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	80 64       	ori	r24, 0x40	; 64
  f0:	80 83       	st	Z, r24
	while((ADCSRA)&(1<<ADSC));
  f2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  f6:	86 fd       	sbrc	r24, 6
  f8:	fc cf       	rjmp	.-8      	; 0xf2 <ADC_read+0x18>
	return(ADC);
  fa:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  fe:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 102:	08 95       	ret

00000104 <UART_init>:
// #define bit_is_set(sfr, bit) (_SFR_BYTE(sfr) & _BV(bit))
// #define bit_is_clear(sfr, bit) (!(_SFR_BYTE(sfr) & _BV(bit)))


void UART_init(unsigned int baud) {
	unsigned int ubrr = F_CPU/16/baud-1;
 104:	9c 01       	movw	r18, r24
 106:	40 e0       	ldi	r20, 0x00	; 0
 108:	50 e0       	ldi	r21, 0x00	; 0
 10a:	60 e4       	ldi	r22, 0x40	; 64
 10c:	72 e4       	ldi	r23, 0x42	; 66
 10e:	8f e0       	ldi	r24, 0x0F	; 15
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <__divmodsi4>
 116:	21 50       	subi	r18, 0x01	; 1
 118:	31 09       	sbc	r19, r1
	UBRR0H = (unsigned char)(ubrr>>8);
 11a:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 11e:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);  // Enable receiver and transmitter
 122:	88 e1       	ldi	r24, 0x18	; 24
 124:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00); // Set frame: 8 data bits, 1 stop bit
 128:	86 e0       	ldi	r24, 0x06	; 6
 12a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 12e:	08 95       	ret

00000130 <UART_transmit>:
}

void UART_transmit(unsigned char data) {
	while (!(UCSR0A & (1<<UDRE0)));  // Wait for empty transmit buffer
 130:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 134:	95 ff       	sbrs	r25, 5
 136:	fc cf       	rjmp	.-8      	; 0x130 <UART_transmit>
	UDR0 = data;                     // Put data into buffer, sends the data
 138:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 13c:	08 95       	ret

0000013e <UART_printString>:
}

void UART_printString(const char* str) {
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	ec 01       	movw	r28, r24
	while (*str) {
 144:	03 c0       	rjmp	.+6      	; 0x14c <UART_printString+0xe>
		UART_transmit(*str++);
 146:	21 96       	adiw	r28, 0x01	; 1
 148:	0e 94 98 00 	call	0x130	; 0x130 <UART_transmit>
	while (!(UCSR0A & (1<<UDRE0)));  // Wait for empty transmit buffer
	UDR0 = data;                     // Put data into buffer, sends the data
}

void UART_printString(const char* str) {
	while (*str) {
 14c:	88 81       	ld	r24, Y
 14e:	81 11       	cpse	r24, r1
 150:	fa cf       	rjmp	.-12     	; 0x146 <UART_printString+0x8>
		UART_transmit(*str++);
	}
}
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	08 95       	ret

00000158 <main>:
char str[10];
uint16_t dato_adc;

int main(void)
{
	UART_init(9600);
 158:	80 e8       	ldi	r24, 0x80	; 128
 15a:	95 e2       	ldi	r25, 0x25	; 37
 15c:	0e 94 82 00 	call	0x104	; 0x104 <UART_init>
	ADC_init();
 160:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_init>
		
		//if(BANDERA){
			//new_zero = set_origin();
			//BANDERA = 0;
		//}
		dato_adc = ADC_read(0);
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	0e 94 6d 00 	call	0xda	; 0xda <ADC_read>
 16a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 16e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 172:	4a e0       	ldi	r20, 0x0A	; 10
 174:	66 e0       	ldi	r22, 0x06	; 6
 176:	71 e0       	ldi	r23, 0x01	; 1
 178:	0e 94 11 01 	call	0x222	; 0x222 <__itoa_ncheck>
		itoa(dato_adc, str, 10);
		//sprintf(str, "%.2f", dato_adc);	
				
		UART_printString(str);  // Send a string
 17c:	86 e0       	ldi	r24, 0x06	; 6
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	0e 94 9f 00 	call	0x13e	; 0x13e <UART_printString>
		UART_printString("\r\n");
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	0e 94 9f 00 	call	0x13e	; 0x13e <UART_printString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18c:	2f ef       	ldi	r18, 0xFF	; 255
 18e:	83 ed       	ldi	r24, 0xD3	; 211
 190:	90 e3       	ldi	r25, 0x30	; 48
 192:	21 50       	subi	r18, 0x01	; 1
 194:	80 40       	sbci	r24, 0x00	; 0
 196:	90 40       	sbci	r25, 0x00	; 0
 198:	e1 f7       	brne	.-8      	; 0x192 <main+0x3a>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0x44>
 19c:	00 00       	nop
 19e:	e2 cf       	rjmp	.-60     	; 0x164 <main+0xc>

000001a0 <__divmodsi4>:
 1a0:	05 2e       	mov	r0, r21
 1a2:	97 fb       	bst	r25, 7
 1a4:	1e f4       	brtc	.+6      	; 0x1ac <__divmodsi4+0xc>
 1a6:	00 94       	com	r0
 1a8:	0e 94 e7 00 	call	0x1ce	; 0x1ce <__negsi2>
 1ac:	57 fd       	sbrc	r21, 7
 1ae:	07 d0       	rcall	.+14     	; 0x1be <__divmodsi4_neg2>
 1b0:	0e 94 ef 00 	call	0x1de	; 0x1de <__udivmodsi4>
 1b4:	07 fc       	sbrc	r0, 7
 1b6:	03 d0       	rcall	.+6      	; 0x1be <__divmodsi4_neg2>
 1b8:	4e f4       	brtc	.+18     	; 0x1cc <__divmodsi4_exit>
 1ba:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__negsi2>

000001be <__divmodsi4_neg2>:
 1be:	50 95       	com	r21
 1c0:	40 95       	com	r20
 1c2:	30 95       	com	r19
 1c4:	21 95       	neg	r18
 1c6:	3f 4f       	sbci	r19, 0xFF	; 255
 1c8:	4f 4f       	sbci	r20, 0xFF	; 255
 1ca:	5f 4f       	sbci	r21, 0xFF	; 255

000001cc <__divmodsi4_exit>:
 1cc:	08 95       	ret

000001ce <__negsi2>:
 1ce:	90 95       	com	r25
 1d0:	80 95       	com	r24
 1d2:	70 95       	com	r23
 1d4:	61 95       	neg	r22
 1d6:	7f 4f       	sbci	r23, 0xFF	; 255
 1d8:	8f 4f       	sbci	r24, 0xFF	; 255
 1da:	9f 4f       	sbci	r25, 0xFF	; 255
 1dc:	08 95       	ret

000001de <__udivmodsi4>:
 1de:	a1 e2       	ldi	r26, 0x21	; 33
 1e0:	1a 2e       	mov	r1, r26
 1e2:	aa 1b       	sub	r26, r26
 1e4:	bb 1b       	sub	r27, r27
 1e6:	fd 01       	movw	r30, r26
 1e8:	0d c0       	rjmp	.+26     	; 0x204 <__udivmodsi4_ep>

000001ea <__udivmodsi4_loop>:
 1ea:	aa 1f       	adc	r26, r26
 1ec:	bb 1f       	adc	r27, r27
 1ee:	ee 1f       	adc	r30, r30
 1f0:	ff 1f       	adc	r31, r31
 1f2:	a2 17       	cp	r26, r18
 1f4:	b3 07       	cpc	r27, r19
 1f6:	e4 07       	cpc	r30, r20
 1f8:	f5 07       	cpc	r31, r21
 1fa:	20 f0       	brcs	.+8      	; 0x204 <__udivmodsi4_ep>
 1fc:	a2 1b       	sub	r26, r18
 1fe:	b3 0b       	sbc	r27, r19
 200:	e4 0b       	sbc	r30, r20
 202:	f5 0b       	sbc	r31, r21

00000204 <__udivmodsi4_ep>:
 204:	66 1f       	adc	r22, r22
 206:	77 1f       	adc	r23, r23
 208:	88 1f       	adc	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	1a 94       	dec	r1
 20e:	69 f7       	brne	.-38     	; 0x1ea <__udivmodsi4_loop>
 210:	60 95       	com	r22
 212:	70 95       	com	r23
 214:	80 95       	com	r24
 216:	90 95       	com	r25
 218:	9b 01       	movw	r18, r22
 21a:	ac 01       	movw	r20, r24
 21c:	bd 01       	movw	r22, r26
 21e:	cf 01       	movw	r24, r30
 220:	08 95       	ret

00000222 <__itoa_ncheck>:
 222:	bb 27       	eor	r27, r27
 224:	4a 30       	cpi	r20, 0x0A	; 10
 226:	31 f4       	brne	.+12     	; 0x234 <__itoa_ncheck+0x12>
 228:	99 23       	and	r25, r25
 22a:	22 f4       	brpl	.+8      	; 0x234 <__itoa_ncheck+0x12>
 22c:	bd e2       	ldi	r27, 0x2D	; 45
 22e:	90 95       	com	r25
 230:	81 95       	neg	r24
 232:	9f 4f       	sbci	r25, 0xFF	; 255
 234:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__utoa_common>

00000238 <__utoa_ncheck>:
 238:	bb 27       	eor	r27, r27

0000023a <__utoa_common>:
 23a:	fb 01       	movw	r30, r22
 23c:	55 27       	eor	r21, r21
 23e:	aa 27       	eor	r26, r26
 240:	88 0f       	add	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	aa 1f       	adc	r26, r26
 246:	a4 17       	cp	r26, r20
 248:	10 f0       	brcs	.+4      	; 0x24e <__utoa_common+0x14>
 24a:	a4 1b       	sub	r26, r20
 24c:	83 95       	inc	r24
 24e:	50 51       	subi	r21, 0x10	; 16
 250:	b9 f7       	brne	.-18     	; 0x240 <__utoa_common+0x6>
 252:	a0 5d       	subi	r26, 0xD0	; 208
 254:	aa 33       	cpi	r26, 0x3A	; 58
 256:	08 f0       	brcs	.+2      	; 0x25a <__utoa_common+0x20>
 258:	a9 5d       	subi	r26, 0xD9	; 217
 25a:	a1 93       	st	Z+, r26
 25c:	00 97       	sbiw	r24, 0x00	; 0
 25e:	79 f7       	brne	.-34     	; 0x23e <__utoa_common+0x4>
 260:	b1 11       	cpse	r27, r1
 262:	b1 93       	st	Z+, r27
 264:	11 92       	st	Z+, r1
 266:	cb 01       	movw	r24, r22
 268:	0c 94 36 01 	jmp	0x26c	; 0x26c <strrev>

0000026c <strrev>:
 26c:	dc 01       	movw	r26, r24
 26e:	fc 01       	movw	r30, r24
 270:	67 2f       	mov	r22, r23
 272:	71 91       	ld	r23, Z+
 274:	77 23       	and	r23, r23
 276:	e1 f7       	brne	.-8      	; 0x270 <strrev+0x4>
 278:	32 97       	sbiw	r30, 0x02	; 2
 27a:	04 c0       	rjmp	.+8      	; 0x284 <strrev+0x18>
 27c:	7c 91       	ld	r23, X
 27e:	6d 93       	st	X+, r22
 280:	70 83       	st	Z, r23
 282:	62 91       	ld	r22, -Z
 284:	ae 17       	cp	r26, r30
 286:	bf 07       	cpc	r27, r31
 288:	c8 f3       	brcs	.-14     	; 0x27c <strrev+0x10>
 28a:	08 95       	ret

0000028c <_exit>:
 28c:	f8 94       	cli

0000028e <__stop_program>:
 28e:	ff cf       	rjmp	.-2      	; 0x28e <__stop_program>
